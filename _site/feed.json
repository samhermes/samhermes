{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sam Hermes",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "Front-end web developer at Washington University in St. Louis. Writes about CSS, JavaScript, accessibility, WordPress, and more.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    "author": {
        "name": "Sam Hermes",
        "url": "http://localhost:4000/"
    },
    "items": [
    
        {
            "id": "http://localhost:4000/posts/controlling-scroll-position-natively/",
            "title": "Controlling scroll position natively",
            "content_text": "It had been a little while since I implemented a control to scroll the page, and I was delighted to find that much of the functionality we usually look for has been implemented directly into most of the major browsers! Of course, before we get too carried away, it’s important to note that this isn’t quite ready for use without a polyfill, but we’re getting closer and closer every day.The browser controls fall under the window object, so we can give our directions there. The available functions are .scroll(), .scrollBy(), .scrollByLines(), .scrollByPages(), and .scrollTo(). The scroll by lines and pages are hardly supported, it looks like just Firefox has picked them up for now. However, the remaining three are more than enough to get most jobs done.A common pattern that we see around is the case where the hero area of a page takes up 100vh, and gives the appearance of a full screen element. Some feel that users do not know to scroll, so they put a down arrow at the bottom of the hero area, which, when clicked, takes the user down the page. Usually, with this, we want to position the top of the viewport in alignment with the very bottom of the hero area.Here’s the full function for the desired behavior, and then I’ll pick it apart a bit:// store the &lt;button&gt; element in a variablevar downButton = document.querySelector('.down-button');// attach event handler to the button elementdownButton.addEventListener('click', function () {    // get the pixel value of how much the user has already scrolled    var alreadyScrolled = window.scrollY;    // get the window's height, subtract how much the user has scrolled    var windowHeight = window.innerHeight - alreadyScrolled;    // smoothly scroll down the page by calculated amount    window.scrollBy({        left: 0,        top: windowHeight,        behavior: 'smooth'    });});You’ll notice that .scrollBy() is in use here. This allows us to pass in a pixel value of how much we’d like to scroll. To ensure that the user always gets take to the same spot, we need to check and makes sure that we incorporate any amount that they’ve already scrolled. We subtract that from the innerHeight value that is a part of the window object.The best part of this functionality is the behavior setting. Previously, we went looking for libraries to scroll smoothly, but now it’s built into the browser. Although it lacks customization, it works great for most cases, and eases the page to the new scroll position. You can always take a user immediately to the new scroll position if desired, but the smooth scroll helps to show exactly what’s happening.Last but not least, a polyfill is needed to make this work in IE and Edge (at least at the time of writing). There is one by Dustan Kasten, available on GitHub. It gets the browser support to where most would need it to be. Hopefully we’ll be able to skip it altogether soon.",
            "content_html": "<p>It had been a little while since I implemented a control to scroll the page, and I was delighted to find that much of the functionality we usually look for has been implemented directly into <a href=\"https://caniuse.com/#feat=element-scroll-methods\">most of the major browsers</a>! Of course, before we get too carried away, it’s important to note that this isn’t quite ready for use without a polyfill, but we’re getting closer and closer every day.</p><p>The browser controls fall under the <code class=\"highlighter-rouge\">window</code> object, so we can give our directions there. The available functions are <code class=\"highlighter-rouge\">.scroll()</code>, <code class=\"highlighter-rouge\">.scrollBy()</code>, <code class=\"highlighter-rouge\">.scrollByLines()</code>, <code class=\"highlighter-rouge\">.scrollByPages()</code>, and <code class=\"highlighter-rouge\">.scrollTo()</code>. The scroll by lines and pages are hardly supported, it looks like just Firefox has picked them up for now. However, the remaining three are more than enough to get most jobs done.</p><p>A common pattern that we see around is the case where the hero area of a page takes up <code class=\"highlighter-rouge\">100vh</code>, and gives the appearance of a full screen element. Some feel that users do not know to scroll, so they put a down arrow at the bottom of the hero area, which, when clicked, takes the user down the page. Usually, with this, we want to position the top of the viewport in alignment with the very bottom of the hero area.</p><p>Here’s the full function for the desired behavior, and then I’ll pick it apart a bit:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// store the &lt;button&gt; element in a variable</span><span class=\"kd\">var</span> <span class=\"nx\">downButton</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'.down-button'</span><span class=\"p\">);</span><span class=\"c1\">// attach event handler to the button element</span><span class=\"nx\">downButton</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">// get the pixel value of how much the user has already scrolled</span>    <span class=\"kd\">var</span> <span class=\"nx\">alreadyScrolled</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">scrollY</span><span class=\"p\">;</span>    <span class=\"c1\">// get the window's height, subtract how much the user has scrolled</span>    <span class=\"kd\">var</span> <span class=\"nx\">windowHeight</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span> <span class=\"o\">-</span> <span class=\"nx\">alreadyScrolled</span><span class=\"p\">;</span>    <span class=\"c1\">// smoothly scroll down the page by calculated amount</span>    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">scrollBy</span><span class=\"p\">({</span>        <span class=\"na\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>        <span class=\"na\">top</span><span class=\"p\">:</span> <span class=\"nx\">windowHeight</span><span class=\"p\">,</span>        <span class=\"na\">behavior</span><span class=\"p\">:</span> <span class=\"s1\">'smooth'</span>    <span class=\"p\">});</span><span class=\"p\">});</span></code></pre></div></div><p>You’ll notice that <code class=\"highlighter-rouge\">.scrollBy()</code> is in use here. This allows us to pass in a pixel value of how much we’d like to scroll. To ensure that the user always gets take to the same spot, we need to check and makes sure that we incorporate any amount that they’ve already scrolled. We subtract that from the <code class=\"highlighter-rouge\">innerHeight</code> value that is a part of the <code class=\"highlighter-rouge\">window</code> object.</p><p>The best part of this functionality is the <code class=\"highlighter-rouge\">behavior</code> setting. Previously, we went looking for libraries to scroll smoothly, but now it’s built into the browser. Although it lacks customization, it works great for most cases, and eases the page to the new scroll position. You can always take a user immediately to the new scroll position if desired, but the smooth scroll helps to show exactly what’s happening.</p><p>Last but not least, a polyfill is needed to make this work in IE and Edge (at least at the time of writing). There is one by Dustan Kasten, <a href=\"https://github.com/iamdustan/smoothscroll\">available on GitHub</a>. It gets the browser support to where most would need it to be. Hopefully we’ll be able to skip it altogether soon.</p>",
            "url": "http://localhost:4000/posts/controlling-scroll-position-natively/",
            "date_published": "2019-04-22T00:00:00-05:00",
            "date_modified": "2019-04-22T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/deploying-repository-subdirectory-github-pages-site/",
            "title": "Deploying a repository to a subdirectory of GitHub Pages site",
            "content_text": "My site is currently hosted on GitHub Pages, which means that anytime I want to put something on the site, I have to make a commit and push it up. This works great for most things, but if I want to work on a larger project and “host” it on my site, it has to all go in the same repo. With GitHub Pages, it wasn’t clear that there is a much easier way to handle this. It’s a simple as setting any other repository to use GitHub Pages as well.When you set up the first GitHub Pages repository, you’re given subdomain at a github.io address. This acts as the main or parent site. In my case, I took this a little further by setting up a custom domain, which isn’t required but works just the same. After the main site is set up, any additional repositories that have GitHub pages enabled on them will use a subdirectory structure. These are referred to as “project pages.” The GitHub documentation is a little fuzzy on what exactly that means, but it’s just that these are deployed to a subdirectory of the main site.I made a repository called test-subdirectory, which had a sample index file in it. I pushed this repo to GitHub, and in the repository settings, I chose a source branch under the GitHub Pages section. This immediately deployed the repository to samhermes.com/test-subdirectory. Now, I no longer need to keep all of my projects within the main repository.It’s very likely that this is something that is obvious to other people, but it’s something that just wasn’t very clear to me, even after searching around for information. Sometimes something so simple can turn into an unnecessary hurdle.",
            "content_html": "<p>My site is currently hosted on GitHub Pages, which means that anytime I want to put something on the site, I have to make a commit and push it up. This works great for most things, but if I want to work on a larger project and “host” it on my site, it has to all go in the same repo. With GitHub Pages, it wasn’t clear that there is a much easier way to handle this. It’s a simple as setting any other repository to use GitHub Pages as well.</p><p>When you set up the first GitHub Pages repository, you’re given subdomain at a github.io address. This acts as the main or parent site. In my case, I took this a little further by setting up a custom domain, which isn’t required but works just the same. After the main site is set up, any additional repositories that have GitHub pages enabled on them will use a subdirectory structure. These are referred to as “project pages.” The GitHub documentation is a little fuzzy on what exactly that means, but it’s just that these are deployed to a subdirectory of the main site.</p><p>I made a repository called <code class=\"highlighter-rouge\">test-subdirectory</code>, which had a sample index file in it. I pushed this repo to GitHub, and in the repository settings, I chose a source branch under the GitHub Pages section. This immediately deployed the repository to <a href=\"https://samhermes.com/test-subdirectory\">samhermes.com/test-subdirectory</a>. Now, I no longer need to keep all of my projects within the main repository.</p><p>It’s very likely that this is something that is obvious to other people, but it’s something that just wasn’t very clear to me, even after searching around for information. Sometimes something so simple can turn into an unnecessary hurdle.</p>",
            "url": "http://localhost:4000/posts/deploying-repository-subdirectory-github-pages-site/",
            "date_published": "2019-04-20T00:00:00-05:00",
            "date_modified": "2019-04-20T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/defining-new-project-reading-list-admin-react-app/",
            "title": "Defining a new project - Reading List Admin React App",
            "content_text": "I’m starting on a new project, and I’ll be working on it in the open. This post is the first in a series where I’ll be chronicling my experience. So, to get started, like any project, I need to define exactly what I’ll be doing. Right now, I have a reading list on my site, and I handle updates to the list through a WordPress dashboard. What I’d like to have is a custom admin panel that I could log in to separately from WordPress. The WordPress admin has a lot of other things going on, and I’d like to just focus on my books.The main point of this project is to learn more about the ins and outs of React. I could build this admin without React, but this is just the sort of project that React was made for. I’ve never completed a React project of this size, or seen it from start to finish.In the app, I’ll need to pull in a list of all of the books that are currently in the database, both the ones that I’m currently reading and the ones I’ve completed. I’ll want to be able to make updates to existing books, as well as add new books as I begin reading them. I’ll be able to pull in these books through the WordPress REST API.An interesting component of this project will be authentication. I’ll only want to be able to access the app if I’m logged in, so I’ll need to develop a login form and ensure that what I’ve developed isn’t accessible to the outside world. I’ll use my existing WordPress account, and that will keep me from having to manage two accounts. With that, I’ll need to interface with the WordPress API to maintain my logged in status.The last part of the project that I want to pay special attention to is how it behaves on mobile vs. desktop. I want it to work anywhere, but I am imagining slightly different behavior in the two cases. In general, it will be a big UI project, as I’ll be starting from the ground up to build all of the views and components.The next post in this series will be about getting the project started. I’ll use Create React App to jump start the project and begin configuring from there. I’ve done this part before, so hopefully it’s smooth sailing for now. It won’t last long though!",
            "content_html": "<p>I’m starting on a new project, and I’ll be working on it in the open. This post is the first in a series where I’ll be chronicling my experience. So, to get started, like any project, I need to define exactly what I’ll be doing. Right now, I have a reading list on my site, and I handle updates to the list through a WordPress dashboard. What I’d like to have is a custom admin panel that I could log in to separately from WordPress. The WordPress admin has a lot of other things going on, and I’d like to just focus on my books.</p><p>The main point of this project is to learn more about the ins and outs of React. I could build this admin without React, but this is just the sort of project that React was made for. I’ve never completed a React project of this size, or seen it from start to finish.</p><p>In the app, I’ll need to pull in a list of all of the books that are currently in the database, both the ones that I’m currently reading and the ones I’ve completed. I’ll want to be able to make updates to existing books, as well as add new books as I begin reading them. I’ll be able to pull in these books through the WordPress REST API.</p><p>An interesting component of this project will be authentication. I’ll only want to be able to access the app if I’m logged in, so I’ll need to develop a login form and ensure that what I’ve developed isn’t accessible to the outside world. I’ll use my existing WordPress account, and that will keep me from having to manage two accounts. With that, I’ll need to interface with the WordPress API to maintain my logged in status.</p><p>The last part of the project that I want to pay special attention to is how it behaves on mobile vs. desktop. I want it to work anywhere, but I am imagining slightly different behavior in the two cases. In general, it will be a big UI project, as I’ll be starting from the ground up to build all of the views and components.</p><p>The next post in this series will be about getting the project started. I’ll use Create React App to jump start the project and begin configuring from there. I’ve done this part before, so hopefully it’s smooth sailing for now. It won’t last long though!</p>",
            "url": "http://localhost:4000/posts/defining-new-project-reading-list-admin-react-app/",
            "date_published": "2019-04-02T00:00:00-05:00",
            "date_modified": "2019-04-02T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/asking-for-feedback/",
            "title": "Asking for feedback",
            "content_text": "Feedback is a topic that comes up all the time when working with a team. I definitely know its value and appreciate it when it comes, but it’s difficult to both remember to ask for it and to stay open to it.First off, asking for someone’s opinion of your work can be pretty scary, and very easy to avoid as well. If you don’t ask, you won’t find out that it’s bad. Why would you punish yourself? Like most things, my default around this seems to be remaining quiet. The problem with this is that feedback helps us grow, and growing is good. It helps us do better next time.One of the biggest things that I’ve found to help is to ask very specifically for it. After a meeting is over, asking your supervisor about how they thought you did. Or, after a presentation, sending a Slack message to a few key individuals to ask about how it went. Small, specific bits of feedback are super helpful and easy for someone else to give. Asking someone about how good you are at your job in general is a very tricky thing to answer.Taking this further, it’s good to ensure that space is left for feedback. Oftentimes, feedback is requested in a group setting, which isn’t a very good forum for honest feedback. An asynchronous way to send in feedback at someone’s own pace is much better, whether that’s just an email or Slack message. I think that sometimes we’re scared of getting too much feedback, especially if we’re leaving it open to an entire group of people, but more feedback is always better!Asking for feedback is good, but getting unsolicited feedback is better! One thing I really appreciate is when someone takes the time to comment on how I did. It’s really nice to receive, but can be difficult to give. You can really make someone’s day if you give them positive reinforcement. I haven’t found a good, structured of going about this, but sometimes it’s the spontaneity that makes it special anyhow.After everything that I’ve said here, I would also like to look at this in the opposite way. Sometimes, too much feedback is bad. And, if we’re constantly evaluating how someone else is doing at something, we miss the valiant effort that they made to begin with. No one is running at 100% all the time. It’s when you’re having a bad day that you really don’t want to give or receive feedback. If I’m having a bad day, I’m unimpressed with everyone else, and that’s just not my true feeling. That’s more about my bad day. It’s good to remember that feedback has its proper time and place.",
            "content_html": "<p>Feedback is a topic that comes up all the time when working with a team. I definitely know its value and appreciate it when it comes, but it’s difficult to both remember to ask for it and to stay open to it.</p><p>First off, asking for someone’s opinion of your work can be pretty scary, and very easy to avoid as well. If you don’t ask, you won’t find out that it’s bad. Why would you punish yourself? Like most things, my default around this seems to be remaining quiet. The problem with this is that feedback helps us grow, and growing is good. It helps us do better next time.</p><p>One of the biggest things that I’ve found to help is to ask very specifically for it. After a meeting is over, asking your supervisor about how they thought you did. Or, after a presentation, sending a Slack message to a few key individuals to ask about how it went. Small, specific bits of feedback are super helpful and easy for someone else to give. Asking someone about how good you are at your job in general is a very tricky thing to answer.</p><p>Taking this further, it’s good to ensure that space is left for feedback. Oftentimes, feedback is requested in a group setting, which isn’t a very good forum for honest feedback. An asynchronous way to send in feedback at someone’s own pace is much better, whether that’s just an email or Slack message. I think that sometimes we’re scared of getting too much feedback, especially if we’re leaving it open to an entire group of people, but more feedback is always better!</p><p>Asking for feedback is good, but getting unsolicited feedback is better! One thing I really appreciate is when someone takes the time to comment on how I did. It’s really nice to receive, but can be difficult to give. You can really make someone’s day if you give them positive reinforcement. I haven’t found a good, structured of going about this, but sometimes it’s the spontaneity that makes it special anyhow.</p><p>After everything that I’ve said here, I would also like to look at this in the opposite way. Sometimes, too much feedback is bad. And, if we’re constantly evaluating how someone else is doing at something, we miss the valiant effort that they made to begin with. No one is running at 100% all the time. It’s when you’re having a bad day that you really don’t want to give or receive feedback. If I’m having a bad day, I’m unimpressed with everyone else, and that’s just not my true feeling. That’s more about my bad day. It’s good to remember that feedback has its proper time and place.</p>",
            "url": "http://localhost:4000/posts/asking-for-feedback/",
            "date_published": "2019-03-28T00:00:00-05:00",
            "date_modified": "2019-03-28T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/excluding-uncategorized-listing-categories-wordpress/",
            "title": "Excluding Uncategorized when listing categories in WordPress",
            "content_text": "Ah, the eternal dilemma. What’s the best way to show a list of categories without including the “Uncategorized” category that WordPress generates by default? I feel like I re-solve this issue each time that it comes up. The issue is that categories can be listed in a couple different contexts, so the solution differs. Sometimes we’re listing all of them on the site or sometimes we’re listing them for the current post. Let’s solve this once and for all!For the current postWhether displayed in an archive or in the single post template, this is when we’re listing categories for a specific post.The best way to list post categories is get_the_category(). It actually returns all categories, despite what its name may imply. Normally, you could use get_the_category_list(), but we need to do a little modification before outputting.Place this function in your functions.php file, or in the commonly-used template-tags.php.function custom_get_the_category_list() {    $categories = get_the_category();    $uncategorized_id = get_cat_ID( 'Uncategorized' );    $categories_list = '';    foreach ( $categories as $category ) {        if ( $category-&gt;category_parent == $uncategorized_id                || $category-&gt;cat_ID == $uncategorized_id ) {            continue;        }        $categories_list .=            '&lt;li&gt;&lt;a href=\"' . get_category_link( $category-&gt;cat_ID ) . '\"&gt;' .            $category-&gt;name .            '&lt;/a&gt;&lt;/li&gt;';    }    return '&lt;ul class=\"post-categories\"&gt;' . $categories_list . '&lt;/ul&gt;';}One thing to call out about this function is that it checks for both Uncategorized itself and any children of Uncategorized. This may vary in your project, but it seems a safe assumption to make.Now you can just use custom_get_the_category_list() anywhere that you would use get_the_category_list(). Note for the beginner, it’s best to substitute the name of your project for custom.For all postsListing all of the categories on a site is very similar to listing them for a single post. Instead of get_the_category(), we use get_categories(). The naming makes a little more sense this time. Again, normally you could just use wp_list_categories(), and you’d get an unordered list of categories that included Uncategorized.Place this function in your functions.php file, or in the commonly-used template-tags.php.function custom_list_categories() {    $categories = get_categories();    $uncategorized_id = get_cat_ID( 'Uncategorized' );    $categories_list = '';    foreach ( $categories as $category ) {        if ( $category-&gt;category_parent == $uncategorized_id                || $category-&gt;cat_ID == $uncategorized_id ) {            continue;        }        $categories_list .=            '&lt;li&gt;&lt;a href=\"' . get_category_link( $category-&gt;cat_ID ) . '\"&gt;' .            $category-&gt;name .            '&lt;/a&gt;&lt;/li&gt;';    }    return '&lt;ul class=\"site-categories\"&gt;' . $categories_list . '&lt;/ul&gt;';}Now you can just use custom_list_categories() anywhere that you would use wp_list_categories(). Note for the beginner, it’s best to substitute the name of your project for custom.",
            "content_html": "<p>Ah, the eternal dilemma. What’s the best way to show a list of categories without including the “Uncategorized” category that WordPress generates by default? I feel like I re-solve this issue each time that it comes up. The issue is that categories can be listed in a couple different contexts, so the solution differs. Sometimes we’re listing all of them on the site or sometimes we’re listing them for the current post. Let’s solve this once and for all!</p><h2 id=\"for-the-current-post\">For the current post</h2><p>Whether displayed in an archive or in the single post template, this is when we’re listing categories for a specific post.</p><p>The best way to list post categories is <code class=\"highlighter-rouge\">get_the_category()</code>. It actually returns all categories, despite what its name may imply. Normally, you could use <code class=\"highlighter-rouge\">get_the_category_list()</code>, but we need to do a little modification before outputting.</p><p>Place this function in your <code class=\"highlighter-rouge\">functions.php</code> file, or in the commonly-used <code class=\"highlighter-rouge\">template-tags.php</code>.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">custom_get_the_category_list</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nv\">$categories</span> <span class=\"o\">=</span> <span class=\"nx\">get_the_category</span><span class=\"p\">();</span>    <span class=\"nv\">$uncategorized_id</span> <span class=\"o\">=</span> <span class=\"nx\">get_cat_ID</span><span class=\"p\">(</span> <span class=\"s1\">'Uncategorized'</span> <span class=\"p\">);</span>    <span class=\"nv\">$categories_list</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>    <span class=\"k\">foreach</span> <span class=\"p\">(</span> <span class=\"nv\">$categories</span> <span class=\"k\">as</span> <span class=\"nv\">$category</span> <span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">category_parent</span> <span class=\"o\">==</span> <span class=\"nv\">$uncategorized_id</span>                <span class=\"o\">||</span> <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">cat_ID</span> <span class=\"o\">==</span> <span class=\"nv\">$uncategorized_id</span> <span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">continue</span><span class=\"p\">;</span>        <span class=\"p\">}</span>        <span class=\"nv\">$categories_list</span> <span class=\"o\">.=</span>            <span class=\"s1\">'&lt;li&gt;&lt;a href=\"'</span> <span class=\"o\">.</span> <span class=\"nx\">get_category_link</span><span class=\"p\">(</span> <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">cat_ID</span> <span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">.</span>            <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">name</span> <span class=\"o\">.</span>            <span class=\"s1\">'&lt;/a&gt;&lt;/li&gt;'</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">return</span> <span class=\"s1\">'&lt;ul class=\"post-categories\"&gt;'</span> <span class=\"o\">.</span> <span class=\"nv\">$categories_list</span> <span class=\"o\">.</span> <span class=\"s1\">'&lt;/ul&gt;'</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>One thing to call out about this function is that it checks for both Uncategorized itself and any children of Uncategorized. This may vary in your project, but it seems a safe assumption to make.</p><p>Now you can just use <code class=\"highlighter-rouge\">custom_get_the_category_list()</code> anywhere that you would use <code class=\"highlighter-rouge\">get_the_category_list()</code>. Note for the beginner, it’s best to substitute the name of your project for <code class=\"highlighter-rouge\">custom</code>.</p><h2 id=\"for-all-posts\">For all posts</h2><p>Listing all of the categories on a site is very similar to listing them for a single post. Instead of <code class=\"highlighter-rouge\">get_the_category()</code>, we use <code class=\"highlighter-rouge\">get_categories()</code>. The naming makes a little more sense this time. Again, normally you could just use <code class=\"highlighter-rouge\">wp_list_categories()</code>, and you’d get an unordered list of categories that included Uncategorized.</p><p>Place this function in your <code class=\"highlighter-rouge\">functions.php</code> file, or in the commonly-used <code class=\"highlighter-rouge\">template-tags.php</code>.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">custom_list_categories</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nv\">$categories</span> <span class=\"o\">=</span> <span class=\"nx\">get_categories</span><span class=\"p\">();</span>    <span class=\"nv\">$uncategorized_id</span> <span class=\"o\">=</span> <span class=\"nx\">get_cat_ID</span><span class=\"p\">(</span> <span class=\"s1\">'Uncategorized'</span> <span class=\"p\">);</span>    <span class=\"nv\">$categories_list</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>    <span class=\"k\">foreach</span> <span class=\"p\">(</span> <span class=\"nv\">$categories</span> <span class=\"k\">as</span> <span class=\"nv\">$category</span> <span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">category_parent</span> <span class=\"o\">==</span> <span class=\"nv\">$uncategorized_id</span>                <span class=\"o\">||</span> <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">cat_ID</span> <span class=\"o\">==</span> <span class=\"nv\">$uncategorized_id</span> <span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">continue</span><span class=\"p\">;</span>        <span class=\"p\">}</span>        <span class=\"nv\">$categories_list</span> <span class=\"o\">.=</span>            <span class=\"s1\">'&lt;li&gt;&lt;a href=\"'</span> <span class=\"o\">.</span> <span class=\"nx\">get_category_link</span><span class=\"p\">(</span> <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">cat_ID</span> <span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">.</span>            <span class=\"nv\">$category</span><span class=\"o\">-&gt;</span><span class=\"na\">name</span> <span class=\"o\">.</span>            <span class=\"s1\">'&lt;/a&gt;&lt;/li&gt;'</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">return</span> <span class=\"s1\">'&lt;ul class=\"site-categories\"&gt;'</span> <span class=\"o\">.</span> <span class=\"nv\">$categories_list</span> <span class=\"o\">.</span> <span class=\"s1\">'&lt;/ul&gt;'</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Now you can just use <code class=\"highlighter-rouge\">custom_list_categories()</code> anywhere that you would use <code class=\"highlighter-rouge\">wp_list_categories()</code>. Note for the beginner, it’s best to substitute the name of your project for <code class=\"highlighter-rouge\">custom</code>.</p>",
            "url": "http://localhost:4000/posts/excluding-uncategorized-listing-categories-wordpress/",
            "date_published": "2019-02-15T00:00:00-06:00",
            "date_modified": "2019-02-15T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/notes-from-wordcamp-us/",
            "title": "Notes from WordCamp US 2018",
            "content_text": "Thinking Like a Front-End DeveloperChris CoyierDuring Chris’s talk, I pushed a very small commit to my website to change “front end” to “front-end.” I agreed with his explanation of when to use which, even though it was different from the convention that I’d been using for a while.I found his talk very fun to listen to, and appreciated how he acknowledged the vast amount of responsibility that we all have to shoulder in our jobs. There was a feeling of togetherness in the room.One intriguing idea that Chris spoke about was the idea of “front of the front end” vs “back of the front end.” He got this from speaking with Brad Frost on the ShopTalk Show, and I think that it points to a natural divide that is happening. With React, working on the front end can actually end up looking a little like working on the back end. I’ve traditionally been more of a “front of the front” kind of developer.Holy Blockamole: Tips On Learning Block DevelopmentAndrew TaylorAndrew’s lightning talk gave a high-level overview of the ways that developers can work with Gutenberg, from creating templates to block development.When working in a custom post type, it’s easy to set a pre-defined set of blocks and prevent a user from adding or removing them. This can be done by setting 'template_lock' =&gt; 'all'. You can set the specific blocks fairly simply using template:'template' =&gt; array (    array( 'core/heading', array(        'placeholder' =&gt; __( 'Title...', 'my-plugin' ),        'level' =&gt; 4,    ) ),    array( 'core/image', array(        // Any block atribute can be set as the default.        'align' =&gt; 'wide',    ) ),    array( 'core/paragraph', array(        'placeholder' =&gt; __( 'Bio...', 'my-plugin' ),    ) ),),I took this code directly from Andrew’s slides.The question that this posed, for me, was how would we set this up if our blocks were coming from a separate plugin. So, if it was possible that the blocks weren’t available, would this fall back gracefully?In general, as more of the content in our sites becomes dependent on an array of plugins, how can we be sure that it all meshes well? Likely less of an issue than I think it is, but it will be interesting to see how it plays out in real life.Investigating Regressions Quickly using Git BisectJohn BlackbournJohn explained very succinctly how to use git bisect, a tool for finding the place in your commit history where an issue was introduced. By cutting the number of commits in half each time, you can get down to the issue very quickly, even if there are a hundred or so commits.Getting this started looks like this:git bisect startgit bisect good \"2.6.10\" - commit where it workedgit bisect bad HEAD - where it was broken (likely the latest commit)It then guides you through until you find the bad commit. John’s slides go into more detail about this. Like he said, I hope I never need to use this, but it’s nice to know that it’s there to help.Gutenberg, GraphQL and Government: Building BlocksJason BahlJason answered a question that had popped up during Andrew’s talk earlier. Andrew had spoken about how to limit blocks in a custom post type, but I wondered how this would be done for pages or posts. With a filter!This checks to see if the current page template is home.php, and then only allows the homepage-hero, curated-posts, and curated-staff blocks.Last but not least, it locks down the blocks using template_lock, like Andrew had demonstrated. So, the user can only use the three blocks specified.add_filter( 'allowed_block_types', function( $allowed ) {    global $wp_post_types, $post;    if ( 'templates/home.php' === get_page_template_slug( $post-&gt;ID ) ) {        $wp_post_types[ $post-&gt;post_type ]-&gt;template = [            [ 'wcus/homepage-hero' ],            [ 'wcus/curated-posts' ],            [ 'wcus/curated-staff' ],        ];        $wp_post_types[ $post-&gt;post_type ]-&gt;template_lock = 'all';    }});Who’s afraid of ARIA?Rian RietveldI feel like I could make an entire post just about this talk. I love a good code demo, and this talk had lots of them. Rian made everything seem very simple and straightforward, which is refreshing when you’re talking about accessibility. In practice, I know that things get a little more complicated, but I learned a lot, nonetheless.aria-expandedThis attribute is useful for menus or accordions, so that you can communicate that the following element is either hidden or visible. You would then toggle aria-expanded and the hidden attribute with JavaScript when the user opens or closes the menu or accordion.aria-liveThis was the most interesting bit, as I think that this is difficult to get right. aria-live is used to tell the user about what’s changing on the screen. So, if they hit a button to save changes, we should tell them when the changes have been successfully saved.Initially, the element with the message in it would have aria-live=\"polite\" applied to it. Using JavaScript, we would update that to aria-live=\"assertive\", triggering the screen reader to read it out.Similarly, if we have an ajax search feature, we could use this method to announce when new search results arrive with a message such as “There are 24 search results.”WordPress has functionality built into it that handles this for you. wp.a11y.speak() will add two divs to the bottom of the page, one with aria-live=\"polite\" and one with aria-live=\"assertive\" and update them as appropriate.I highly recommend watching Rian’s talk when it becomes available.Product Design Through StoriesTammie ListerJust a few select quotes to share from Tammie’s talk, which may or may not be paraphrased. Life moves fast.“We are, as a species, addicted to story. Even when the body goes to sleep, the mind stays up all night, telling itself stories.” —Jonathan Gottschall“Products with stories are powerful. When the story is good, the bond with the product is strong.”“It’s important that everyone creating the product is involved in telling the story.”Tammie made the point that a product has several different stories surrounding it. There are those people who use the product, the people who make the product, and the effect the product has by existing. Not only do you want to be aware of the story that the product is telling others, you also want to maintain the story internally.“Being too fast can be as bad as being too slow.”This was an idea that caught my attention. Sometimes, a process can happen so quickly that it overwhelms a user. Maybe they miss what happened because you gave them too much information at once, or you used too many channels to communicate.I’d recently learned about the idea of setting a minimum loading time on an ajax request, so that it doesn’t come back too quickly, and I think this connects to Tammie’s point. If something is too quick, you lose a little trust. Like, maybe it didn’t try hard enough. For human speed, maybe inflating the loading time just a touch will actually make the experience feel more robust.If you happen to be using a poor connection, this is likely the opposite of a problem, but still worth thinking about for those users with speedy connections.Last, but not least:“The details are not the details. They make the design.” —Charles Eames",
            "content_html": "<h2 class=\"margin-bottom-zero\">Thinking Like a Front-End Developer</h2><p><em>Chris Coyier</em></p><p>During Chris’s talk, I pushed a <a href=\"https://github.com/samhermes/samhermes.github.io/commit/d6a66519092adee0376a1f748f27964551846e0a\">very small commit</a> to my website to change “front end” to “front-end.” I agreed with <a href=\"https://twitter.com/WordCampUS/status/1071065672313118720\">his explanation</a> of when to use which, even though it was different from the convention that I’d been using for a while.</p><p>I found his talk very fun to listen to, and appreciated how he acknowledged the vast amount of responsibility that we all have to shoulder in our jobs. There was a feeling of togetherness in the room.</p><p>One intriguing idea that Chris spoke about was the idea of “front of the front end” vs “back of the front end.” He got this from <a href=\"https://shoptalkshow.com/episodes/334/\">speaking with Brad Frost on the ShopTalk Show</a>, and I think that it points to a natural divide that is happening. With React, working on the front end can actually end up looking a little like working on the back end. I’ve traditionally been more of a “front of the front” kind of developer.</p><h2 class=\"margin-bottom-zero\">Holy Blockamole: Tips On Learning Block Development</h2><p><em>Andrew Taylor</em></p><p>Andrew’s lightning talk gave a high-level overview of the ways that developers can work with Gutenberg, from creating templates to block development.</p><p>When working in a custom post type, it’s easy to set a pre-defined set of blocks and prevent a user from adding or removing them. This can be done by setting <code class=\"highlighter-rouge\">'template_lock' =&gt; 'all'</code>. You can set the specific blocks fairly simply using <code class=\"highlighter-rouge\">template</code>:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s1\">'template'</span> <span class=\"o\">=&gt;</span> <span class=\"k\">array</span> <span class=\"p\">(</span>    <span class=\"k\">array</span><span class=\"p\">(</span> <span class=\"s1\">'core/heading'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span>        <span class=\"s1\">'placeholder'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">__</span><span class=\"p\">(</span> <span class=\"s1\">'Title...'</span><span class=\"p\">,</span> <span class=\"s1\">'my-plugin'</span> <span class=\"p\">),</span>        <span class=\"s1\">'level'</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">4</span><span class=\"p\">,</span>    <span class=\"p\">)</span> <span class=\"p\">),</span>    <span class=\"k\">array</span><span class=\"p\">(</span> <span class=\"s1\">'core/image'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span>        <span class=\"c1\">// Any block atribute can be set as the default.</span>        <span class=\"s1\">'align'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'wide'</span><span class=\"p\">,</span>    <span class=\"p\">)</span> <span class=\"p\">),</span>    <span class=\"k\">array</span><span class=\"p\">(</span> <span class=\"s1\">'core/paragraph'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span>        <span class=\"s1\">'placeholder'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">__</span><span class=\"p\">(</span> <span class=\"s1\">'Bio...'</span><span class=\"p\">,</span> <span class=\"s1\">'my-plugin'</span> <span class=\"p\">),</span>    <span class=\"p\">)</span> <span class=\"p\">),</span><span class=\"p\">),</span></code></pre></div></div><p>I took this code directly from <a href=\"https://drive.google.com/file/d/1nX3xwOeH9Q5v9y-KDKEgffHRdzJRvoLG/view\">Andrew’s slides</a>.</p><p>The question that this posed, for me, was how would we set this up if our blocks were coming from a separate plugin. So, if it was possible that the blocks weren’t available, would this fall back gracefully?</p><p>In general, as more of the content in our sites becomes dependent on an array of plugins, how can we be sure that it all meshes well? Likely less of an issue than I think it is, but it will be interesting to see how it plays out in real life.</p><h2 class=\"margin-bottom-zero\">Investigating Regressions Quickly using Git Bisect</h2><p><em>John Blackbourn</em></p><p>John explained very succinctly how to use <code class=\"highlighter-rouge\">git bisect</code>, a tool for finding the place in your commit history where an issue was introduced. By cutting the number of commits in half each time, you can get down to the issue very quickly, even if there are a hundred or so commits.</p><p>Getting this started looks like this:<br /><code class=\"highlighter-rouge\">git bisect start</code><br /><code class=\"highlighter-rouge\">git bisect good \"2.6.10\"</code> - commit where it worked<br /><code class=\"highlighter-rouge\">git bisect bad HEAD</code> - where it was broken (likely the latest commit)</p><p>It then guides you through until you find the bad commit. <a href=\"https://speakerdeck.com/johnbillion/investigating-regressions-quickly-using-git-bisect\">John’s slides</a> go into more detail about this. Like he said, I hope I never need to use this, but it’s nice to know that it’s there to help.</p><h2 class=\"margin-bottom-zero\">Gutenberg, GraphQL and Government: Building Blocks</h2><p><em>Jason Bahl</em></p><p>Jason <a href=\"https://docs.google.com/presentation/d/1PwXjxpqbZcWBKD2xTPmuJlScJiiuOHZurVyB9vR-BH4/edit#slide=id.g4846d628b1_0_566\">answered a question</a> that had popped up during Andrew’s talk earlier. Andrew had spoken about how to limit blocks in a custom post type, but I wondered how this would be done for pages or posts. With a filter!</p><p>This checks to see if the current page template is <code class=\"highlighter-rouge\">home.php</code>, and then only allows the <code class=\"highlighter-rouge\">homepage-hero</code>, <code class=\"highlighter-rouge\">curated-posts</code>, and <code class=\"highlighter-rouge\">curated-staff</code> blocks.</p><p>Last but not least, it locks down the blocks using <code class=\"highlighter-rouge\">template_lock</code>, like Andrew had demonstrated. So, the user can only use the three blocks specified.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">add_filter</span><span class=\"p\">(</span> <span class=\"s1\">'allowed_block_types'</span><span class=\"p\">,</span> <span class=\"k\">function</span><span class=\"p\">(</span> <span class=\"nv\">$allowed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">global</span> <span class=\"nv\">$wp_post_types</span><span class=\"p\">,</span> <span class=\"nv\">$post</span><span class=\"p\">;</span>    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"s1\">'templates/home.php'</span> <span class=\"o\">===</span> <span class=\"nx\">get_page_template_slug</span><span class=\"p\">(</span> <span class=\"nv\">$post</span><span class=\"o\">-&gt;</span><span class=\"na\">ID</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"nv\">$wp_post_types</span><span class=\"p\">[</span> <span class=\"nv\">$post</span><span class=\"o\">-&gt;</span><span class=\"na\">post_type</span> <span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"na\">template</span> <span class=\"o\">=</span> <span class=\"p\">[</span>            <span class=\"p\">[</span> <span class=\"s1\">'wcus/homepage-hero'</span> <span class=\"p\">],</span>            <span class=\"p\">[</span> <span class=\"s1\">'wcus/curated-posts'</span> <span class=\"p\">],</span>            <span class=\"p\">[</span> <span class=\"s1\">'wcus/curated-staff'</span> <span class=\"p\">],</span>        <span class=\"p\">];</span>        <span class=\"nv\">$wp_post_types</span><span class=\"p\">[</span> <span class=\"nv\">$post</span><span class=\"o\">-&gt;</span><span class=\"na\">post_type</span> <span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"na\">template_lock</span> <span class=\"o\">=</span> <span class=\"s1\">'all'</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div></div><h2 class=\"margin-bottom-zero\">Who’s afraid of ARIA?</h2><p><em>Rian Rietveld</em></p><p>I feel like I could make an entire post just about this talk. I love a good code demo, and this talk had lots of them. Rian made everything seem very simple and straightforward, which is refreshing when you’re talking about accessibility. In practice, I know that things get a little more complicated, but I learned a lot, nonetheless.</p><p><code class=\"highlighter-rouge\">aria-expanded</code><br />This attribute is useful for menus or accordions, so that you can communicate that the following element is either hidden or visible. You would then toggle <code class=\"highlighter-rouge\">aria-expanded</code> and the hidden attribute with JavaScript when the user opens or closes the menu or accordion.</p><p><code class=\"highlighter-rouge\">aria-live</code><br />This was the most interesting bit, as I think that this is difficult to get right. <code class=\"highlighter-rouge\">aria-live</code> is used to tell the user about what’s changing on the screen. So, if they hit a button to save changes, we should tell them when the changes have been successfully saved.</p><p>Initially, the element with the message in it would have <code class=\"highlighter-rouge\">aria-live=\"polite\"</code> applied to it. Using JavaScript, we would update that to <code class=\"highlighter-rouge\">aria-live=\"assertive\"</code>, triggering the screen reader to read it out.</p><p>Similarly, if we have an ajax search feature, we could use this method to announce when new search results arrive with a message such as “There are 24 search results.”</p><p>WordPress has functionality built into it that handles this for you. <code class=\"highlighter-rouge\">wp.a11y.speak()</code> will add two <code class=\"highlighter-rouge\">div</code>s to the bottom of the page, one with <code class=\"highlighter-rouge\">aria-live=\"polite\"</code> and one with <code class=\"highlighter-rouge\">aria-live=\"assertive\"</code> and update them as appropriate.</p><p>I highly recommend watching Rian’s talk when it becomes available.</p><h2 class=\"margin-bottom-zero\">Product Design Through Stories</h2><p><em>Tammie Lister</em></p><p>Just a few select quotes to share from <a href=\"https://speakerdeck.com/tammielis/product-design-through-stories\">Tammie’s talk</a>, which may or may not be paraphrased. Life moves fast.</p><p>“We are, as a species, addicted to story. Even when the body goes to sleep, the mind stays up all night, telling itself stories.” —Jonathan Gottschall<br />“Products with stories are powerful. When the story is good, the bond with the product is strong.”<br />“It’s important that everyone creating the product is involved in telling the story.”</p><p>Tammie made the point that a product has several different stories surrounding it. There are those people who use the product, the people who make the product, and the effect the product has by existing. Not only do you want to be aware of the story that the product is telling others, you also want to maintain the story internally.</p><p>“Being too fast can be as bad as being too slow.”</p><p>This was an idea that caught my attention. Sometimes, a process can happen so quickly that it overwhelms a user. Maybe they miss what happened because you gave them too much information at once, or you used too many channels to communicate.</p><p>I’d recently learned about the idea of setting a minimum loading time on an ajax request, so that it doesn’t come back too quickly, and I think this connects to Tammie’s point. If something is too quick, you lose a little trust. Like, maybe it didn’t try hard enough. For human speed, maybe inflating the loading time just a touch will actually make the experience feel more robust.</p><p>If you happen to be using a poor connection, this is likely the opposite of a problem, but still worth thinking about for those users with speedy connections.</p><p>Last, but not least:</p><p>“The details are not the details. They make the design.” —Charles Eames</p>",
            "url": "http://localhost:4000/posts/notes-from-wordcamp-us/",
            "date_published": "2018-12-13T00:00:00-06:00",
            "date_modified": "2018-12-13T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/disabling-blocks-block-styles-gutenberg/",
            "title": "Disabling blocks and block styles in Gutenberg",
            "content_text": "As with most things involving Gutenberg, this could change, and may not be best practice later on, but it’s what I’ve found to work for the time being. Both blocks and block styles can be disabled through JavaScript, using wp.domReady().First things first, a JavaScript file needs to be enqueued in the Gutenberg editor, which can be accomplished by hooking into enqueue_block_editor_assets.function namespace_block_editor_scripts() {    wp_enqueue_script( 'namespace-core-blocks', 'core-blocks.js', array( 'wp-blocks' ), '', true );}add_action( 'enqueue_block_editor_assets', 'namespace_block_editor_scripts' );Inside of core-blocks.js, it’s fairly simple to disable blocks and block styles. The tricky part is knowing how they are named, which can take some digging. My example only disables the Verse and Cover blocks, and the “Dots” option in the Separator block. Take note of the two unregisterBlockType and unregisterBlockStyle.wp.domReady(() =&gt; {    wp.blocks.unregisterBlockType('core/verse');    wp.blocks.unregisterBlockType('core/cover');    wp.blocks.unregisterBlockStyle('core/separator', 'dots');}Based on the discussion happening in issue #11338 on Github, wp.domReady() seems to be the best place to unregister block types and styles at the moment, though it may not be necessary in the future. It would also be nice to control this in PHP, which may eventually be an option as well.Like I said before, things with Gutenberg are actively changing. I’ll be keeping this post updated with the latest information as I learn it. If you know of a better, more official way, do let me know!",
            "content_html": "<p>As with most things involving Gutenberg, this could change, and may not be best practice later on, but it’s what I’ve found to work for the time being. Both blocks and block styles can be disabled through JavaScript, using <code class=\"highlighter-rouge\">wp.domReady()</code>.</p><p>First things first, a JavaScript file needs to be enqueued in the Gutenberg editor, which can be accomplished by hooking into <code class=\"highlighter-rouge\">enqueue_block_editor_assets</code>.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">namespace_block_editor_scripts</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">wp_enqueue_script</span><span class=\"p\">(</span> <span class=\"s1\">'namespace-core-blocks'</span><span class=\"p\">,</span> <span class=\"s1\">'core-blocks.js'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span> <span class=\"s1\">'wp-blocks'</span> <span class=\"p\">),</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"kc\">true</span> <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">'enqueue_block_editor_assets'</span><span class=\"p\">,</span> <span class=\"s1\">'namespace_block_editor_scripts'</span> <span class=\"p\">);</span></code></pre></div></div><p>Inside of <code class=\"highlighter-rouge\">core-blocks.js</code>, it’s fairly simple to disable blocks and block styles. The tricky part is knowing how they are named, which can take some digging. My example only disables the Verse and Cover blocks, and the “Dots” option in the Separator block. Take note of the two <code class=\"highlighter-rouge\">unregisterBlockType</code> and <code class=\"highlighter-rouge\">unregisterBlockStyle</code>.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">wp</span><span class=\"p\">.</span><span class=\"nx\">domReady</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nx\">wp</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">.</span><span class=\"nx\">unregisterBlockType</span><span class=\"p\">(</span><span class=\"s1\">'core/verse'</span><span class=\"p\">);</span>    <span class=\"nx\">wp</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">.</span><span class=\"nx\">unregisterBlockType</span><span class=\"p\">(</span><span class=\"s1\">'core/cover'</span><span class=\"p\">);</span>    <span class=\"nx\">wp</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">.</span><span class=\"nx\">unregisterBlockStyle</span><span class=\"p\">(</span><span class=\"s1\">'core/separator'</span><span class=\"p\">,</span> <span class=\"s1\">'dots'</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>Based on the discussion happening in <a href=\"https://github.com/WordPress/gutenberg/issues/11338\">issue #11338</a> on Github, <code class=\"highlighter-rouge\">wp.domReady()</code> seems to be the best place to unregister block types and styles at the moment, though it may not be necessary in the future. It would also be nice to control this in PHP, which may eventually be an option as well.</p><p>Like I said before, things with Gutenberg are actively changing. I’ll be keeping this post updated with the latest information as I learn it. If you know of a better, more official way, do <a href=\"https://samhermes.typeform.com/to/d4C4FT\">let me know</a>!</p>",
            "url": "http://localhost:4000/posts/disabling-blocks-block-styles-gutenberg/",
            "date_published": "2018-11-28T00:00:00-06:00",
            "date_modified": "2018-11-28T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/replacing-moment-js-date-fns/",
            "title": "Replacing Moment.js with date-fns",
            "content_text": "In my Next SpaceX Launch app, data is pulled from a SpaceX API. It returns date and time information for each launch, which needs to be formatted before being displayed. When I started on this project, I quickly found Moment.js and determined that it could get the job done. It was easy to format a date with the following:&lt;Moment format=\"MMMM DD, YYYY\"&gt;{ mission.launch_date_local }&lt;/Moment&gt;This accepts the date and time string and returns a formatted date in MMMM DD, YYYY format. Using this for time is similar, just passing in h:mm a as the format.The issue with using Moment.js for this is that it’s just simply overkill, as demonstrated by the You-Dont-Need-Momentjs repo. In my simple application, I’m merely wanting to format a handful of dates. Passing Moment.js off to the user means that they are loading extra code in the browser unnecessarily. Fortunately, there’s a simpler library, date-fns that gets the job done in much the same way.I uninstalled react-moment and moment from my project, and then installed date-fns.$ npm uninstall react-moment$ npm uninstall moment$ npm install date-fnsI then updated the import statement inside of each component.import format from 'date-fns/format'Now, in the app, in the places where I was using &lt;Moment&gt;, I swapped it out for format().{ format( mission.launch_date_local, 'MMMM DD, YYYY' ) }Simple as that! In the end, the end user gets a completed page a little quicker, with the exact same functionality.",
            "content_html": "<p>In my <a href=\"https://samhermes.com/next-spacex-launch/\">Next SpaceX Launch</a> app, data is pulled from a <a href=\"https://github.com/r-spacex/SpaceX-API\">SpaceX API</a>. It returns date and time information for each launch, which needs to be formatted before being displayed. When I started on this project, I quickly found Moment.js and determined that it could get the job done. It was easy to format a date with the following:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">Moment</span> <span class=\"nx\">format</span><span class=\"o\">=</span><span class=\"s2\">\"MMMM DD, YYYY\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">mission</span><span class=\"p\">.</span><span class=\"nx\">launch_date_local</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/Moment</span><span class=\"err\">&gt;</span></code></pre></div></div><p>This accepts the date and time string and returns a formatted date in <code class=\"highlighter-rouge\">MMMM DD, YYYY</code> format. Using this for time is similar, just passing in <code class=\"highlighter-rouge\">h:mm a</code> as the format.</p><p>The issue with using Moment.js for this is that it’s just simply overkill, as demonstrated by the <a href=\"https://github.com/you-dont-need/You-Dont-Need-Momentjs\">You-Dont-Need-Momentjs</a> repo. In my simple application, I’m merely wanting to format a handful of dates. Passing Moment.js off to the user means that they are loading extra code in the browser unnecessarily. Fortunately, there’s a simpler library, <code class=\"highlighter-rouge\">date-fns</code> that gets the job done in much the same way.</p><p>I uninstalled <code class=\"highlighter-rouge\">react-moment</code> and <code class=\"highlighter-rouge\">moment</code> from my project, and then installed <code class=\"highlighter-rouge\">date-fns</code>.</p><pre><code class=\"language-markup\">$ npm uninstall react-moment$ npm uninstall moment$ npm install date-fns</code></pre><p>I then updated the import statement inside of each component.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">format</span> <span class=\"k\">from</span> <span class=\"s1\">'date-fns/format'</span></code></pre></div></div><p>Now, in the app, in the places where I was using <code class=\"highlighter-rouge\">&lt;Moment&gt;</code>, I swapped it out for <code class=\"highlighter-rouge\">format()</code>.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span> <span class=\"nx\">format</span><span class=\"p\">(</span> <span class=\"nx\">mission</span><span class=\"p\">.</span><span class=\"nx\">launch_date_local</span><span class=\"p\">,</span> <span class=\"s1\">'MMMM DD, YYYY'</span> <span class=\"p\">)</span> <span class=\"p\">}</span></code></pre></div></div><p>Simple as that! In the end, the end user gets a completed page a little quicker, with the exact same functionality.</p>",
            "url": "http://localhost:4000/posts/replacing-moment-js-date-fns/",
            "date_published": "2018-11-15T00:00:00-06:00",
            "date_modified": "2018-11-15T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/upgrading-from-gulp-3-to-4/",
            "title": "Upgrading from Gulp 3 to 4",
            "content_text": "We love when things just keep getting better! Gulp 4 has many new features, and with just a few changes to gulpfile.js, it’s easy to make the upgrade. Gulp 4 was officially released on December 31, 2017.The biggest change is in how tasks are ordered. Previously, if there was a list of tasks that you wanted to complete, they would happen sequentially. Now, with a mixture of gulp.series() and gulp.parallel(), you can be a little more specific. gulp.series() will complete tasks sequentially, like before, and gulp.parallel() will complete them at the same time.Let’s look at a 1 to 1 conversion. These are the changes I needed to make to my watch task, just to get things working like they were in Gulp 3.For my watch task, I had:gulp.task('watch', function () {    gulp.watch('./sass/**/*.scss', ['sass']);});The change that needs to be made here is with the ['sass'] array. This defines which tasks should run when the watch tasks detects a change to any .scss file in the sass folder or any of its children. Since there is only one task to run, we can use gulp.series().gulp.watch('./sass/**/*.scss', gulp.series('sass'));This is a simple change, and things get only a little more complicated when there is more than one task to run. In my case, it was the default task. In it, I run the sass task, and then start the watch task.Previously, it looked like this, a simple array:gulp.task('default', ['sass', 'watch']);Now, we use gulp.parallel() to accomplish the same result. This just means that these two tasks are free to run at the same time, as they are not dependent on one another.gulp.task('default', gulp.parallel('sass', 'watch'));Now that gulpfile.js is up to date and ready for Gulp 4, it’s time to actually do the upgrade. This is straightforward with npm. The following commands upgrade the global Gulp installation, by first removing the old version and then installing new.According to this note in the Pattern Lab repo, “Gulp 4 uses an updated CLI which needs to be updated globally. This CLI is backwards compatible with any Gulp 3.X projects you may have locally.”$ npm rm -g gulp$ npm install -g gulp-cliNow that Gulp is upgraded globally, each individual project needs to be updated to take advantage of it. Just like the global upgrade, the following commands uninstall the local version and then install the new.$ npm uninstall gulp --save-dev$ npm install gulp@^4.0.0 --save-devWe’re off to the races!",
            "content_html": "<p>We love when things just keep getting better! Gulp 4 has many new features, and with just a few changes to <code class=\"highlighter-rouge\">gulpfile.js</code>, it’s easy to make the upgrade. Gulp 4 was officially released on December 31, 2017.</p><p>The biggest change is in how tasks are ordered. Previously, if there was a list of tasks that you wanted to complete, they would happen sequentially. Now, with a mixture of <code class=\"highlighter-rouge\">gulp.series()</code> and <code class=\"highlighter-rouge\">gulp.parallel()</code>, you can be a little more specific. <code class=\"highlighter-rouge\">gulp.series()</code> will complete tasks sequentially, like before, and <code class=\"highlighter-rouge\">gulp.parallel()</code> will complete them at the same time.</p><p>Let’s look at a 1 to 1 conversion. These are the changes I needed to make to my watch task, just to get things working like they were in Gulp 3.</p><p>For my watch task, I had:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"s1\">'watch'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">watch</span><span class=\"p\">(</span><span class=\"s1\">'./sass/**/*.scss'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'sass'</span><span class=\"p\">]);</span><span class=\"p\">});</span></code></pre></div></div><p>The change that needs to be made here is with the <code class=\"highlighter-rouge\">['sass']</code> array. This defines which tasks should run when the watch tasks detects a change to any <code class=\"highlighter-rouge\">.scss</code> file in the <code class=\"highlighter-rouge\">sass</code> folder or any of its children. Since there is only one task to run, we can use <code class=\"highlighter-rouge\">gulp.series()</code>.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">watch</span><span class=\"p\">(</span><span class=\"s1\">'./sass/**/*.scss'</span><span class=\"p\">,</span> <span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">series</span><span class=\"p\">(</span><span class=\"s1\">'sass'</span><span class=\"p\">));</span></code></pre></div></div><p>This is a simple change, and things get only a little more complicated when there is more than one task to run. In my case, it was the <code class=\"highlighter-rouge\">default</code> task. In it, I run the <code class=\"highlighter-rouge\">sass</code> task, and then start the <code class=\"highlighter-rouge\">watch</code> task.</p><p>Previously, it looked like this, a simple array:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'sass'</span><span class=\"p\">,</span> <span class=\"s1\">'watch'</span><span class=\"p\">]);</span></code></pre></div></div><p>Now, we use <code class=\"highlighter-rouge\">gulp.parallel()</code> to accomplish the same result. This just means that these two tasks are free to run at the same time, as they are not dependent on one another.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">parallel</span><span class=\"p\">(</span><span class=\"s1\">'sass'</span><span class=\"p\">,</span> <span class=\"s1\">'watch'</span><span class=\"p\">));</span></code></pre></div></div><p>Now that <code class=\"highlighter-rouge\">gulpfile.js</code> is up to date and ready for Gulp 4, it’s time to actually do the upgrade. This is straightforward with <code class=\"highlighter-rouge\">npm</code>. The following commands upgrade the global Gulp installation, by first removing the old version and then installing new.</p><p>According to <a href=\"https://github.com/pattern-lab/edition-node-gulp/wiki/Updating-to-Gulp-4\">this note in the Pattern Lab repo</a>, “Gulp 4 uses an updated CLI which needs to be updated globally. This CLI is backwards compatible with any Gulp 3.X projects you may have locally.”</p><pre><code class=\"language-markup\">$ npm rm -g gulp$ npm install -g gulp-cli</code></pre><p>Now that Gulp is upgraded globally, each individual project needs to be updated to take advantage of it. Just like the global upgrade, the following commands uninstall the local version and then install the new.</p><pre><code class=\"language-markup\">$ npm uninstall gulp --save-dev$ npm install gulp@^4.0.0 --save-dev</code></pre><p>We’re off to the races!</p>",
            "url": "http://localhost:4000/posts/upgrading-from-gulp-3-to-4/",
            "date_published": "2018-11-11T00:00:00-06:00",
            "date_modified": "2018-11-11T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/multiple-markers-popups-mapbox/",
            "title": "How to add multiple default markers with popups in Mapbox GL JS",
            "content_text": "To create my travel map, I used Mapbox GL JS. After the map embed loads from Mapbox, it fires off an ajax request to a WordPress site where the location data is stored. The map gets the response in JSON, which is then used to build a geoJSON object that the map will understand. From there, adding the data to the map is fairly easy, if you know what you’re doing.Adding a single marker to a Mapbox embed is straightforward. The Mapbox documentation site provides a working example that can be emulated, but doesn’t give explicit instructions for what to do if you have multiple points. In my case, I also wanted to add a popup for each of the markers with a title and visit count.Now that I’m on the other side of this issue, it seems so straightforward. In order to get here, though, I used a store locator demo from Mapbox. It’s slightly more complicated than what I was looking for, but it contained the structure that I was looking for. If you open the inspector on that page, there’s a script tag at the bottom of the page that contains the relevant JS.To add more than one marker, all that’s needed is a forEach loop. If coming from geojson, you can loop over the features array. In the store locator demo, that looks like this:stores.features.forEach(function(marker) { ... }Within the forEach, it’s simple to create a new marker for each point in the features array.new mapboxgl.Marker()    .setLngLat(marker.geometry.coordinates)    .addTo(map);The store locator example, like all of the others provided by Mapbox, uses a custom icon for each marker. I prefer the default Mapbox marker style, so the part of the demo where it creates an empty div for each marker is unnecessary, and actually removes the default icon when set in the new mapboxgl.marker call.To add a popup to each marker, there are a number of ways to go about it. This was confusing to me at first, as some demos show a way to use just one popup, and update it as each marker is clicked on or activated. This is not necessary, as you can create a popup for each marker, and the map handles the display.Above the new mapboxgl.Marker() call above, building a popup is done very similarly:var popup = new mapboxgl.Popup()    .setText(marker.properties.title);With a popup created, a slight modification to the marker setup will ensure that the popup is attached to the appropriate marker.new mapboxgl.Marker()    .setLngLat(marker.geometry.coordinates)    .setPopup(popup)    .addTo(map);An working version of this code can be seen on Github, where I customize the popup styles a bit. This is what is currently running my travel map.",
            "content_html": "<p>To create my <a href=\"https://samhermes.com/travel-map\">travel map</a>, I used Mapbox GL JS. After the map embed loads from Mapbox, it fires off an ajax request to a WordPress site where the location data is stored. The map gets the response in JSON, which is then used to build a geoJSON object that the map will understand. From there, adding the data to the map is fairly easy, if you know what you’re doing.</p><p>Adding a single marker to a Mapbox embed is straightforward. The Mapbox documentation site provides a <a href=\"https://www.mapbox.com/mapbox-gl-js/api/#marker\">working example</a> that can be emulated, but doesn’t give explicit instructions for what to do if you have multiple points. In my case, I also wanted to add a popup for each of the markers with a title and visit count.</p><p>Now that I’m on the other side of this issue, it seems so straightforward. In order to get here, though, I used a <a href=\"https://www.mapbox.com/help/demos/gl-store-locator/step-five.html\">store locator demo from Mapbox</a>. It’s slightly more complicated than what I was looking for, but it contained the structure that I was looking for. If you open the inspector on that page, there’s a script tag at the bottom of the page that contains the relevant JS.</p><p>To add more than one marker, all that’s needed is a <code class=\"highlighter-rouge\">forEach</code> loop. If coming from geojson, you can loop over the <code class=\"highlighter-rouge\">features</code> array. In the store locator demo, that looks like this:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">stores</span><span class=\"p\">.</span><span class=\"nx\">features</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">marker</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span></code></pre></div></div><p>Within the forEach, it’s simple to create a new marker for each point in the <code class=\"highlighter-rouge\">features</code> array.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">new</span> <span class=\"nx\">mapboxgl</span><span class=\"p\">.</span><span class=\"nx\">Marker</span><span class=\"p\">()</span>    <span class=\"p\">.</span><span class=\"nx\">setLngLat</span><span class=\"p\">(</span><span class=\"nx\">marker</span><span class=\"p\">.</span><span class=\"nx\">geometry</span><span class=\"p\">.</span><span class=\"nx\">coordinates</span><span class=\"p\">)</span>    <span class=\"p\">.</span><span class=\"nx\">addTo</span><span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"p\">);</span></code></pre></div></div><p>The store locator example, like all of the others provided by Mapbox, uses a custom icon for each marker. I prefer the default Mapbox marker style, so the part of the demo where it creates an empty div for each marker is unnecessary, and actually removes the default icon when set in the <code class=\"highlighter-rouge\">new mapboxgl.marker</code> call.</p><p>To add a popup to each marker, there are a number of ways to go about it. This was confusing to me at first, as some demos show a way to use just one popup, and update it as each marker is clicked on or activated. This is not necessary, as you can create a popup for each marker, and the map handles the display.</p><p>Above the <code class=\"highlighter-rouge\">new mapboxgl.Marker()</code> call above, building a popup is done very similarly:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">popup</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mapboxgl</span><span class=\"p\">.</span><span class=\"nx\">Popup</span><span class=\"p\">()</span>    <span class=\"p\">.</span><span class=\"nx\">setText</span><span class=\"p\">(</span><span class=\"nx\">marker</span><span class=\"p\">.</span><span class=\"nx\">properties</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">);</span></code></pre></div></div><p>With a popup created, a slight modification to the marker setup will ensure that the popup is attached to the appropriate marker.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">new</span> <span class=\"nx\">mapboxgl</span><span class=\"p\">.</span><span class=\"nx\">Marker</span><span class=\"p\">()</span>    <span class=\"p\">.</span><span class=\"nx\">setLngLat</span><span class=\"p\">(</span><span class=\"nx\">marker</span><span class=\"p\">.</span><span class=\"nx\">geometry</span><span class=\"p\">.</span><span class=\"nx\">coordinates</span><span class=\"p\">)</span>    <span class=\"p\">.</span><span class=\"nx\">setPopup</span><span class=\"p\">(</span><span class=\"nx\">popup</span><span class=\"p\">)</span>    <span class=\"p\">.</span><span class=\"nx\">addTo</span><span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"p\">);</span></code></pre></div></div><p>An working version of this code can be <a href=\"https://github.com/samhermes/samhermes.github.io/blob/master/js/travel-map.js#L42\">seen on Github</a>, where I customize the popup styles a bit. This is what is currently running my travel map.</p>",
            "url": "http://localhost:4000/posts/multiple-markers-popups-mapbox/",
            "date_published": "2018-10-10T00:00:00-05:00",
            "date_modified": "2018-10-10T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/preparing-wordpress-theme-gutenberg/",
            "title": "Preparing a WordPress theme for Gutenberg",
            "content_text": "As the launch of Gutenberg gets closer and closer, now is as good a time as any to make preparations. My theme that is live in the theme directory, Halle, works fairly well with Gutenberg without any changes, but there are some small modifications that I’d like to make to improve the overall experience and to take full advantage of what Gutenberg offers.Matching editor styles to the front endGutenberg is fantastic for the way it allows the back end editing experience to mirror the front end display, if you desire. With some slight modifications, it’s really easy to bring the styles into alignment. Just to start, you can register the same Google Fonts in the editor.This is fairly similar to the wp_enqueue_scripts action that is typically used for front end styles, the difference is that enqueue_block_editor_assets just enqueues the styles in the Gutenberg editor.function halle_block_editor_styles() {    wp_enqueue_style( 'halle-editor-fonts', 'https://fonts.googleapis.com/css?family=Work+Sans:400,500,700|Poly:400,400i' );}add_action( 'enqueue_block_editor_assets', 'halle_block_editor_styles' );Previously, I was adding Google fonts to the editor using add_editor_style( ) and passing in the stylesheet URL. As some users will still be using the classic editor, and some will use Gutenberg, I’ll leave both of these in place. I’m not sure when I’ll be able to remove the old add_editor_style() declaration, but I’d say that I would leave it in for a year or so as users upgrade and transition.Now that the fonts are enqueued, we need to use them for the post/page title and other text blocks. I created a new Sass file called block-editor-styles.scss in the theme, and enqueued it inside of the halle_block_editor_styles() function that I used above.Taking a cue from the Gutenberg Handbook, I started with a parent selector of body.block-editor-page, and then nested all of the following styles within..edit-post-visual-editor {    font-family: 'Poly', serif;}The .edit-post-visual-editor class is a parent class for the editor, so this font family declaration cascades down into most elements in the editor. Gutenberg’s styles are taking the same approach, so overriding using this method is easy.Although the cascade works fairly well, both the post title and paragraphs need just a bit more specificity to override. Again, these are both nested inside of body.block-editor-page..editor-post-title__input,p {    font-family: 'Poly', serif;}I could go further with these styles, but your theme will likely differ from mine. The next item that I addressed was the max-width of each block. You can see how I accomplished this and some other modifications in the Halle repo on GitHub.Customizing block stylesOut of the box, Gutenberg provides a range of blocks. By default, Gutenberg serves a new core blocks stylesheet to the front of your site to properly style each block. At the moment, the handbook states that these styles are an opt-in feature, but that doesn’t seem to be the case, as they are being served up without any additional action.At the moment, blocks will generally look the same in both the editor and the front end, but they likely will not fit with the style of your theme. Handling this will vary by instance. I am going to start with what Gutenberg offers and slightly modify from there. Fortunately, Gutenberg has block-specific classes that it applies to each element, so any styles that I add will not interfere with anyone who does not yet have Gutenberg in use.For now, I am just modifying a few blocks, as these seem to be the most opinionated (as far as styles go) of the core blocks.ButtonThe button block has a number of options associated with it, but I primarily wanted to reduce the border radius (everything is so round now?!). This was accomplished by using .wp-block-button.wp-block-button__link.Block QuoteThe blockquote styles provided by Gutenberg aren’t too specific, but in my case, I needed to add support for the blockquote citation that is now available. Previously, I was relying on the bottom margin of the blockquote paragraph element, and needed to shift that to the blockquote element itself.Horizontal RuleGutenberg offers three &lt;hr&gt; styles: short line, wide line, and dots. Previously, I was using a background color to provide the rule, but this interferes with how Gutenberg styles rules. I transitioned my styles from background: #ccc to border-top: 1px solid #ccc.The confusing part here is that Gutenberg defaults to the short line style, but currently doesn’t serve styles for it to the front end, only for the wide line and dots styles. So, if nothing is done, the short and wide lines look the same on the front end. I’ve added styles to Halle’s stylesheet to remedy this.Enabling wide imagesWide images are the biggest reason to revisit the layout of your theme. In Halle, individual posts have a sidebar when the screen is wide enough to accommodate it. This is not conducive to wide images. This led me to question whether or not I could make the layout an option, so that the user could choose the sidebar layout, or a centered layout.To enable wide images, all that is required is the following, added to after_setup_theme.add_theme_support( 'align-wide' );There are several approaches to take to support wide images on the front end. You could make the parent element of the post content 100% width, and then place a max-width on everything except for wide images. Or, instead, you could break the wide images out of the container. This method is described in this article from Bill Erickson. I prefer the former approach.I haven’t implemented wide images in Halle yet, as this will involve much deeper changes to the foundational layout of the theme, and there’s already enough change happening. I’ll come back to this at a later time.Color palettesIf your theme contains a specific color palette, or you are working with brand colors, customizing the color palette available to users is a great way to encourage consistency. I won’t go into how to accomplish this specifically, but it’s worth noting that this is available. More information is detailed in the Gutenberg Handbook.",
            "content_html": "<p>As the launch of Gutenberg gets closer and closer, now is as good a time as any to make preparations. My theme that is live in the theme directory, <a href=\"https://wordpress.org/themes/halle/\">Halle</a>, works fairly well with Gutenberg without any changes, but there are some small modifications that I’d like to make to improve the overall experience and to take full advantage of what Gutenberg offers.</p><h2 id=\"matching-editor-styles-to-the-front-end\">Matching editor styles to the front end</h2><p>Gutenberg is fantastic for the way it allows the back end editing experience to mirror the front end display, if you desire. With some slight modifications, it’s really easy to bring the styles into alignment. Just to start, you can register the same Google Fonts in the editor.</p><p>This is fairly similar to the <code class=\"highlighter-rouge\">wp_enqueue_scripts</code> action that is typically used for front end styles, the difference is that <code class=\"highlighter-rouge\">enqueue_block_editor_assets</code> just enqueues the styles in the Gutenberg editor.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">halle_block_editor_styles</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">wp_enqueue_style</span><span class=\"p\">(</span> <span class=\"s1\">'halle-editor-fonts'</span><span class=\"p\">,</span> <span class=\"s1\">'https://fonts.googleapis.com/css?family=Work+Sans:400,500,700|Poly:400,400i'</span> <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">'enqueue_block_editor_assets'</span><span class=\"p\">,</span> <span class=\"s1\">'halle_block_editor_styles'</span> <span class=\"p\">);</span></code></pre></div></div><p>Previously, I was adding Google fonts to the editor using <code class=\"highlighter-rouge\">add_editor_style( )</code> and passing in the stylesheet URL. As some users will still be using the classic editor, and some will use Gutenberg, I’ll leave both of these in place. I’m not sure when I’ll be able to remove the old <code class=\"highlighter-rouge\">add_editor_style()</code> declaration, but I’d say that I would leave it in for a year or so as users upgrade and transition.</p><p>Now that the fonts are enqueued, we need to use them for the post/page title and other text blocks. I created a new Sass file called <code class=\"highlighter-rouge\">block-editor-styles.scss</code> in the theme, and enqueued it inside of the <code class=\"highlighter-rouge\">halle_block_editor_styles()</code> function that I used above.</p><p>Taking a cue from the <a href=\"https://wordpress.org/gutenberg/handbook/extensibility/theme-support/#editor-styles\">Gutenberg Handbook</a>, I started with a parent selector of <code class=\"highlighter-rouge\">body.block-editor-page</code>, and then nested all of the following styles within.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.edit-post-visual-editor</span> <span class=\"p\">{</span>    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"s2\">'Poly'</span><span class=\"p\">,</span> <span class=\"nb\">serif</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>The <code class=\"highlighter-rouge\">.edit-post-visual-editor</code> class is a parent class for the editor, so this font family declaration cascades down into most elements in the editor. Gutenberg’s styles are taking the same approach, so overriding using this method is easy.</p><p>Although the cascade works fairly well, both the post title and paragraphs need just a bit more specificity to override. Again, these are both nested inside of <code class=\"highlighter-rouge\">body.block-editor-page</code>.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.editor-post-title__input</span><span class=\"o\">,</span><span class=\"nt\">p</span> <span class=\"p\">{</span>    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"s2\">'Poly'</span><span class=\"p\">,</span> <span class=\"nb\">serif</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>I could go further with these styles, but your theme will likely differ from mine. The next item that I addressed was the <code class=\"highlighter-rouge\">max-width</code> of each block. You can see how I accomplished this and some other modifications <a href=\"https://github.com/samhermes/halle/blob/gutenberg/sass/block-editor-style.scss\">in the Halle repo on GitHub</a>.</p><h2 id=\"customizing-block-styles\">Customizing block styles</h2><p>Out of the box, Gutenberg provides a range of blocks. By default, Gutenberg serves a new core blocks stylesheet to the front of your site to properly style each block. At the moment, the handbook states that these styles are an opt-in feature, but that doesn’t seem to be the case, as they are being served up without any additional action.</p><p>At the moment, blocks will generally look the same in both the editor and the front end, but they likely will not fit with the style of your theme. Handling this will vary by instance. I am going to start with what Gutenberg offers and slightly modify from there. Fortunately, Gutenberg has block-specific classes that it applies to each element, so any styles that I add will not interfere with anyone who does not yet have Gutenberg in use.</p><p>For now, I am just modifying a few blocks, as these seem to be the most opinionated (as far as styles go) of the core blocks.</p><h3 id=\"button\">Button</h3><p>The button block has a number of options associated with it, but I primarily wanted to reduce the border radius (everything is so round now?!). This was accomplished by using <code class=\"highlighter-rouge\">.wp-block-button.wp-block-button__link</code>.</p><h3 id=\"block-quote\">Block Quote</h3><p>The <code class=\"highlighter-rouge\">blockquote</code> styles provided by Gutenberg aren’t too specific, but in my case, I needed to add support for the <code class=\"highlighter-rouge\">blockquote</code> citation that is now available. Previously, I was relying on the bottom margin of the <code class=\"highlighter-rouge\">blockquote</code> paragraph element, and needed to shift that to the <code class=\"highlighter-rouge\">blockquote</code> element itself.</p><h3 id=\"horizontal-rule\">Horizontal Rule</h3><p>Gutenberg offers three <code class=\"highlighter-rouge\">&lt;hr&gt;</code> styles: short line, wide line, and dots. Previously, I was using a background color to provide the rule, but this interferes with how Gutenberg styles rules. I transitioned my styles from <code class=\"highlighter-rouge\">background: #ccc</code> to <code class=\"highlighter-rouge\">border-top: 1px solid #ccc</code>.</p><p>The confusing part here is that Gutenberg defaults to the short line style, but currently doesn’t serve styles for it to the front end, only for the wide line and dots styles. So, if nothing is done, the short and wide lines look the same on the front end. I’ve added styles to Halle’s stylesheet to remedy this.</p><h2 id=\"enabling-wide-images\">Enabling wide images</h2><p>Wide images are the biggest reason to revisit the layout of your theme. In Halle, individual posts have a sidebar when the screen is wide enough to accommodate it. This is not conducive to wide images. This led me to question whether or not I could make the layout an option, so that the user could choose the sidebar layout, or a centered layout.</p><p>To enable wide images, all that is required is the following, added to <code class=\"highlighter-rouge\">after_setup_theme</code>.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">add_theme_support</span><span class=\"p\">(</span> <span class=\"s1\">'align-wide'</span> <span class=\"p\">);</span></code></pre></div></div><p>There are several approaches to take to support wide images on the front end. You could make the parent element of the post content 100% width, and then place a <code class=\"highlighter-rouge\">max-width</code> on everything except for wide images. Or, instead, you could break the wide images out of the container. This method is described in <a href=\"https://www.billerickson.net/getting-your-theme-ready-for-gutenberg/\">this article from Bill Erickson</a>. I prefer the former approach.</p><p>I haven’t implemented wide images in Halle yet, as this will involve much deeper changes to the foundational layout of the theme, and there’s already enough change happening. I’ll come back to this at a later time.</p><h2 id=\"color-palettes\">Color palettes</h2><p>If your theme contains a specific color palette, or you are working with brand colors, customizing the color palette available to users is a great way to encourage consistency. I won’t go into how to accomplish this specifically, but it’s worth noting that this is available. More information is detailed in the <a href=\"https://wordpress.org/gutenberg/handbook/extensibility/theme-support/#block-color-palettes\">Gutenberg Handbook</a>.</p>",
            "url": "http://localhost:4000/posts/preparing-wordpress-theme-gutenberg/",
            "date_published": "2018-08-12T00:00:00-05:00",
            "date_modified": "2018-08-12T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/using-pagination-wordpress-api-vue/",
            "title": "Using pagination with the WordPress API in Vue",
            "content_text": "This is a continuation of my previous Vue pagination post in which I added pagination to the list of books that I’m reading or have read. In that post, I fetched all of the books from a specific category using the WordPress REST API, and then stored them in state. This worked great, but wasn’t a great long-term solution. The problem lies in the fact that the API limits queries to 100 posts at a time by default. This means that as soon as I read more than a hundred books, the end of the list will get chopped off.To solve this issue, we need to do a separate API call for each page of books, fetching only 10 at a time. This means more API calls, but less data that needs to be held in state at any given time. There are just a few minor modifications to be made. In order to get the correct 10 books, we need to add a &amp;page= parameter to the API call. We pass in the page that we’d like to retrieve. In my case, I just needed to adjust the pageNumber attribute that I was using previously.pageNumber: 1,Where this variable was previously set to 0, it now starts out at 1. The WordPress REST API, logically, starts pagination out at page 1.The next modification is of the fetchData() method. Previously, we were only passing the current category along with the request. Now, both the category and the current page number are dynamic variables that we need to pass along. After prepping the variables to reference the current state, we open the API call with the following:xhr.open('GET', apiURL + category + page)Now that only the currently visible books are being held in state, pagination has far greater control over how actions are occurring. Hitting either of the pagination buttons should produce a new call to the API. In order to achieve this, we need to watch for changes to the pageNumber variable, and then fetch new books. This means that we need to make an addition to watch:watch: {    ...    pageNumber: 'fetchData'}Now, anytime the pageNumber variable changes, new books will be fetched using the fetchData method.A small hiccup that I encountered was that I needed to reset pageNumber to 1 whenever the category was changed. Doing so inside of fetchData would improperly set the page number, as it would be starting over each time. To solve this, a small modification to the status watcher was required.currentStatus: function () {    this.pageNumber = 1    this.fetchData()},Instead of fetching the data right away, adding a function allows for the page number to be reset any time that currentStatus changes. Afterwards, fetchData() can be properly called.The last piece of this update is with the template. Before, all of the books were contained within state, so getting a count of the total books was pretty easy. Now, we need to check the total number of books with each API call that we make. This data is passed along with the response, so checking it and storing the value in state only requires self.pageCount = xhr.getResponseHeader('X-WP-TotalPages'). Further documentation can be found in the WordPress REST API Handbook.All of these changes can be viewed in the larger context of the app by viewing the diff on GitHub.",
            "content_html": "<p>This is a continuation of my <a href=\"https://samhermes.com/posts/adding-pagination-in-vue/\">previous Vue pagination post</a> in which I added pagination to the list of books that I’m reading or have read. In that post, I fetched all of the books from a specific category using the WordPress REST API, and then stored them in state. This worked great, but wasn’t a great long-term solution. The problem lies in the fact that the <a href=\"https://developer.wordpress.org/rest-api/using-the-rest-api/pagination/\">API limits queries to 100</a> posts at a time by default. This means that as soon as I read more than a hundred books, the end of the list will get chopped off.</p><p>To solve this issue, we need to do a separate API call for each page of books, fetching only 10 at a time. This means more API calls, but less data that needs to be held in state at any given time. There are just a few minor modifications to be made. In order to get the correct 10 books, we need to add a <code class=\"highlighter-rouge\">&amp;page=</code> parameter to the API call. We pass in the page that we’d like to retrieve. In my case, I just needed to adjust the <code class=\"highlighter-rouge\">pageNumber</code> attribute that I was using previously.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">pageNumber</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span></code></pre></div></div><p>Where this variable was previously set to 0, it now starts out at 1. The WordPress REST API, logically, starts pagination out at page 1.</p><p>The next modification is of the <code class=\"highlighter-rouge\">fetchData()</code> method. Previously, we were only passing the current category along with the request. Now, both the category and the current page number are dynamic variables that we need to pass along. After prepping the variables to reference the current state, we open the API call with the following:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"nx\">apiURL</span> <span class=\"o\">+</span> <span class=\"nx\">category</span> <span class=\"o\">+</span> <span class=\"nx\">page</span><span class=\"p\">)</span></code></pre></div></div><p>Now that only the currently visible books are being held in state, pagination has far greater control over how actions are occurring. Hitting either of the pagination buttons should produce a new call to the API. In order to achieve this, we need to watch for changes to the <code class=\"highlighter-rouge\">pageNumber</code> variable, and then fetch new books. This means that we need to make an addition to <code class=\"highlighter-rouge\">watch</code>:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">watch</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"p\">...</span>    <span class=\"nx\">pageNumber</span><span class=\"p\">:</span> <span class=\"s1\">'fetchData'</span><span class=\"p\">}</span></code></pre></div></div><p>Now, anytime the <code class=\"highlighter-rouge\">pageNumber</code> variable changes, new books will be fetched using the <code class=\"highlighter-rouge\">fetchData</code> method.</p><p>A small hiccup that I encountered was that I needed to reset <code class=\"highlighter-rouge\">pageNumber</code> to 1 whenever the category was changed. Doing so inside of <code class=\"highlighter-rouge\">fetchData</code> would improperly set the page number, as it would be starting over each time. To solve this, a small modification to the status watcher was required.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">currentStatus</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pageNumber</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">fetchData</span><span class=\"p\">()</span><span class=\"p\">},</span></code></pre></div></div><p>Instead of fetching the data right away, adding a function allows for the page number to be reset any time that <code class=\"highlighter-rouge\">currentStatus</code> changes. Afterwards, <code class=\"highlighter-rouge\">fetchData()</code> can be properly called.</p><p>The last piece of this update is with the template. Before, all of the books were contained within state, so getting a count of the total books was pretty easy. Now, we need to check the total number of books with each API call that we make. This data is passed along with the response, so checking it and storing the value in state only requires <code class=\"highlighter-rouge\">self.pageCount = xhr.getResponseHeader('X-WP-TotalPages')</code>. Further documentation can be found in the <a href=\"https://developer.wordpress.org/rest-api/using-the-rest-api/pagination/\">WordPress REST API Handbook</a>.</p><p>All of these changes can be viewed in the larger context of the app by viewing <a href=\"https://github.com/samhermes/samhermes.github.io/commit/f3d0fd783e915a0df69c312b9ef8203f1042c663\">the diff on GitHub</a>.</p>",
            "url": "http://localhost:4000/posts/using-pagination-wordpress-api-vue/",
            "date_published": "2018-07-25T00:00:00-05:00",
            "date_modified": "2018-07-25T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/how-not-to-use-react-with-jekyll/",
            "title": "How not to use React with Jekyll",
            "content_text": "To lay the groundwork a little, this site uses Jekyll and is hosted on GitHub Pages. Whenever I make a new project that I want to include on the site, I just create a new page in markdown and build out from there. When I made my reading list app, I used Vue and included that without issue. React, on the other hand, has proven to be a little more complex. Which, typical. For this project, I wanted to display information about upcoming SpaceX launches.The ever-popular Create React App makes it really easy to get started with React. It can be installed globally with npm install -g create-react-app. Then, to start this project, I ran create-react-app next-spacex-launch in the root of my site. This created a new directory and placed a very simple app in it, and then started up a development server. So, with my Jekyll site running, I had the site at localhost:4000 and the React app running at localhost:3000. Neat, but I wanted React to be running at the subdirectory address. Instead, it was inside of a /build folder within that subdirectory. So, going to /next-space-launch was a 404.At this point, I realized that maybe Create React App isn’t quite the right approach for this project. After doing a little digging, I’ve found that Create React App isn’t really meant for customization. This is fine for most projects, but I needed a little more control. Fortunately, Create React App has the capability to “eject” itself. Essentially, in order to stay simple, it tucks quite a bit of functionality away out of sight. This keeps things tidy, but how am I supposed to experiment like that? There’s a great explanation of the ejection process in the beginning of this post on Medium.So, I ejected. gasp!Reasons I ejected:  I didn’t want the bundle to include a hash. This was making it difficult to include via Jekyll templates. I was able to work around this by renaming the file through package.json, but that unnecessarily slows the build down a little.  I kept getting a 404 on the bundle’s .map file, and there was no way to skip that in the build process without deleting the file each time.  I didn’t want to set up a service worker.  Most importantly, I wanted to experiment and learn more about the internal mechanisms. That’s reason enough, after all.After the ejection process is complete, quite a few files are made available in a config folder. In it, there is a webpack configuration file for both development and production. Through it, I was able to make all of the changes that I listed above.Coming at the project from this direction helped give me a jump start. I would have had a lot to figure out if I had started from scratch, and it would have taken much longer to get to a place where I could actually start on the project itself. By ejecting the app after getting my bearings, I was able to get comfortable enough before digging deeper. That being said, Create React App really wasn’t meant to be used within another project. Which, I probably should’ve known. Now I do.In the end, I was able to place index.md inside of the /next-spacex-launch directory, and then point to main.js inside of the build folder. I am including all of the styles as part of the Jekyll build process, so it’s just the script that is needed. I certainly have more to say about the app itself and how I’m displaying the data, but that’s for another day.",
            "content_html": "<p>To lay the groundwork a little, this site uses Jekyll and is hosted on GitHub Pages. Whenever I make a new project that I want to include on the site, I just create a new page in markdown and build out from there. When I made my reading list app, I used Vue and included that without issue. React, on the other hand, has proven to be a little more complex. Which, typical. For this project, I wanted to display information about upcoming SpaceX launches.</p><p>The ever-popular Create React App makes it really easy to get started with React. It can be installed globally with <code class=\"highlighter-rouge\">npm install -g create-react-app</code>. Then, to start this project, I ran <code class=\"highlighter-rouge\">create-react-app next-spacex-launch</code> in the root of my site. This created a new directory and placed a very simple app in it, and then started up a development server. So, with my Jekyll site running, I had the site at <code class=\"highlighter-rouge\">localhost:4000</code> and the React app running at <code class=\"highlighter-rouge\">localhost:3000</code>. Neat, but I wanted React to be running at the subdirectory address. Instead, it was inside of a <code class=\"highlighter-rouge\">/build</code> folder within that subdirectory. So, going to /next-space-launch was a 404.</p><p>At this point, I realized that maybe Create React App isn’t quite the right approach for this project. After doing a little digging, I’ve found that Create React App isn’t really meant for customization. This is fine for most projects, but I needed a little more control. Fortunately, Create React App has the capability to “eject” itself. Essentially, in order to stay simple, it tucks quite a bit of functionality away out of sight. This keeps things tidy, but how am I supposed to experiment like that? There’s a great explanation of the ejection process in the beginning of <a href=\"https://medium.com/@tuchk4/why-i-love-create-react-app-e63b1be689a3\">this post on Medium</a>.</p><p>So, I ejected. <em>gasp!</em></p><p>Reasons I ejected:</p><ul>  <li>I didn’t want the bundle to include a hash. This was making it difficult to include via Jekyll templates. I was able to work around this by renaming the file through <code class=\"highlighter-rouge\">package.json</code>, but that unnecessarily slows the build down a little.</li>  <li>I kept getting a 404 on the bundle’s .map file, and there was no way to skip that in the build process without deleting the file each time.</li>  <li>I didn’t want to set up a service worker.</li>  <li>Most importantly, I wanted to experiment and learn more about the internal mechanisms. That’s reason enough, after all.</li></ul><p>After the ejection process is complete, quite a few files are made available in a <code class=\"highlighter-rouge\">config</code> folder. In it, there is a webpack configuration file for both development and production. Through it, I was able to make all of the changes that I listed above.</p><p>Coming at the project from this direction helped give me a jump start. I would have had a lot to figure out if I had started from scratch, and it would have taken much longer to get to a place where I could actually start on the project itself. By ejecting the app after getting my bearings, I was able to get comfortable enough before digging deeper. That being said, Create React App really wasn’t meant to be used within another project. Which, I probably should’ve known. Now I do.</p><p>In the end, I was able to place <code class=\"highlighter-rouge\">index.md</code> inside of the /next-spacex-launch directory, and then point to <code class=\"highlighter-rouge\">main.js</code> inside of the build folder. I am including all of the styles as part of the Jekyll build process, so it’s just the script that is needed. I certainly have more to say about the app itself and how I’m displaying the data, but that’s for another day.</p>",
            "url": "http://localhost:4000/posts/how-not-to-use-react-with-jekyll/",
            "date_published": "2018-06-24T00:00:00-05:00",
            "date_modified": "2018-06-24T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/i-love-overscroll-behavior/",
            "title": "I love overscroll-behavior",
            "content_text": "Talk about something that you didn’t know you needed! A new CSS property has been proposed (about a year ago by now, actually) called overscroll-behavior that allows us to limit scrolling to a contained element, without scrolling the entire page as well. This is great for modals, small chat windows, and, in my very specific reason to be excited, mobile menus! There’s a great writeup about it on the Chrome developer site.Browser support is limited to Chrome (desktop and Android) and Firefox at the moment, according to Can I use. This means that about 60% of users have it, though, so we’re well on our way to wide support. It appears that IE 11 and Edge support a property called -ms-scroll-chaining, which works similarly. The only concerning holdout to me is mobile Safari. It would be great to see overscroll-behavior implemented there. It’s been reported to the bug tracker but I’m not sure about future plans.What is so great about overscroll-behavior is that it allows you to limit a users scroll to only the element that they’re currently interacting with. For a mobile menu, this is great. If the menu takes over the entire screen, as many of them do, you can ensure that the user never ends up accidentally scrolling the page behind the menu. If you’ve ever had this happen before, you know how annoying it is. This behavior is known as scroll chaining, and a much better description is available in the WICG spec for overscroll behavior.In Chrome on Android, by default, when you reach the top of the page, you can pull to refresh the entire page. In this instance, overscroll-behavior is especially helpful if you’ve implemented your own pull-to-refresh and do not want them to interfere with one another.",
            "content_html": "<p>Talk about something that you didn’t know you needed! A new CSS property has been proposed (about a year ago by now, actually) called <code class=\"highlighter-rouge\">overscroll-behavior</code> that allows us to limit scrolling to a contained element, without scrolling the entire page as well. This is great for modals, small chat windows, and, in my very specific reason to be excited, mobile menus! There’s a great writeup about it on the <a href=\"https://developers.google.com/web/updates/2017/11/overscroll-behavior\">Chrome developer site</a>.</p><p>Browser support is limited to Chrome (desktop and Android) and Firefox at the moment, according to <a href=\"https://caniuse.com/#feat=css-overscroll-behavior\">Can I use</a>. This means that about 60% of users have it, though, so we’re well on our way to wide support. It appears that IE 11 and Edge support a property called <code class=\"highlighter-rouge\">-ms-scroll-chaining</code>, which works similarly. The only concerning holdout to me is mobile Safari. It would be great to see <code class=\"highlighter-rouge\">overscroll-behavior</code> implemented there. It’s <a href=\"https://bugs.webkit.org/show_bug.cgi?id=176454\">been reported to the bug tracker</a> but I’m not sure about future plans.</p><p>What is so great about <code class=\"highlighter-rouge\">overscroll-behavior</code> is that it allows you to limit a users scroll to only the element that they’re currently interacting with. For a mobile menu, this is great. If the menu takes over the entire screen, as many of them do, you can ensure that the user never ends up accidentally scrolling the page behind the menu. If you’ve ever had this happen before, you know how annoying it is. This behavior is known as scroll chaining, and a much better description is available in the <a href=\"https://wicg.github.io/overscroll-behavior/#scroll-chaining\">WICG spec for overscroll behavior</a>.</p><p>In Chrome on Android, by default, when you reach the top of the page, you can pull to refresh the entire page. In this instance, <code class=\"highlighter-rouge\">overscroll-behavior</code> is especially helpful if you’ve implemented your own pull-to-refresh and do not want them to interfere with one another.</p>",
            "url": "http://localhost:4000/posts/i-love-overscroll-behavior/",
            "date_published": "2018-06-10T00:00:00-05:00",
            "date_modified": "2018-06-10T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/how-to-improve-accessibility-tabs/",
            "title": "How to improve the accessibility of tabs",
            "content_text": "For quite a few components on the web, there is an accessible way to implement them. For tabs, it’s a little more complicated. With a few attributes, however, we can get pretty close.The elements for tabs are very simple. Just an unordered list, links, and divs.&lt;ul&gt;\t&lt;li&gt;&lt;a id=\"tab-1\" href=\"#tab-1\"&gt;Tab 1&lt;/a&gt;&lt;/li&gt;\t&lt;li&gt;&lt;a id=\"tab-2\" href=\"#tab-2\"&gt;Tab 2&lt;/a&gt;&lt;/li&gt;\t&lt;li&gt;&lt;a id=\"tab-3\" href=\"#tab-3\"&gt;Tab 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=\"tab-1-panel\"&gt;&lt;/div&gt;&lt;div id=\"tab-2-panel\"&gt;&lt;/div&gt;&lt;div id=\"tab-3-panel\"&gt;&lt;/div&gt;With added JavaScript to toggle the visibility of the proper div at the proper time, this is all that’s needed to get tabs working for sighted users. Unfortunately, this is where many stop. However, vast improvements can be made with a few attributes, starting with roles.For the unordered list and links, there are tablist and tab roles. In addition, each list item gets a role of presentation to remove semantic meaning.&lt;ul role=\"tablist\"&gt;\t&lt;li role=\"presentation\"&gt;\t\t&lt;a id=\"tab-1\" href=\"tab-1\" role=\"tab\"&gt;Tab 1&lt;/a&gt;\t&lt;/li&gt;\t...For each div, there is the tabpanel role.&lt;div id=\"tab-1\" role=\"tabpanel\"&gt;&lt;/div&gt;With this, there is a tab for each tabpanel, which begins to create a link between two elements that are otherwise unrelated.Next, in a similar way, there are aria-* attributes that need to be added to tabs and tab panels. Going back to the tab list, there is an aria-controls attribute that points to the id of its corresponding tab panel.&lt;ul role=\"tablist\"&gt;\t&lt;li role=\"presentation\"&gt;\t\t&lt;a id=\"tab-1\" href=\"tab-1\" role=\"tab\" aria-controls=\"tab-1-panel\"&gt;Tab 1&lt;/a&gt;\t&lt;/li&gt;\t...As with tab and tabpanel, there is a corresponding attribute that goes with aria-controls. This is the aria-labelledby attribute, which needs to be added to each tab panel. The value of the attribute is the id of the corresponding tab.&lt;div id=\"tab-1\" role=\"tabpanel\" aria-labelledby=\"tab-1\"&gt;&lt;/div&gt;At this point, we established the proper identity of all the elements we wish to represent tabs. The last piece of this is to communicate the current state of the tabs. We need to communicate to the user which tab is currently selected, and accordingly, which tab panel is currently visible.On each tab, there is aria-selected that can either be true or false. Using JavaScript, the current tab can be set to true, and the rest remain false.&lt;ul role=\"tablist\"&gt;\t&lt;li role=\"presentation\"&gt;\t\t&lt;a id=\"tab-1\" href=\"tab-1\" role=\"tab\" aria-controls=\"tab-1-panel\" aria-selected=\"true\"&gt;Tab 1&lt;/a&gt;\t&lt;/li&gt;\t...Again, much like the roles and other ARIA attributes, there is a corresponding attribute for the tab panels. This one is slightly different, which is confusing at first. Each tab panel needs an aria-hidden attribute, which is set to true by default, and false on the currently active tab. It’s the reverse of the aria-selected attribute on the tabs, so this tripped me up.&lt;div id=\"tab-1\" role=\"tabpanel\" aria-labelledby=\"tab-1\" aria-hidden=\"false\"&gt;&lt;/div&gt;Using JavaScript, these attributes can be updated as the user navigates from tab to tab. The currently selected tab needs to have aria-selected set to true, and the corresponding tab panel needs to have aria-hidden set to false.For these tabs to remain accessible, JavaScript needs to be in working order. Fortunately, without JavaScript, the href attribute of each tab links directly to the proper tab. The tabs sort of become a table of contents that links down the page. For this reason, it’s good to test the tabs with JavaScript disabled to ensure that users navigating by keyboard still land in the proper place.",
            "content_html": "<p>For quite a few components on the web, there is an accessible way to implement them. For tabs, it’s a little more complicated. With a few attributes, however, we can get pretty close.</p><p>The elements for tabs are very simple. Just an unordered list, links, and <code class=\"highlighter-rouge\">divs</code>.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span>\t<span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">href=</span><span class=\"s\">\"#tab-1\"</span><span class=\"nt\">&gt;</span>Tab 1<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\t<span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-2\"</span> <span class=\"na\">href=</span><span class=\"s\">\"#tab-2\"</span><span class=\"nt\">&gt;</span>Tab 2<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\t<span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-3\"</span> <span class=\"na\">href=</span><span class=\"s\">\"#tab-3\"</span><span class=\"nt\">&gt;</span>Tab 3<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span><span class=\"nt\">&lt;/ul&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1-panel\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-2-panel\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-3-panel\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span></code></pre></div></div><p>With added JavaScript to toggle the visibility of the proper <code class=\"highlighter-rouge\">div</code> at the proper time, this is all that’s needed to get tabs working for sighted users. Unfortunately, this is where many stop. However, vast improvements can be made with a few attributes, starting with <code class=\"highlighter-rouge\">role</code>s.</p><p>For the unordered list and links, there are <code class=\"highlighter-rouge\">tablist</code> and <code class=\"highlighter-rouge\">tab</code> roles. In addition, each list item gets a role of <code class=\"highlighter-rouge\">presentation</code> to remove semantic meaning.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul</span> <span class=\"na\">role=</span><span class=\"s\">\"tablist\"</span><span class=\"nt\">&gt;</span>\t<span class=\"nt\">&lt;li</span> <span class=\"na\">role=</span><span class=\"s\">\"presentation\"</span><span class=\"nt\">&gt;</span>\t\t<span class=\"nt\">&lt;a</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">href=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">role=</span><span class=\"s\">\"tab\"</span><span class=\"nt\">&gt;</span>Tab 1<span class=\"nt\">&lt;/a&gt;</span>\t<span class=\"nt\">&lt;/li&gt;</span>\t...</code></pre></div></div><p>For each <code class=\"highlighter-rouge\">div</code>, there is the <code class=\"highlighter-rouge\">tabpanel</code> role.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">role=</span><span class=\"s\">\"tabpanel\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span></code></pre></div></div><p>With this, there is a <code class=\"highlighter-rouge\">tab</code> for each <code class=\"highlighter-rouge\">tabpanel</code>, which begins to create a link between two elements that are otherwise unrelated.</p><p>Next, in a similar way, there are <code class=\"highlighter-rouge\">aria-*</code> attributes that need to be added to tabs and tab panels. Going back to the tab list, there is an <code class=\"highlighter-rouge\">aria-controls</code> attribute that points to the <code class=\"highlighter-rouge\">id</code> of its corresponding tab panel.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul</span> <span class=\"na\">role=</span><span class=\"s\">\"tablist\"</span><span class=\"nt\">&gt;</span>\t<span class=\"nt\">&lt;li</span> <span class=\"na\">role=</span><span class=\"s\">\"presentation\"</span><span class=\"nt\">&gt;</span>\t\t<span class=\"nt\">&lt;a</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">href=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">role=</span><span class=\"s\">\"tab\"</span> <span class=\"na\">aria-controls=</span><span class=\"s\">\"tab-1-panel\"</span><span class=\"nt\">&gt;</span>Tab 1<span class=\"nt\">&lt;/a&gt;</span>\t<span class=\"nt\">&lt;/li&gt;</span>\t...</code></pre></div></div><p>As with <code class=\"highlighter-rouge\">tab</code> and <code class=\"highlighter-rouge\">tabpanel</code>, there is a corresponding attribute that goes with <code class=\"highlighter-rouge\">aria-controls</code>. This is the <code class=\"highlighter-rouge\">aria-labelledby</code> attribute, which needs to be added to each tab panel. The value of the attribute is the <code class=\"highlighter-rouge\">id</code> of the corresponding tab.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">role=</span><span class=\"s\">\"tabpanel\"</span> <span class=\"na\">aria-labelledby=</span><span class=\"s\">\"tab-1\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span></code></pre></div></div><p>At this point, we established the proper identity of all the elements we wish to represent tabs. The last piece of this is to communicate the current state of the tabs. We need to communicate to the user which tab is currently selected, and accordingly, which tab panel is currently visible.</p><p>On each tab, there is <code class=\"highlighter-rouge\">aria-selected</code> that can either be true or false. Using JavaScript, the current tab can be set to <code class=\"highlighter-rouge\">true</code>, and the rest remain <code class=\"highlighter-rouge\">false</code>.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul</span> <span class=\"na\">role=</span><span class=\"s\">\"tablist\"</span><span class=\"nt\">&gt;</span>\t<span class=\"nt\">&lt;li</span> <span class=\"na\">role=</span><span class=\"s\">\"presentation\"</span><span class=\"nt\">&gt;</span>\t\t<span class=\"nt\">&lt;a</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">href=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">role=</span><span class=\"s\">\"tab\"</span> <span class=\"na\">aria-controls=</span><span class=\"s\">\"tab-1-panel\"</span> <span class=\"na\">aria-selected=</span><span class=\"s\">\"true\"</span><span class=\"nt\">&gt;</span>Tab 1<span class=\"nt\">&lt;/a&gt;</span>\t<span class=\"nt\">&lt;/li&gt;</span>\t...</code></pre></div></div><p>Again, much like the <code class=\"highlighter-rouge\">roles</code> and other ARIA attributes, there is a corresponding attribute for the tab panels. This one is slightly different, which is confusing at first. Each tab panel needs an <code class=\"highlighter-rouge\">aria-hidden</code> attribute, which is set to <code class=\"highlighter-rouge\">true</code> by default, and <code class=\"highlighter-rouge\">false</code> on the currently active tab. It’s the reverse of the <code class=\"highlighter-rouge\">aria-selected</code> attribute on the tabs, so this tripped me up.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">role=</span><span class=\"s\">\"tabpanel\"</span> <span class=\"na\">aria-labelledby=</span><span class=\"s\">\"tab-1\"</span> <span class=\"na\">aria-hidden=</span><span class=\"s\">\"false\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span></code></pre></div></div><p>Using JavaScript, these attributes can be updated as the user navigates from tab to tab. The currently selected tab needs to have <code class=\"highlighter-rouge\">aria-selected</code> set to <code class=\"highlighter-rouge\">true</code>, and the corresponding tab panel needs to have <code class=\"highlighter-rouge\">aria-hidden</code> set to <code class=\"highlighter-rouge\">false</code>.</p><p>For these tabs to remain accessible, JavaScript needs to be in working order. Fortunately, without JavaScript, the <code class=\"highlighter-rouge\">href</code> attribute of each tab links directly to the proper tab. The tabs sort of become a table of contents that links down the page. For this reason, it’s good to test the tabs with JavaScript disabled to ensure that users navigating by keyboard still land in the proper place.</p>",
            "url": "http://localhost:4000/posts/how-to-improve-accessibility-tabs/",
            "date_published": "2018-06-04T00:00:00-05:00",
            "date_modified": "2018-06-04T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/closing-gap-above-sticky-elements/",
            "title": "Closing the gap above sticky elements",
            "content_text": "position: sticky is fantastic, and browser support is increasing. However, one little annoyance that keeps happening is that a small gap will appear above an element while it is fixed (as in, it’s stuck to the top of the viewport). At the moment, this is only happening in Chrome, which is convenient, because most everyone uses Chrome.This issue is most visible on elements that stick to the top of the viewport while a user scrolls down. If the element has a solid background color, the gap between the element and the top of the viewport allows the content behind the element to be seen scrolling by. This, of course, is only an issue when the element with position: sticky is currently fixed.Fortunately, there’s a fix! This gap comes from the browser calculating the height of preceding elements a little too precisely. For example, say you’ve got a site title with a navigation directly beneath it, and that navigation is sticky. The height of the site title can actually have an effect on the navigation while it’s sticky, as the browser calculates the height of the site title in precise, fractional pixel values. If we set an even pixel height on the site title container, the gap above the sticky navigation will go away.",
            "content_html": "<p><code class=\"highlighter-rouge\">position: sticky</code> is fantastic, and browser support is increasing. However, one little annoyance that keeps happening is that a small gap will appear above an element while it is fixed (as in, it’s stuck to the top of the viewport). At the moment, this is only happening in Chrome, which is convenient, because most everyone uses Chrome.</p><p>This issue is most visible on elements that stick to the top of the viewport while a user scrolls down. If the element has a solid background color, the gap between the element and the top of the viewport allows the content behind the element to be seen scrolling by. This, of course, is only an issue when the element with <code class=\"highlighter-rouge\">position: sticky</code> is currently fixed.</p><p>Fortunately, there’s a fix! This gap comes from the browser calculating the height of preceding elements a little too precisely. For example, say you’ve got a site title with a navigation directly beneath it, and that navigation is sticky. The height of the site title can actually have an effect on the navigation while it’s sticky, as the browser calculates the height of the site title in precise, fractional pixel values. If we set an even pixel height on the site title container, the gap above the sticky navigation will go away.</p>",
            "url": "http://localhost:4000/posts/closing-gap-above-sticky-elements/",
            "date_published": "2018-05-22T00:00:00-05:00",
            "date_modified": "2018-05-22T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/opening-links-new-window/",
            "title": "Opening links in a new window",
            "content_text": "Over the past year, I’ve seen a few people discussing the security dangers of using target=\"_blank\" to open links in a new window. The issue is that the page you open in a new window has access to the window object of the originating page. Seems fairly harmless, but this means the site in the new window could potentially redirect the originating page or perform some other malicious action without permission. Depending on where you’re linking off to, you may not know if the site is secure (especially if it’s loaded with ad trackers).The recommendation is to only open links in a new window if you absolutely have to, which is a good practice from a user experience perspective as well. However, if you do open in a new window, ensure that the anchor tag has the following rel attribute applied any time you use target=\"_blank\".&lt;a href=\"https://example.com\" target=\"_blank\" rel=\"noopener\"&gt;Example&lt;/a&gt;Further information about this issue can be found at Jake Archibald’s site, where he also goes into detail about the performance benefits (who’d have thought?) of noopener.",
            "content_html": "<p>Over the past year, I’ve seen a few people discussing the security dangers of using <code class=\"highlighter-rouge\">target=\"_blank\"</code> to open links in a new window. The issue is that the page you open in a new window has access to the <code class=\"highlighter-rouge\">window</code> object of the originating page. Seems fairly harmless, but this means the site in the new window could potentially redirect the originating page or perform some other malicious action without permission. Depending on where you’re linking off to, you may not know if the site is secure (especially if it’s loaded with ad trackers).</p><p>The recommendation is to only open links in a new window if you absolutely have to, which is a good practice from a user experience perspective as well. However, if you do open in a new window, ensure that the anchor tag has the following <code class=\"highlighter-rouge\">rel</code> attribute applied any time you use <code class=\"highlighter-rouge\">target=\"_blank\"</code>.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://example.com\"</span> <span class=\"na\">target=</span><span class=\"s\">\"_blank\"</span> <span class=\"na\">rel=</span><span class=\"s\">\"noopener\"</span><span class=\"nt\">&gt;</span>Example<span class=\"nt\">&lt;/a&gt;</span></code></pre></div></div><p>Further information about this issue can be found at <a href=\"https://jakearchibald.com/2016/performance-benefits-of-rel-noopener/\">Jake Archibald’s site</a>, where he also goes into detail about the performance benefits (who’d have thought?) of <code class=\"highlighter-rouge\">noopener</code>.</p>",
            "url": "http://localhost:4000/posts/opening-links-new-window/",
            "date_published": "2018-05-18T00:00:00-05:00",
            "date_modified": "2018-05-18T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/submitting-accessibility-ready-theme-wordpress/",
            "title": "Submitting an accessibility-ready theme to WordPress",
            "content_text": "This post goes with my talk at WordCamp St. Louis.About 2 years ago, I got the idea that I would create and submit my own theme to the official WordPress theme directory. I was curious about the process, and what I could learn from having a theme reviewed.I started the theme by forking the Underscores repository. I’ve started many projects with Underscores, and it remains a great foundation for getting off the ground quickly. I worked on the theme in my free time for about a year and a half. Finally, this past November, I got to a point where I thought that it was ready to be uploaded.In preparation, I ran through the list of requirements on the theme review team page. I ran the Theme Check plugin on my site and fixed the errors that it found. With both of those in good shape, I zipped up the theme and went to the theme upload page. I very quickly discovered that my preparation had missed one big issue. My theme name was already taken.I learned that WordPress looks at all active installations of a theme, so if there is a substantial installation base of a theme, it blocks you from uploading one by the same name. I had only searched for the theme in the WordPress theme directory. Having been rejected, I did a Google search for a WordPress theme by the name of “Harper” and found one available through ThemeForest.After this discovery, I wasn’t sure what to do, but eventually gave into finding a new name for the theme. This time, I search the WordPress directory, I did a Google search, and looked for anything that could possibly conflict. I settled on the name “Halle” and went through the theme to make the update, a slightly tedious process. After this, I attempted another upload to the theme directory, and it was accepted.Upon successful upload, a ticket is created for the theme. This is where the theme review takes place, essentially in a comment thread. After a theme reviewer is assigned (which took about a couple of months in my case), they will provide a list of the changes that need to be made to the theme. Here are some of the most relevant changes I had to make.Accessibility fixesColor contrastI was a little disappointed to find that I had not checked some of the text colors in my theme for proper contrast. With each post, the entry meta was using a color of #808080, which gives a color contrast of 3.95:1 on a white background. I adjusted these colors to #595959, which has a 7:1 ratio, passing both WCAG AA and AAA. This is easy to test using the WebAIM Contrast Checker.Screen reader textIn the header of the theme, there is a search icon that opens the search overlay. This icon has no text to accompany it, so it needs something for the screen reader to read out. When I submitted the theme, I was just using the alt text of the image. This worked, but wasn’t ideal. Instead, I needed to update the alt attribute to be blank, and then place a span with the text inside of it immediately following the img tag. The markup for the span looks like this:&lt;span class=\"screen-reader-text\"&gt;Search&lt;/span&gt;Keeping focus inside search modalWhen the search overlay is open, it covers the entire contents of the page. For a sighted user, we’re locking them into the context of the search field until they close the overlay. We need to duplicate that experience for a user navigating the page by keyboard. In order to do this, we need to make sure that only elements within the search overlay can receive focus while it is open.Using a little JavaScript, we gather up any focusable elements (input, button, links) and place them in an array. When a user gives focus to any of those elements, we watch for them to reach the last element in the overlay, and then return them to the first element. In the case of my theme, when a user reaches the close button, the next element is the search input field. This means that they are stuck in a loop until the search overlay is closed, which is just what we want.Cross-browser focus statesTypically, I will use the browser default for focus states, but this became an issue in Firefox. While Safari and Chrome will show a blue outline around buttons, Firefox shows nothing. From a little bit of testing, I discovered that this was caused by the background and border styles that I was applying to the button. Removing the styles would bring back the browser default focus styles. The fix for this was to manually apply a focus style, which both works in all browsers and looks the same.Focus state on image and text combined linkOn the homepage of the theme, there is a grouping of three stories that display in a vertical layout. In this case, because the title comes immediately after the image, I wrapped both of them in the same anchor tag. This is better for accessibility, because there is only one link. However, the focus state on those links collapses with the two elements. The fix for this was to apply display: inline-block to the link.Proper heading structure across posts and pagesFor the most part, the heading structure in the theme was sound. The only issue was the comment form that can be displayed below both post and page content. The heading “Leave a reply” uses an h3 in Underscores by default. For me, this worked great on posts, where there is a sidebar of the latest posts that uses an h2 for its heading. On pages, the sidebar does not display, which means that the comment form heading needed to be dynamic.When setting up the arguments for the comment form, we check to see if we’re currently on a page, and if so, modify the markup for the comment form title.$comment_args = array();if ( is_page() ) {  $comment_args = array(    'title_reply_before' =&gt; '&lt;h2 id=\"reply-title\" class=\"comment-reply-title\"&gt;',    'title_reply_after' =&gt; '&lt;/h2&gt;',  );}comment_form( $comment_args );Repetitive link textOn any page where there are a whole list of “Read more” links, it can be confusing for a screen reader user to know exactly which “more” is being linked to. Using screen reader text, we can append the title of the post to the end of the link, making each specific to the post that it is associated with. Inside of the link, following the “Read more” text, we add the following markup.&lt;span class=\"screen-reader-text\"&gt; &lt;?php get_the_title( get_the_ID() ); ?&gt;&lt;/span&gt;General fixesMaking text in JavaScript translatableIn my theme, there are only a few places where I’m modifying the text on the page with JavaScript. For comments, there is a toggle to show/hide them, which changes from saying “Show Comments” to “Hide Comments” when the user engages with it. In addition, the mobile menu changes from “Menu” to “Close” when it is toggled. The problem is that text in JavaScript can’t be translated, and so it needs to reside in PHP. wp_localize_script takes care of this nicely.wp_localize_script( 'halle-scripts', 'halleL10n', array(  'menu'  =&gt; esc_html__( 'Menu', 'halle' ),  'close' =&gt; esc_html__( 'Close', 'halle' ),  'comments_show' =&gt; esc_html__( 'Show Comments', 'halle' ),  'comments_hide' =&gt; esc_html__( 'Hide Comments', 'halle' ),) );Now, in JavaScript, we just reference halleL10n.menu to get the “Menu” text, or halleL10n.comments_hide to get “Hide Comments” and update the page.Only need to support WordPress 3 versions backI was initially check to see if the custom logo function existed before outputting my code, but the custom logo has been part of WordPress since 4.5. With the theme review standards, this means that I did not need to have that check in place. A simple has_custom_logo() conditional was all that was required.Screenshot image licensingI’m not going to get too deep into licensing, because I don’t understand it all. I was initially using images from Unsplash, and had to swap them out for images that were using the CC0 license. This essentially means that the images needed to be absolutely free with no restrictions at all. I found that there are many images available from Pixabay that have the CC0 license, so I was able to use those.There’s one last item that I want to mention, and that is a plugin I found out about pretty late in the theme review process. The theme review team has a Theme Sniffer plugin that they use, and it checks your theme for any errors based on the WordPress coding standards. I had only been using the Theme Checker plugin, as it is what is listed in the theme review documentation. I recommend using the sniffer plugin on any project you’re using, it’s gives you a great deal of feedback.",
            "content_html": "<p><em>This post goes with my talk at WordCamp St. Louis.</em></p><p>About 2 years ago, I got the idea that I would create and submit my own theme to the official WordPress theme directory. I was curious about the process, and what I could learn from having a theme reviewed.</p><p>I started the theme by forking the <a href=\"https://github.com/automattic/_s\">Underscores repository</a>. I’ve started many projects with Underscores, and it remains a great foundation for getting off the ground quickly. I worked on the theme in my free time for about a year and a half. Finally, this past November, I got to a point where I thought that it was ready to be uploaded.</p><p>In preparation, I ran through the <a href=\"https://make.wordpress.org/themes/handbook/review/required/\">list of requirements</a> on the theme review team page. I ran the <a href=\"https://wordpress.org/plugins/theme-check/\">Theme Check</a> plugin on my site and fixed the errors that it found. With both of those in good shape, I zipped up the theme and went to the <a href=\"https://wordpress.org/themes/upload/\">theme upload page</a>. I very quickly discovered that my preparation had missed one big issue. My theme name was already taken.</p><p>I learned that WordPress looks at all active installations of a theme, so if there is a substantial installation base of a theme, it blocks you from uploading one by the same name. I had only searched for the theme in the WordPress theme directory. Having been rejected, I did a Google search for a WordPress theme by the name of “Harper” and <a href=\"https://themeforest.net/item/harper-a-feminine-blog-theme-for-wordpress/15946880\">found one available through ThemeForest</a>.</p><p>After this discovery, I wasn’t sure what to do, but eventually gave into finding a new name for the theme. This time, I search the WordPress directory, I did a Google search, and looked for anything that could possibly conflict. I settled on the name “Halle” and went through the theme to make the update, a slightly tedious process. After this, I attempted another upload to the theme directory, and it was accepted.</p><p>Upon successful upload, <a href=\"https://themes.trac.wordpress.org/ticket/48322\">a ticket is created for the theme</a>. This is where the theme review takes place, essentially in a comment thread. After a theme reviewer is assigned (which took about a couple of months in my case), they will provide a list of the changes that need to be made to the theme. Here are some of the most relevant changes I had to make.</p><h2 id=\"accessibility-fixes\">Accessibility fixes</h2><h3 id=\"color-contrast\">Color contrast</h3><p>I was a little disappointed to find that I had not checked some of the text colors in my theme for proper contrast. With each post, the entry meta was using a color of #808080, which gives a color contrast of 3.95:1 on a white background. I adjusted these colors to #595959, which has a 7:1 ratio, passing both WCAG AA and AAA. This is easy to test using the <a href=\"https://webaim.org/resources/contrastchecker/\">WebAIM Contrast Checker</a>.</p><h3 id=\"screen-reader-text\">Screen reader text</h3><p>In the header of the theme, there is a search icon that opens the search overlay. This icon has no text to accompany it, so it needs something for the screen reader to read out. When I submitted the theme, I was just using the <code class=\"highlighter-rouge\">alt</code> text of the image. This worked, but wasn’t ideal. Instead, I needed to update the <code class=\"highlighter-rouge\">alt</code> attribute to be blank, and then place a <code class=\"highlighter-rouge\">span</code> with the text inside of it immediately following the <code class=\"highlighter-rouge\">img</code> tag. The markup for the span looks like this:</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"screen-reader-text\"</span><span class=\"nt\">&gt;</span>Search<span class=\"nt\">&lt;/span&gt;</span></code></pre></div></div><h3 id=\"keeping-focus-inside-search-modal\">Keeping focus inside search modal</h3><p>When the search overlay is open, it covers the entire contents of the page. For a sighted user, we’re locking them into the context of the search field until they close the overlay. We need to duplicate that experience for a user navigating the page by keyboard. In order to do this, we need to make sure that only elements within the search overlay can receive focus while it is open.</p><p>Using a little JavaScript, we gather up any focusable elements (<code class=\"highlighter-rouge\">input</code>, <code class=\"highlighter-rouge\">button</code>, links) and place them in an array. When a user gives focus to any of those elements, we watch for them to reach the last element in the overlay, and then return them to the first element. In the case of my theme, when a user reaches the close button, the next element is the search input field. This means that they are stuck in a loop until the search overlay is closed, which is just what we want.</p><h3 id=\"cross-browser-focus-states\">Cross-browser focus states</h3><p>Typically, I will use the browser default for focus states, but this became an issue in Firefox. While Safari and Chrome will show a blue outline around buttons, Firefox shows nothing. From a little bit of testing, I discovered that this was caused by the background and border styles that I was applying to the button. Removing the styles would bring back the browser default focus styles. The fix for this was to manually apply a focus style, which both works in all browsers and looks the same.</p><h3 id=\"focus-state-on-image-and-text-combined-link\">Focus state on image and text combined link</h3><p>On the homepage of the theme, there is a grouping of three stories that display in a vertical layout. In this case, because the title comes immediately after the image, I wrapped both of them in the same anchor tag. This is better for accessibility, because there is only one link. However, the focus state on those links collapses with the two elements. The fix for this was to apply <code class=\"highlighter-rouge\">display: inline-block</code> to the link.</p><h3 id=\"proper-heading-structure-across-posts-and-pages\">Proper heading structure across posts and pages</h3><p>For the most part, the heading structure in the theme was sound. The only issue was the comment form that can be displayed below both post and page content. The heading “Leave a reply” uses an <code class=\"highlighter-rouge\">h3</code> in Underscores by default. For me, this worked great on posts, where there is a sidebar of the latest posts that uses an <code class=\"highlighter-rouge\">h2</code> for its heading. On pages, the sidebar does not display, which means that the comment form heading needed to be dynamic.</p><p>When setting up the arguments for the comment form, we check to see if we’re currently on a page, and if so, modify the markup for the comment form title.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$comment_args</span> <span class=\"o\">=</span> <span class=\"k\">array</span><span class=\"p\">();</span><span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">is_page</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nv\">$comment_args</span> <span class=\"o\">=</span> <span class=\"k\">array</span><span class=\"p\">(</span>    <span class=\"s1\">'title_reply_before'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'&lt;h2 id=\"reply-title\" class=\"comment-reply-title\"&gt;'</span><span class=\"p\">,</span>    <span class=\"s1\">'title_reply_after'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'&lt;/h2&gt;'</span><span class=\"p\">,</span>  <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nx\">comment_form</span><span class=\"p\">(</span> <span class=\"nv\">$comment_args</span> <span class=\"p\">);</span></code></pre></div></div><h3 id=\"repetitive-link-text\">Repetitive link text</h3><p>On any page where there are a whole list of “Read more” links, it can be confusing for a screen reader user to know exactly which “more” is being linked to. Using screen reader text, we can append the title of the post to the end of the link, making each specific to the post that it is associated with. Inside of the link, following the “Read more” text, we add the following markup.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"screen-reader-text\"</span><span class=\"nt\">&gt;</span> <span class=\"cp\">&lt;?php</span> <span class=\"nx\">get_the_title</span><span class=\"p\">(</span> <span class=\"nx\">get_the_ID</span><span class=\"p\">()</span> <span class=\"p\">);</span> <span class=\"cp\">?&gt;</span><span class=\"nt\">&lt;/span&gt;</span></code></pre></div></div><h2 id=\"general-fixes\">General fixes</h2><h3 id=\"making-text-in-javascript-translatable\">Making text in JavaScript translatable</h3><p>In my theme, there are only a few places where I’m modifying the text on the page with JavaScript. For comments, there is a toggle to show/hide them, which changes from saying “Show Comments” to “Hide Comments” when the user engages with it. In addition, the mobile menu changes from “Menu” to “Close” when it is toggled. The problem is that text in JavaScript can’t be translated, and so it needs to reside in PHP. <code class=\"highlighter-rouge\">wp_localize_script</code> takes care of this nicely.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">wp_localize_script</span><span class=\"p\">(</span> <span class=\"s1\">'halle-scripts'</span><span class=\"p\">,</span> <span class=\"s1\">'halleL10n'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span>  <span class=\"s1\">'menu'</span>  <span class=\"o\">=&gt;</span> <span class=\"nx\">esc_html__</span><span class=\"p\">(</span> <span class=\"s1\">'Menu'</span><span class=\"p\">,</span> <span class=\"s1\">'halle'</span> <span class=\"p\">),</span>  <span class=\"s1\">'close'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">esc_html__</span><span class=\"p\">(</span> <span class=\"s1\">'Close'</span><span class=\"p\">,</span> <span class=\"s1\">'halle'</span> <span class=\"p\">),</span>  <span class=\"s1\">'comments_show'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">esc_html__</span><span class=\"p\">(</span> <span class=\"s1\">'Show Comments'</span><span class=\"p\">,</span> <span class=\"s1\">'halle'</span> <span class=\"p\">),</span>  <span class=\"s1\">'comments_hide'</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">esc_html__</span><span class=\"p\">(</span> <span class=\"s1\">'Hide Comments'</span><span class=\"p\">,</span> <span class=\"s1\">'halle'</span> <span class=\"p\">),</span><span class=\"p\">)</span> <span class=\"p\">);</span></code></pre></div></div><p>Now, in JavaScript, we just reference <code class=\"highlighter-rouge\">halleL10n.menu</code> to get the “Menu” text, or <code class=\"highlighter-rouge\">halleL10n.comments_hide</code> to get “Hide Comments” and update the page.</p><h3 id=\"only-need-to-support-wordpress-3-versions-back\">Only need to support WordPress 3 versions back</h3><p>I was initially check to see if the custom logo function existed before outputting my code, but the custom logo has been part of WordPress since 4.5. With the theme review standards, this means that I did not need to have that check in place. A simple <code class=\"highlighter-rouge\">has_custom_logo()</code> conditional was all that was required.</p><h3 id=\"screenshot-image-licensing\">Screenshot image licensing</h3><p>I’m not going to get too deep into licensing, because I don’t understand it all. I was initially using images from Unsplash, and had to swap them out for images that were using the <a href=\"https://creativecommons.org/share-your-work/public-domain/cc0/\">CC0 license</a>. This essentially means that the images needed to be absolutely free with no restrictions at all. I found that there are many images available from <a href=\"https://pixabay.com/\">Pixabay</a> that have the CC0 license, so I was able to use those.</p><hr /><p>There’s one last item that I want to mention, and that is a plugin I found out about pretty late in the theme review process. The theme review team has a <a href=\"https://github.com/WPTRT/theme-sniffer\">Theme Sniffer plugin</a> that they use, and it checks your theme for any errors based on the WordPress coding standards. I had only been using the Theme Checker plugin, as it is what is listed in the theme review documentation. I recommend using the sniffer plugin on any project you’re using, it’s gives you a great deal of feedback.</p>",
            "url": "http://localhost:4000/posts/submitting-accessibility-ready-theme-wordpress/",
            "date_published": "2018-05-11T00:00:00-05:00",
            "date_modified": "2018-05-11T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/adding-pagination-in-vue/",
            "title": "Adding pagination in Vue",
            "content_text": "So, I’ve been reading too much. The reading list that I’ve been maintaining has grown to an unwieldy length (I’m kind of making up problems to solve at this point…). To remedy this, we need pagination!Much like when I was adding a loading state, searching Google for help in this project just brought back a lot of packages that I could add to Vue. Not so fetch. A little further down in the results, I found an article by Denny Headrick that laid out a simple implementation. Like the loading state, I didn’t want to load in any superfluous code for something as (supposedly) simple as pagination, plus I wanted to be able to understand a little bit about what was going on.The first update was to add a few more items to the data array. One for the current page number (starting at 0), and another for how many books to display per page. We’ll use these in just a bit.data: {  ...  pageNumber: 0,  size: 5}Next, inside methods, we need to add two new functions that will take care of updating the pageNumber value. Since Vue is state based, we just need to update the value of pageNumber and that will cause the app to update as appropriate. Like, it feels like something is missing, but it just works.methods: {  ...  nextPage: function() {    this.pageNumber++;  },  prevPage: function() {    this.pageNumber--;  }}Now we need to add a few functions inside of a new section of the app, computed properties. The first of these functions will give us a count of how many pages in total there are. The second will return a subset of the list of books, depending on which page the user is currently viewing.computed: {  pageCount() {    let l = this.books.length,        s = this.size;    return Math.floor(l/s);  },  paginatedData() {    const start = this.pageNumber * this.size,          end = start + this.size;    return this.books.slice(start, end);  }}I took both of these functions almost verbatim from the article I mentioned above, and then adapted the variable references to work with my app. Thanks Denny!One minor change that we need to make to the template before moving on is how we’re looping through the book list. Right now, the current book list is stored in books, but we want to get it from paginatedData going forward. It’s as simple as updating the for loop.&lt;template v-for=\"book in paginatedData\"&gt;The final bit is to add the previous and next page button to the template. This is where we can build in the logic to handle what happens when a user presses one of the buttons.&lt;nav v-if=\"pageCount &gt;= 1\" class=\"book-list-nav\"&gt;\t&lt;button type=\"button\" :disabled=\"pageNumber === 0\" v-on:click=\"prevPage\"&gt;Previous&lt;/button&gt;\t&lt;button type=\"button\" :disabled=\"pageNumber &gt;= pageCount\" v-on:click=\"nextPage\"&gt;Next&lt;/button&gt;&lt;/nav&gt;There’s a lot going on here, so let’s break it down a little. On the nav containing element, we have a conditional statement. This will show/hide the buttons based on how many pages exist. On the reading list, the currently reading list is usually pretty short, so we don’t usually need pagination there.For each button, we want to disable them as appropriate if we are on the first or last page. This is where the :disabled attribute comes in. For the previous button, we check to see if we’re on the first page (page 0), and on the next button, we check for the last page.Next up, we hook up the functions that we added to methods earlier. To attach a click handler, we use v-on:click, and then insert the name of the function we want to use as the value.And that’s it! So simple! So easy! Just kidding, this is pretty complicated. JavaScript is tricky. Once I figured this out, though, it feels pretty nice. The logic to show/hide the navigation as appropriate is pretty simple to follow, and all we had to do was add an attribute to the nav element.To take this a little further, I’d like to add a way to communicate the current page. Ideally, there would be “1 of 4” between the previous and next buttons. Also, I’ve limited the list to 5 books, so that usually fits within the current viewport. If I were to extend that to 10 books, we’d really want to scroll the user back up to the top of the list any time they used the pagination. Always more to do!",
            "content_html": "<p>So, I’ve been reading too much. The reading list that I’ve been maintaining has grown to an unwieldy length (I’m kind of making up problems to solve at this point…). To remedy this, we need pagination!</p><p>Much like when I was adding a loading state, searching Google for help in this project just brought back a lot of packages that I could add to Vue. Not so fetch. A little further down in the results, I found an <a href=\"https://medium.com/@denny.headrick/pagination-in-vue-js-4bfce47e573b\">article by Denny Headrick</a> that laid out a simple implementation. Like the loading state, I didn’t want to load in any superfluous code for something as (supposedly) simple as pagination, plus I wanted to be able to understand a little bit about what was going on.</p><p>The first update was to add a few more items to the <code class=\"highlighter-rouge\">data</code> array. One for the current page number (starting at 0), and another for how many books to display per page. We’ll use these in just a bit.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"p\">...</span>  <span class=\"nx\">pageNumber</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span></code></pre></div></div><p>Next, inside <code class=\"highlighter-rouge\">methods</code>, we need to add two new functions that will take care of updating the <code class=\"highlighter-rouge\">pageNumber</code> value. Since Vue is state based, we just need to update the value of <code class=\"highlighter-rouge\">pageNumber</code> and that will cause the app to update as appropriate. Like, it feels like something is missing, but it just works.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"p\">...</span>  <span class=\"nx\">nextPage</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pageNumber</span><span class=\"o\">++</span><span class=\"p\">;</span>  <span class=\"p\">},</span>  <span class=\"nx\">prevPage</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pageNumber</span><span class=\"o\">--</span><span class=\"p\">;</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Now we need to add a few functions inside of a new section of the app, computed properties. The first of these functions will give us a count of how many pages in total there are. The second will return a subset of the list of books, depending on which page the user is currently viewing.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">computed</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"nx\">pageCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">let</span> <span class=\"nx\">l</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">books</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span>        <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">size</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">(</span><span class=\"nx\">l</span><span class=\"o\">/</span><span class=\"nx\">s</span><span class=\"p\">);</span>  <span class=\"p\">},</span>  <span class=\"nx\">paginatedData</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pageNumber</span> <span class=\"o\">*</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">size</span><span class=\"p\">,</span>          <span class=\"nx\">end</span> <span class=\"o\">=</span> <span class=\"nx\">start</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">size</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">books</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"nx\">start</span><span class=\"p\">,</span> <span class=\"nx\">end</span><span class=\"p\">);</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>I took both of these functions almost verbatim from the article I mentioned above, and then adapted the variable references to work with my app. Thanks Denny!</p><p>One minor change that we need to make to the template before moving on is how we’re looping through the book list. Right now, the current book list is stored in <code class=\"highlighter-rouge\">books</code>, but we want to get it from <code class=\"highlighter-rouge\">paginatedData</code> going forward. It’s as simple as updating the for loop.</p><pre><code class=\"language-markup\">&lt;template v-for=\"book in paginatedData\"&gt;</code></pre><p>The final bit is to add the previous and next page button to the template. This is where we can build in the logic to handle what happens when a user presses one of the buttons.</p><pre><code class=\"language-markup\">&lt;nav v-if=\"pageCount &gt;= 1\" class=\"book-list-nav\"&gt;\t&lt;button type=\"button\" :disabled=\"pageNumber === 0\" v-on:click=\"prevPage\"&gt;Previous&lt;/button&gt;\t&lt;button type=\"button\" :disabled=\"pageNumber &gt;= pageCount\" v-on:click=\"nextPage\"&gt;Next&lt;/button&gt;&lt;/nav&gt;</code></pre><p>There’s a lot going on here, so let’s break it down a little. On the <code class=\"highlighter-rouge\">nav</code> containing element, we have a conditional statement. This will show/hide the buttons based on how many pages exist. On the reading list, the currently reading list is usually pretty short, so we don’t usually need pagination there.</p><p>For each button, we want to disable them as appropriate if we are on the first or last page. This is where the <code class=\"highlighter-rouge\">:disabled</code> attribute comes in. For the previous button, we check to see if we’re on the first page (page 0), and on the next button, we check for the last page.</p><p>Next up, we hook up the functions that we added to <code class=\"highlighter-rouge\">methods</code> earlier. To attach a click handler, we use <code class=\"highlighter-rouge\">v-on:click</code>, and then insert the name of the function we want to use as the value.</p><p>And that’s it! So simple! So easy! Just kidding, this is pretty complicated. JavaScript is tricky. Once I figured this out, though, it feels pretty nice. The logic to show/hide the navigation as appropriate is pretty simple to follow, and all we had to do was add an attribute to the <code class=\"highlighter-rouge\">nav</code> element.</p><p>To take this a little further, I’d like to add a way to communicate the current page. Ideally, there would be “1 of 4” between the previous and next buttons. Also, I’ve limited the list to 5 books, so that usually fits within the current viewport. If I were to extend that to 10 books, we’d really want to scroll the user back up to the top of the list any time they used the pagination. Always more to do!</p>",
            "url": "http://localhost:4000/posts/adding-pagination-in-vue/",
            "date_published": "2018-04-19T00:00:00-05:00",
            "date_modified": "2018-04-19T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/lazy-loading-images/",
            "title": "Lazy loading images",
            "content_text": "A hop and a skip ago, I added a photo page to my website, and started posting a few of my favorite photos. Although it’s super fun to have them there, that wasn’t the primary reason I set up the page. I wanted to look into the smartest way to lazy load images. A page with a bunch of photos on it seemed like the perfect, if only, place to start.First of all, since we needn’t write this ourselves, we’ll look for a script to handle the lazy loading. There are so many options out there. For many people, having a non-javascript fallback isn’t too much of a concern. But, I am not most people. This led me to lazyload.js, which just so happens to be the first result on Google for “lazy load script”. Maybe I am most people.So, we include lazyload.js in the footer of the page, and then we call lazyload();. I’ve modified my copy of the lazyload.js script to include this in the bottom of the file, so that it gets called right after it loads, but it could also be called in the footer of the page like so:&lt;script src=\"lazyload.js\"&gt;&lt;/script&gt;&lt;script&gt;lazyload();&lt;/script&gt;Now we need to adjust the image markup we’re using. We apply a class of lazyload to each &lt;img&gt;, and move the URL of the image file from the src attribute to a new attribute called data-src. It will now look something like this:&lt;img class=\"lazyload\" data-src=\"banana-tree.jpg\" alt=\"A banana tree.\"&gt;By moving the image source from the src attribute to a data- attribute, we prevent the browser from downloading the image file, and then the lazy load script will move the image URL from the data- attribute to the src attribute, triggering a download.We really only want to set this up for images that are, pardon my language, but, below the fold. Images that are seen by the user as the page loads should not use a lazy loading technique, as the browser default works just fine! For my photo page, I started applying the lazy loading technique on the third image.Now that we’ve got images lazy loading, what do we do when JavaScript isn’t working or enabled? Right now, none of the lazy load images will load, and we’ll just have some confused users. This is assuming that anyone looks at my photo page, but still. We just need to add an additional image tag, and wrap it in a &lt;noscript&gt; tag. Like so:&lt;noscript&gt;  &lt;img src=\"walnut-tree.jpg\" alt=\"A walnut tree.\"&gt;&lt;/noscript&gt;What we’ve got now is a fairly bare-bones lazy loading setup, but it works quite well. If I were to add a hundred photos to the page, only the first two would load by default, and the user would only download the photos that they scrolled down to. This is a fantastic relief for anyone who is on a data plan, especially if they land on the page without knowing what they are about to do. Small improvements like lazy loading can have a huge impact.",
            "content_html": "<p>A hop and a skip ago, I added a photo page to my website, and started posting a few of my favorite photos. Although it’s super fun to have them there, that wasn’t the primary reason I set up the page. I wanted to look into the smartest way to lazy load images. A page with a bunch of photos on it seemed like the perfect, if only, place to start.</p><p>First of all, since we needn’t write this ourselves, we’ll look for a script to handle the lazy loading. There are so many options out there. For many people, having a non-javascript fallback isn’t too much of a concern. But, I am not most people. This led me to lazyload.js, which just so happens to be the first result on Google for “lazy load script”. Maybe I am most people.</p><p>So, we include lazyload.js in the footer of the page, and then we call <code class=\"highlighter-rouge\">lazyload();</code>. I’ve modified my copy of the lazyload.js script to include this in the bottom of the file, so that it gets called right after it loads, but it could also be called in the footer of the page like so:</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"lazyload.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span><span class=\"nt\">&lt;script&gt;</span><span class=\"nx\">lazyload</span><span class=\"p\">();</span><span class=\"nt\">&lt;/script&gt;</span></code></pre></div></div><p>Now we need to adjust the image markup we’re using. We apply a class of <code class=\"highlighter-rouge\">lazyload</code> to each <code class=\"highlighter-rouge\">&lt;img&gt;</code>, and move the URL of the image file from the <code class=\"highlighter-rouge\">src</code> attribute to a new attribute called <code class=\"highlighter-rouge\">data-src</code>. It will now look something like this:</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">class=</span><span class=\"s\">\"lazyload\"</span> <span class=\"na\">data-src=</span><span class=\"s\">\"banana-tree.jpg\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"A banana tree.\"</span><span class=\"nt\">&gt;</span></code></pre></div></div><p>By moving the image source from the <code class=\"highlighter-rouge\">src</code> attribute to a <code class=\"highlighter-rouge\">data-</code> attribute, we prevent the browser from downloading the image file, and then the lazy load script will move the image URL from the <code class=\"highlighter-rouge\">data-</code> attribute to the <code class=\"highlighter-rouge\">src</code> attribute, triggering a download.</p><p>We really only want to set this up for images that are, pardon my language, but, below the fold. Images that are seen by the user as the page loads should not use a lazy loading technique, as the browser default works just fine! For my photo page, I started applying the lazy loading technique on the third image.</p><p>Now that we’ve got images lazy loading, what do we do when JavaScript isn’t working or enabled? Right now, none of the lazy load images will load, and we’ll just have some confused users. This is assuming that anyone looks at my photo page, but still. We just need to add an additional image tag, and wrap it in a <code class=\"highlighter-rouge\">&lt;noscript&gt;</code> tag. Like so:</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;noscript&gt;</span>  <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"walnut-tree.jpg\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"A walnut tree.\"</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;/noscript&gt;</span></code></pre></div></div><p>What we’ve got now is a fairly bare-bones lazy loading setup, but it works quite well. If I were to add a hundred photos to the page, only the first two would load by default, and the user would only download the photos that they scrolled down to. This is a fantastic relief for anyone who is on a data plan, especially if they land on the page without knowing what they are about to do. Small improvements like lazy loading can have a huge impact.</p>",
            "url": "http://localhost:4000/posts/lazy-loading-images/",
            "date_published": "2018-03-21T00:00:00-05:00",
            "date_modified": "2018-03-21T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/adding-loading-state-reading-list/",
            "title": "Adding a loading state to Reading List",
            "content_text": "This is a continuation of my previous post about a Vue app I created for the reading list on this site.After I got the books displaying, the first thing I felt was missing was a loading state. It takes a second (or more, depending on connection speed) for the books to load in, and in the meantime, there’s just a white screen. Even on this super simple app, that’s not a great experience.Naturally, I went looking for information. I found quite a few collections of loading spinners, which seems like overkill. I mean, I made a list of books into a Vue app, so everything is overkill, but it just seems crazy to add this whole collection of spinners just to use one of them. Plus, I wanted to make my own spinner, that’s the fun part.What we need is for Vue to communicate out when it’s fetching data, and when it’s not. Once we have that information, we can toggle the display of the loading spinner. So, let’s do a little state management. We start by setting the default loading state to false in the initial data set.data: {  statuses: [    { id: 1, title: 'Currently' },    { id: 2, title: 'Completed' }  ],  currentStatus: '1',  books: null,  loading: false},Vue doesn’t fetch data right away, even though it can seem that way, so we don’t want the loading state to be true until Vue has actually reached out to request data. We set the initial state to false, and later update that value as soon as a request has been started.methods: {  fetchData: function() {    this.loading = true...Now that fetchData has started, the loading value is set to true. Now, the last piece to complete this is to set the loading value back to false once we get some data back from our request. This comes inside the onload function. Continuing on from above:xhr.onload = function() {  this.loading = false  self.books = JSON.parse(xhr.responseText)}.bind(this)One bit to note about the code above is that we need to add .bind(this) to the end of the onload function. Pardon me if I don’t get this exactly right, but doing this allows us to access and update the value of loading outside the current function. Otherwise, this.loading is undefined, and we would never be able to communicate that loading has finished.The full reading-list.js is available on GitHub for a full picture of this implementation.Now, we have a little work to do in our template and styles. We need to add the loading animation to our template and control its display using the loading variable. Here, I have added a div with a class of loading, and used v-show to toggle an inline style attribute. loading, when used inside of v-show is a reference to the variable we’ve been working with.&lt;div class=\"loading\" v-show=\"loading\"&gt;  {% include loading.svg %}&lt;/div&gt;I won’t get into the SVG I used except to say that I’ve added it to my _includes folder. My site is in Jekyll, so that’s where it is looking for when include is used.I also won’t get into the styles I used for the loading spinner, because that will depend on specific cases. Essentially, I’ve absolutely positioned mine so that it will display centered over the content area where the book list will show. One bit that I will touch on is the animation of the spinner. We can use a pretty simple CSS animation to keep the spinner spinning indefinitely. We first set up the keyframe animation, and here I’ve given it the very accurate name of rotate.@keyframes rotate {  from {    transform: rotate(0deg);  }  to {    transform: rotate(360deg);  }}Next, on the styles for SVG itself, we can add on animation: rotate 1.8s linear infinite;, and we’re all set. Now, it will smoothly rotate.With a loading state, the user will always know what is happening with our application. On the reading list, when someone toggles between books I am currently reading and books I’ve completed, they know exactly when data has been requested, and when it has arrived. Or, hasn’t arrived. It’s a small UX improvement that goes a long way.",
            "content_html": "<p>This is a continuation of my <a href=\"https://samhermes.com/posts/small-vue-app-reading-list/\">previous post about a Vue app</a> I created for the reading list on this site.</p><p>After I got the books displaying, the first thing I felt was missing was a loading state. It takes a second (or more, depending on connection speed) for the books to load in, and in the meantime, there’s just a white screen. Even on this super simple app, that’s not a great experience.</p><p>Naturally, I went looking for information. I found quite a few collections of loading spinners, which seems like overkill. I mean, I made a list of books into a Vue app, so everything is overkill, but it just seems crazy to add this whole collection of spinners just to use one of them. Plus, I wanted to make my own spinner, that’s the fun part.</p><p>What we need is for Vue to communicate out when it’s fetching data, and when it’s not. Once we have that information, we can toggle the display of the loading spinner. So, let’s do a little state management. We start by setting the default loading state to <code class=\"highlighter-rouge\">false</code> in the initial data set.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"nl\">statuses</span><span class=\"p\">:</span> <span class=\"p\">[</span>    <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Currently'</span> <span class=\"p\">},</span>    <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Completed'</span> <span class=\"p\">}</span>  <span class=\"p\">],</span>  <span class=\"nx\">currentStatus</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>  <span class=\"nx\">books</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>  <span class=\"nx\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span></code></pre></div></div><p>Vue doesn’t fetch data right away, even though it can seem that way, so we don’t want the loading state to be true until Vue has actually reached out to request data. We set the initial state to <code class=\"highlighter-rouge\">false</code>, and later update that value as soon as a request has been started.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"nl\">fetchData</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">...</span></code></pre></div></div><p>Now that <code class=\"highlighter-rouge\">fetchData</code> has started, the loading value is set to <code class=\"highlighter-rouge\">true</code>. Now, the last piece to complete this is to set the loading value back to <code class=\"highlighter-rouge\">false</code> once we get some data back from our request. This comes inside the <code class=\"highlighter-rouge\">onload</code> function. Continuing on from above:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>  <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nx\">books</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseText</span><span class=\"p\">)</span><span class=\"p\">}.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span></code></pre></div></div><p>One bit to note about the code above is that we need to add <code class=\"highlighter-rouge\">.bind(this)</code> to the end of the <code class=\"highlighter-rouge\">onload</code> function. Pardon me if I don’t get this exactly right, but doing this allows us to access and update the value of <code class=\"highlighter-rouge\">loading</code> outside the current function. Otherwise, <code class=\"highlighter-rouge\">this.loading</code> is undefined, and we would never be able to communicate that loading has finished.</p><p>The full <code class=\"highlighter-rouge\">reading-list.js</code> is <a href=\"https://github.com/samhermes/samhermes.github.io/blob/master/js/reading-list.js\">available on GitHub</a> for a full picture of this implementation.</p><p>Now, we have a little work to do in our template and styles. We need to add the loading animation to our template and control its display using the <code class=\"highlighter-rouge\">loading</code> variable. Here, I have added a <code class=\"highlighter-rouge\">div</code> with a class of <code class=\"highlighter-rouge\">loading</code>, and used <code class=\"highlighter-rouge\">v-show</code> to toggle an inline style attribute. <code class=\"highlighter-rouge\">loading</code>, when used inside of <code class=\"highlighter-rouge\">v-show</code> is a reference to the variable we’ve been working with.</p><pre><code class=\"language-markup\">&lt;div class=\"loading\" v-show=\"loading\"&gt;  {% include loading.svg %}&lt;/div&gt;</code></pre><p>I won’t get into the SVG I used except to say that I’ve added it to my <code class=\"highlighter-rouge\">_includes</code> folder. My site is in Jekyll, so that’s where it is looking for when <code class=\"highlighter-rouge\">include</code> is used.</p><p>I also won’t get into the styles I used for the loading spinner, because that will depend on specific cases. Essentially, I’ve absolutely positioned mine so that it will display centered over the content area where the book list will show. One bit that I will touch on is the animation of the spinner. We can use a pretty simple CSS animation to keep the spinner spinning indefinitely. We first set up the keyframe animation, and here I’ve given it the very accurate name of <code class=\"highlighter-rouge\">rotate</code>.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">@keyframes</span> <span class=\"n\">rotate</span> <span class=\"p\">{</span>  <span class=\"nt\">from</span> <span class=\"p\">{</span>    <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"m\">0deg</span><span class=\"p\">);</span>  <span class=\"p\">}</span>  <span class=\"nt\">to</span> <span class=\"p\">{</span>    <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"m\">360deg</span><span class=\"p\">);</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Next, on the styles for SVG itself, we can add on <code class=\"highlighter-rouge\">animation: rotate 1.8s linear infinite;</code>, and we’re all set. Now, it will smoothly rotate.</p><p>With a loading state, the user will always know what is happening with our application. On the reading list, when someone toggles between books I am currently reading and books I’ve completed, they know exactly when data has been requested, and when it has arrived. Or, hasn’t arrived. It’s a small UX improvement that goes a long way.</p>",
            "url": "http://localhost:4000/posts/adding-loading-state-reading-list/",
            "date_published": "2018-02-27T00:00:00-06:00",
            "date_modified": "2018-02-27T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/small-vue-app-reading-list/",
            "title": "A small Vue app - Reading List",
            "content_text": "Getting into new JavaScript is difficult when you don’t have something useful to build with it, so I was excited when I put it together that I could add Vue to my existing reading list. I’ve had it as static content for a little while now. Making updates is manual, and ends up with lots of repeated code. So, my idea was to move the listings to a WordPress install, and then bring them into the page and display them using Vue. Here’s how I did that.Starting somewhereIt’s always good to have somewhere to start, and I got over the initial hump by looking over Brian Krogsgard’s example Vue project on CodePen. He’s pulling in posts from Post Status and displaying them on the page. Fairly simple, but it also includes a toggle to switch between authors. This translated well to the distinction on my reading list between books I’ve completed and ones I’m currently reading. I was pretty excited to see that the amount of code to get going was minimal.Prepping WordPressI have a WordPress environment that runs on samhermes.co, and so I fired up a new site there. It is just using a default theme, since all I need to use is a REST API endpoint. I wonder what you’d do if all you wanted was the endpoints from your site? Could you remove everything else from public view? These are questions for another day. After I had loaded in the books, I added them to two categories, one for current and one for completed. Then, I wanted to add the author of each book, so I activated ACF and created a field called “Author” and loaded in the data.Before the REST API endpoint is totally ready to go, the custom field needs to be added. By default, anything you add with ACF isn’t going to show up in the response. The following function will add all fields to the response.function acf_rest_api() {  register_rest_field( 'post',    'fields',    array(      'get_callback' =&gt; function( $data, $field, $request, $type ) {        if ( function_exists( 'get_fields' ) ) {          return get_fields( $data['id'] );        }        return [];      },      'update_callback' =&gt; null,      'schema' =&gt; null,    )  );}add_action( 'rest_api_init', 'acf_rest_api' );I was surprised to find that I didn’t have to add each field individually. I found a method that this could be done, but in my case it was easiest to just have all fields added, which will be especially helpful if I choose to add additional information in the future.Setting up VueAfter adding the minified version of Vue to the page, the next step is to create a Vue instance. The entirety of this piece is as follows:var apiURL = 'https://samhermes.co/reading-list/wp-json/wp/v2/posts?categories='var books = new Vue({  el: '#app',  data: {    statuses: [      { id: 1, title: 'Currently' },      { id: 2, title: 'Completed' }    ],    currentStatus: '1',    books: null  },  created: function() {    this.fetchData()  },  watch: {    currentStatus: 'fetchData'  },  methods: {    fetchData: function() {      var xhr = new XMLHttpRequest()      var self = this      xhr.open('GET', apiURL + self.currentStatus)      xhr.onload = function() {        self.books = JSON.parse(xhr.responseText)      }      xhr.send()    }  }})The first part we see here is the URL for the API. You’ll see that it ends sort of abruptly, allowing us to tack on an ID as we make the request. The default ID is 1, which matches the ID of the “Currently” category in WordPress. We set that as the default, so that as the page loads, it uses it for the initial request. When the user changes the current status (either “Currently” or “Completed”), we send the new ID along with the new request.The methods section contains a function to fetch new data, and it is a fairly simple Ajax request. Vue watches for a change in currentStatus and performs a fetchData when it does.Page MarkupVue needs a container to target, and it needs to match the ID in the el attribute that we’ve already created. It’s just a simple &lt;div id=\"app\"&gt;&lt;/div&gt; that we’ll place all of the following code inside of.This next part is what I’ve been poking around on still. The template that Vue uses to actually create the markup on the page can live in a couple of different places. Currently, I have it inside a couple of &lt;template&gt; tags on the page itself.First, you can use a for loop in Vue to create a list of the possible statuses. For my example, I wanted two radio buttons that are labeled as “Currently” and “Completed.”&lt;template v-for=\"status in statuses\"&gt;  &lt;input type=\"radio\"  :id=\"status.id\"  :value=\"status.id\"  :name=\"status.id\"  v-model=\"currentStatus\"&gt;  &lt;label :for=\"status.id\" v-html=\"status.title\"&gt;&lt;/label&gt;&lt;/template&gt;It’s a little weird to be writing a for loop using markup, but it feels sort of familiar and it was pretty easy to understand what was going on. In this example, we just get a list of two radio buttons with corresponding labels. Here, attributes that have a “:” before them are dynamic, and they pull their value from the current status object. The attributes that have “v-” before them aren’t exactly dynamic, but they’re more like instructions for Vue. v-model hooks the inputs into Vue and gives them their interactivity. It communicates the current value of currentStatus to the Vue instance. v-html takes the status title and outputs it as text inside the label element.As for the markup for the actual book list, it’s a fairly simple setup, and even easier to understand than the radio button markup. We wrap it in an unordered list tag and then create a for loop to iterate over each of the books, listing the title and author for each.&lt;ul class=\"book-list\"&gt;&lt;template v-for=\"book in books\"&gt;  &lt;li&gt;    &lt;p class=\"book-title\" v-html=\"book.title.rendered\"&gt;&lt;/p&gt;    &lt;p class=\"author\" v-html=\"book.fields.author\"&gt;&lt;/p&gt;  &lt;/li&gt;&lt;/template&gt;&lt;/ul&gt;In this part, we’re referencing the author field that we added to the WP REST API by looking for the fields attribute of the current book. The field we created, named “author,” is available to us there.Performance ConcernsUsing Vue is absolutely overkill for displaying a list of books. This specific project was definitely just a proof-of-concept so that I could dig into Vue. The Vue file minified is 90k on the server. My site uses CloudFlare, so I’m benefiting from their compression (I think, it’s magic), which gets it down to 30k when loaded in the browser. Not terrible by any means, but it was 0k of JavaScript when it was just a static list.Aside from loading Vue, there’s also the small performance enhancement we could make of caching the responses. Since my reading list is fairly static, we could cache the response locally and just look for it in cache instead of going back out to the API. As it currently stands, toggling the current status back and forth results in a bunch of needless requests.",
            "content_html": "<p>Getting into new JavaScript is difficult when you don’t have something useful to build with it, so I was excited when I put it together that I could add Vue to my existing reading list. I’ve had it as static content for a little while now. Making updates is manual, and ends up with lots of repeated code. So, my idea was to move the listings to a WordPress install, and then bring them into the page and display them using Vue. Here’s how I did that.</p><h2 id=\"starting-somewhere\">Starting somewhere</h2><p>It’s always good to have somewhere to start, and I got over the initial hump by looking over Brian Krogsgard’s example Vue project on CodePen. He’s pulling in posts from Post Status and displaying them on the page. Fairly simple, but it also includes a toggle to switch between authors. This translated well to the distinction on my reading list between books I’ve completed and ones I’m currently reading. I was pretty excited to see that the amount of code to get going was minimal.</p><h2 id=\"prepping-wordpress\">Prepping WordPress</h2><p>I have a WordPress environment that runs on samhermes.co, and so I fired up a new site there. It is just using a default theme, since all I need to use is a REST API endpoint. I wonder what you’d do if all you wanted was the endpoints from your site? Could you remove everything else from public view? These are questions for another day. After I had loaded in the books, I added them to two categories, one for current and one for completed. Then, I wanted to add the author of each book, so I activated ACF and created a field called “Author” and loaded in the data.</p><p>Before the REST API endpoint is totally ready to go, the custom field needs to be added. By default, anything you add with ACF isn’t going to show up in the response. The following function will add all fields to the response.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">acf_rest_api</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"nx\">register_rest_field</span><span class=\"p\">(</span> <span class=\"s1\">'post'</span><span class=\"p\">,</span>    <span class=\"s1\">'fields'</span><span class=\"p\">,</span>    <span class=\"k\">array</span><span class=\"p\">(</span>      <span class=\"s1\">'get_callback'</span> <span class=\"o\">=&gt;</span> <span class=\"k\">function</span><span class=\"p\">(</span> <span class=\"nv\">$data</span><span class=\"p\">,</span> <span class=\"nv\">$field</span><span class=\"p\">,</span> <span class=\"nv\">$request</span><span class=\"p\">,</span> <span class=\"nv\">$type</span> <span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nb\">function_exists</span><span class=\"p\">(</span> <span class=\"s1\">'get_fields'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>          <span class=\"k\">return</span> <span class=\"nx\">get_fields</span><span class=\"p\">(</span> <span class=\"nv\">$data</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span> <span class=\"p\">);</span>        <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"p\">[];</span>      <span class=\"p\">},</span>      <span class=\"s1\">'update_callback'</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">null</span><span class=\"p\">,</span>      <span class=\"s1\">'schema'</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">null</span><span class=\"p\">,</span>    <span class=\"p\">)</span>  <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">'rest_api_init'</span><span class=\"p\">,</span> <span class=\"s1\">'acf_rest_api'</span> <span class=\"p\">);</span></code></pre></div></div><p>I was surprised to find that I didn’t have to add each field individually. I found a method that this could be done, but in my case it was easiest to just have all fields added, which will be especially helpful if I choose to add additional information in the future.</p><h2 id=\"setting-up-vue\">Setting up Vue</h2><p>After adding the minified version of Vue to the page, the next step is to create a Vue instance. The entirety of this piece is as follows:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">apiURL</span> <span class=\"o\">=</span> <span class=\"s1\">'https://samhermes.co/reading-list/wp-json/wp/v2/posts?categories='</span><span class=\"kd\">var</span> <span class=\"nx\">books</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>  <span class=\"na\">el</span><span class=\"p\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>  <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"na\">statuses</span><span class=\"p\">:</span> <span class=\"p\">[</span>      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Currently'</span> <span class=\"p\">},</span>      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'Completed'</span> <span class=\"p\">}</span>    <span class=\"p\">],</span>    <span class=\"na\">currentStatus</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>    <span class=\"na\">books</span><span class=\"p\">:</span> <span class=\"kc\">null</span>  <span class=\"p\">},</span>  <span class=\"na\">created</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">fetchData</span><span class=\"p\">()</span>  <span class=\"p\">},</span>  <span class=\"na\">watch</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"na\">currentStatus</span><span class=\"p\">:</span> <span class=\"s1\">'fetchData'</span>  <span class=\"p\">},</span>  <span class=\"na\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"na\">fetchData</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>      <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">()</span>      <span class=\"kd\">var</span> <span class=\"nb\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span>      <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"nx\">apiURL</span> <span class=\"o\">+</span> <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nx\">currentStatus</span><span class=\"p\">)</span>      <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nx\">books</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseText</span><span class=\"p\">)</span>      <span class=\"p\">}</span>      <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">()</span>    <span class=\"p\">}</span>  <span class=\"p\">}</span><span class=\"p\">})</span></code></pre></div></div><p>The first part we see here is the URL for the API. You’ll see that it ends sort of abruptly, allowing us to tack on an ID as we make the request. The default ID is 1, which matches the ID of the “Currently” category in WordPress. We set that as the default, so that as the page loads, it uses it for the initial request. When the user changes the current status (either “Currently” or “Completed”), we send the new ID along with the new request.</p><p>The methods section contains a function to fetch new data, and it is a fairly simple Ajax request. Vue watches for a change in <code class=\"highlighter-rouge\">currentStatus</code> and performs a <code class=\"highlighter-rouge\">fetchData</code> when it does.</p><h2 id=\"page-markup\">Page Markup</h2><p>Vue needs a container to target, and it needs to match the ID in the <code class=\"highlighter-rouge\">el</code> attribute that we’ve already created. It’s just a simple <code class=\"highlighter-rouge\">&lt;div id=\"app\"&gt;&lt;/div&gt;</code> that we’ll place all of the following code inside of.</p><p>This next part is what I’ve been poking around on still. The template that Vue uses to actually create the markup on the page can live in a couple of different places. Currently, I have it inside a couple of <code class=\"highlighter-rouge\">&lt;template&gt;</code> tags on the page itself.</p><p>First, you can use a for loop in Vue to create a list of the possible statuses. For my example, I wanted two radio buttons that are labeled as “Currently” and “Completed.”</p><pre><code class=\"language-markup\">&lt;template v-for=\"status in statuses\"&gt;  &lt;input type=\"radio\"  :id=\"status.id\"  :value=\"status.id\"  :name=\"status.id\"  v-model=\"currentStatus\"&gt;  &lt;label :for=\"status.id\" v-html=\"status.title\"&gt;&lt;/label&gt;&lt;/template&gt;</code></pre><p>It’s a little weird to be writing a for loop using markup, but it feels sort of familiar and it was pretty easy to understand what was going on. In this example, we just get a list of two radio buttons with corresponding labels. Here, attributes that have a “:” before them are dynamic, and they pull their value from the current <code class=\"highlighter-rouge\">status</code> object. The attributes that have “v-” before them aren’t exactly dynamic, but they’re more like instructions for Vue. <code class=\"highlighter-rouge\">v-model</code> hooks the inputs into Vue and gives them their interactivity. It communicates the current value of <code class=\"highlighter-rouge\">currentStatus</code> to the Vue instance. <code class=\"highlighter-rouge\">v-html</code> takes the status title and outputs it as text inside the label element.</p><p>As for the markup for the actual book list, it’s a fairly simple setup, and even easier to understand than the radio button markup. We wrap it in an unordered list tag and then create a for loop to iterate over each of the books, listing the title and author for each.</p><pre><code class=\"language-markup\">&lt;ul class=\"book-list\"&gt;&lt;template v-for=\"book in books\"&gt;  &lt;li&gt;    &lt;p class=\"book-title\" v-html=\"book.title.rendered\"&gt;&lt;/p&gt;    &lt;p class=\"author\" v-html=\"book.fields.author\"&gt;&lt;/p&gt;  &lt;/li&gt;&lt;/template&gt;&lt;/ul&gt;</code></pre><p>In this part, we’re referencing the author field that we added to the WP REST API by looking for the <code class=\"highlighter-rouge\">fields</code> attribute of the current book. The field we created, named “author,” is available to us there.</p><h2 id=\"performance-concerns\">Performance Concerns</h2><p>Using Vue is absolutely overkill for displaying a list of books. This specific project was definitely just a proof-of-concept so that I could dig into Vue. The Vue file minified is 90k on the server. My site uses CloudFlare, so I’m benefiting from their compression (I think, it’s magic), which gets it down to 30k when loaded in the browser. Not terrible by any means, but it was 0k of JavaScript when it was just a static list.</p><p>Aside from loading Vue, there’s also the small performance enhancement we could make of caching the responses. Since my reading list is fairly static, we could cache the response locally and just look for it in cache instead of going back out to the API. As it currently stands, toggling the current status back and forth results in a bunch of needless requests.</p>",
            "url": "http://localhost:4000/posts/small-vue-app-reading-list/",
            "date_published": "2018-01-24T00:00:00-06:00",
            "date_modified": "2018-01-24T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/but-what-about-css-skills/",
            "title": "CSS skills should be valued as much as JavaScript skills",
            "content_text": "Honestly, this should have just been a tweet, because it’s as simple as that. However, I deleted my account so we’re just going to have to give it deeper consideration.Why do I feel this way?A few months ago there were discussions about the job title “front end developer” and exactly what responsibilities fall under that domain. From the developers viewpoint, what should they be studying up on? From a hiring manager’s viewpoint, what skills should they be asking for, expecting, interviewing on, etc.? Looking at a sampling of job postings, it seems to be that front end developers need to know JavaScript, and maybe CSS gets listed next to HTML. You should know React, Angular, Vue (that all three of those would ever end up in the same listing is concerning), and then everything else is pretty much secondary.Who is responsible for the styles then? Who is going to ensure that your interfaces don’t fall apart the moment you add new functionality? Who is even keeping track of patterns, components, shared standards? Apparently a front end developer spends something like 2% of their time on these things?Why is this important?Performance, accessibility, maintainability, user experience… I could go on.If you know CSS really well, you know how to ship performative CSS. You know how to ship less CSS. You know how to ship accessible CSS. And these are two incredibly important aspects of any web project. As the web continues to reach people it never has before, performance and accessibility just get more important.Additionally, as more and more CSS is added to a project, the harder it is to keep track of it all. Creating style guides, pattern libraries, and component systems are all important tasks for the longevity of a project. The developers who create a project may not maintain it in 2 years, and someone with strong CSS skills is writing code with an eye to the future.What do we do?A little while ago, I switched my title on my website to “UI Developer,” as it seems to better describe my skills, abilities, and talent. I don’t think that “front end developer” accurately describes my role anymore, even though my day to day work hasn’t changed that much. So, part of the solution is for developers who love this part of the stack to own it.Beyond titles, we need to adjust how we talk about CSS skills. Unlike JavaScript, it can be hard to define what “good” CSS is. It’s a little more subjective. Writing or talking about CSS can involve more gray area, which is harder to talk about than a straightforward snippet of code. However, we need to be having these conversations. Discussions should happen around how UI elements work within a larger system, and how to make exceptions. We need to talk about browser support and what can cause accessibility issues. Also, beyond a chosen methodology, we have to think about how we get everyone on the same page with how we create UI within our organizations.As much as I’m feeling this issue of giving CSS priority, my own site is having trouble. It can be difficult to write and share CSS outside of a larger system, and the posts are slightly more difficult to write. It’s been a concern of mine for a while now that my writing doesn’t align well with what I am most interested in. This is definitely something I need to course correct on. Walk the talk!",
            "content_html": "<p>Honestly, this should have just been a tweet, because it’s as simple as that. However, I deleted my account so we’re just going to have to give it deeper consideration.</p><h2 id=\"why-do-i-feel-this-way\">Why do I feel this way?</h2><p>A few months ago there were discussions about the job title “front end developer” and exactly what responsibilities fall under that domain. From the developers viewpoint, what should they be studying up on? From a hiring manager’s viewpoint, what skills should they be asking for, expecting, interviewing on, etc.? Looking at a sampling of job postings, it seems to be that front end developers need to know JavaScript, and maybe CSS gets listed next to HTML. You should know React, Angular, Vue (that all three of those would ever end up in the same listing is concerning), and then everything else is pretty much secondary.</p><p>Who is responsible for the styles then? Who is going to ensure that your interfaces don’t fall apart the moment you add new functionality? Who is even keeping track of patterns, components, shared standards? Apparently a front end developer spends something like 2% of their time on these things?</p><h2 id=\"why-is-this-important\">Why is this important?</h2><p>Performance, accessibility, maintainability, user experience… I could go on.</p><p>If you know CSS really well, you know how to ship performative CSS. You know how to ship less CSS. You know how to ship accessible CSS. And these are two incredibly important aspects of any web project. As the web continues to reach people it never has before, performance and accessibility just get more important.</p><p>Additionally, as more and more CSS is added to a project, the harder it is to keep track of it all. Creating style guides, pattern libraries, and component systems are all important tasks for the longevity of a project. The developers who create a project may not maintain it in 2 years, and someone with strong CSS skills is writing code with an eye to the future.</p><h2 id=\"what-do-we-do\">What do we do?</h2><p>A little while ago, I switched my title on my website to “UI Developer,” as it seems to better describe my skills, abilities, and talent. I don’t think that “front end developer” accurately describes my role anymore, even though my day to day work hasn’t changed that much. So, part of the solution is for developers who love this part of the stack to own it.</p><p>Beyond titles, we need to adjust how we talk about CSS skills. Unlike JavaScript, it can be hard to define what “good” CSS is. It’s a little more subjective. Writing or talking about CSS can involve more gray area, which is harder to talk about than a straightforward snippet of code. However, we need to be having these conversations. Discussions should happen around how UI elements work within a larger system, and how to make exceptions. We need to talk about browser support and what can cause accessibility issues. Also, beyond a chosen methodology, we have to think about how we get everyone on the same page with how we create UI within our organizations.</p><p>As much as I’m feeling this issue of giving CSS priority, my own site is having trouble. It can be difficult to write and share CSS outside of a larger system, and the posts are slightly more difficult to write. It’s been a concern of mine for a while now that my writing doesn’t align well with what I am most interested in. This is definitely something I need to course correct on. Walk the talk!</p>",
            "url": "http://localhost:4000/posts/but-what-about-css-skills/",
            "date_published": "2017-12-20T00:00:00-06:00",
            "date_modified": "2017-12-20T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/getting-started-with-css-grid/",
            "title": "Getting started with CSS grid",
            "content_text": "CSS grid has been out in the wild for a little while now, and though I still have a little hesitation about putting it into production, it’s worth studying up on it. For all of the complexity that CSS grid brings, it’s incredibly simple to get started. Many of the basic layout tasks that I’ve attempted so far have only required a few properties to be specified on the parent element. Let’s look at a run-of-the-mill example.Two Column LayoutOne of the most common layouts, this used to require a pairing of floats and widths. Although calc() introduced new possibilities for how widths could be calculated, it still wasn’t powerful (or easy) enough.We begin by enabling grid on the parent element with a new value for the display property..two-column {\tdisplay: grid;}From there, we need to decide the widths for each column. For a sidebar, we could set up a fixed or flexible width for it. Here, we give it a fixed width of 15em..two-column {\tdisplay: grid;\tgrid-template-columns: 15em 1fr;}As you probably noticed, we’ve got a new measurement in use here. CSS grid adds the fr unit, or fraction unit. It’s incredibly powerful, and here, using 1fr, it fills up the remaining space.We can use the fraction unit to develop our own grid system of sorts, and the possibilities are unlimited. To create a percentage-based layout similar to what we’ve already done, we use two values in fractions..two-column {\tdisplay: grid;\tgrid-template-columns: 10fr 4fr;}If we’re on a fairly large screen, this layout probably looks great. However, we probably only want to apply it when the screen is wider than 600px, or 37.5em, or so.@media screen and (min-width: 37.5em) {\t.two-column {\t\tdisplay: grid;\t\tgrid-template-columns: 15em 1fr;\t}}This feels really familiar, and goes along with what we’ve been doing with flexbox. Using grid with media queries, we only apply the layout changes when we’d like them to take effect.The last piece of this layout is the most exciting. Whereas we needed to perform quite a bit of management of the margin between elements with float layouts, this is no longer an issue. Grid gap takes care of this in a clean, simple way. Floats required adding margin to both sides, or removing it from the last child. Grid gap just gets to the point..two-column {\tdisplay: grid;\tgrid-template-columns: 15em 1fr;\tgrid-gap: 5em;}Here we’re telling grid to set the first column to 15em, then add a blank 5em gap, and then fill up the remaining space with the second element. A flexible or fixed value could be used here, just like with our column measurements.It’s incredibly exciting to have such a powerful layout engine baked into browsers, and I can’t wait to use these properties in production. With the appropriate fallbacks, those who wish to live on the edge can use CSS grid in production today. I’ll be writing about how that can be done next.",
            "content_html": "<p>CSS grid has been out in the wild for a little while now, and though I still have a little hesitation about putting it into production, it’s worth studying up on it. For all of the complexity that CSS grid brings, it’s incredibly simple to get started. Many of the basic layout tasks that I’ve attempted so far have only required a few properties to be specified on the parent element. Let’s look at a run-of-the-mill example.</p><h2 id=\"two-column-layout\">Two Column Layout</h2><p>One of the most common layouts, this used to require a pairing of floats and widths. Although <code class=\"highlighter-rouge\">calc()</code> introduced new possibilities for how widths could be calculated, it still wasn’t powerful (or easy) enough.</p><p>We begin by enabling grid on the parent element with a new value for the display property.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>From there, we need to decide the widths for each column. For a sidebar, we could set up a fixed or flexible width for it. Here, we give it a fixed width of <code class=\"highlighter-rouge\">15em</code>.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">15em</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>As you probably noticed, we’ve got a new measurement in use here. CSS grid adds the <code class=\"highlighter-rouge\">fr</code> unit, or fraction unit. It’s incredibly powerful, and here, using <code class=\"highlighter-rouge\">1fr</code>, it fills up the remaining space.</p><p>We can use the fraction unit to develop our own grid system of sorts, and the possibilities are unlimited. To create a percentage-based layout similar to what we’ve already done, we use two values in fractions.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">10</span><span class=\"n\">fr</span> <span class=\"m\">4</span><span class=\"n\">fr</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>If we’re on a fairly large screen, this layout probably looks great. However, we probably only want to apply it when the screen is wider than <code class=\"highlighter-rouge\">600px</code>, or <code class=\"highlighter-rouge\">37.5em</code>, or so.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"p\">:</span> <span class=\"m\">37.5em</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">15em</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>This feels really familiar, and goes along with what we’ve been doing with flexbox. Using grid with media queries, we only apply the layout changes when we’d like them to take effect.</p><p>The last piece of this layout is the most exciting. Whereas we needed to perform quite a bit of management of the margin between elements with float layouts, this is no longer an issue. Grid gap takes care of this in a clean, simple way. Floats required adding margin to both sides, or removing it from the last child. Grid gap just gets to the point.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">15em</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span>\t<span class=\"py\">grid-gap</span><span class=\"p\">:</span> <span class=\"m\">5em</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Here we’re telling grid to set the first column to <code class=\"highlighter-rouge\">15em</code>, then add a blank <code class=\"highlighter-rouge\">5em</code> gap, and then fill up the remaining space with the second element. A flexible or fixed value could be used here, just like with our column measurements.</p><p>It’s incredibly exciting to have such a powerful layout engine baked into browsers, and I can’t wait to use these properties in production. With the appropriate fallbacks, those who wish to live on the edge can use CSS grid in production today. I’ll be writing about how that can be done next.</p>",
            "url": "http://localhost:4000/posts/getting-started-with-css-grid/",
            "date_published": "2017-11-06T00:00:00-06:00",
            "date_modified": "2017-11-06T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/buttons-need-declared-type/",
            "title": "Buttons need a declared type",
            "content_text": "When using a &lt;button&gt; element, the default type is submit. So, if you’re just going for a toggle button or other interactive functionality, type=\"button\" should be added.I was reading through an article in CSS Tricks from last November about HTML/SVG usage, and it notes that in their study of sites in the wild, about 30% of buttons did not have any attribute at all. Hate to admit, I think I’ve contributed to that figure.Of additional interest, buttons do not need role=\"button\" as it is implied. This is according to the HTML specification on buttons, where it notes that ARIA roles that match the implicit role of the element are not recommended. Further reading about this can be found at w3c.github.io/html/dom.html",
            "content_html": "<p>When using a <code class=\"highlighter-rouge\">&lt;button&gt;</code> element, the default type is <code class=\"highlighter-rouge\">submit</code>. So, if you’re just going for a toggle button or other interactive functionality, <code class=\"highlighter-rouge\">type=\"button\"</code> should be added.</p><p>I was reading through <a href=\"https://css-tricks.com/random-interesting-facts-htmlsvg-usage/#article-header-id-12\">an article in CSS Tricks</a> from last November about HTML/SVG usage, and it notes that in their study of sites in the wild, about 30% of buttons did not have any attribute at all. Hate to admit, I think I’ve contributed to that figure.</p><p>Of additional interest, buttons do not need <code class=\"highlighter-rouge\">role=\"button\"</code> as it is implied. This is according to the <a href=\"https://w3c.github.io/html/sec-forms.html#the-button-element\">HTML specification on buttons</a>, where it notes that ARIA roles that match the implicit role of the element are not recommended. Further reading about this can be found at <a href=\"https://w3c.github.io/html/dom.html#aria-authoring-requirements\">w3c.github.io/html/dom.html</a></p>",
            "url": "http://localhost:4000/posts/buttons-need-declared-type/",
            "date_published": "2017-10-26T00:00:00-05:00",
            "date_modified": "2017-10-26T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/append-theme-version-to-stylesheet/",
            "title": "Append theme version to stylesheet",
            "content_text": "With browsers getting more aggressive about holding on to local cache, it can be aggravating to hear that an end user doesn’t see updates, or they see something quite broken because a few styles are missing. This can be improved by appending a version number to the end of any stylesheet in your project.In WordPress, the version number can come straight from the theme. To get the theme’s current version, make a call to wp_get_theme():$theme_version = wp_get_theme()-&gt;get( 'Version' );This returns the theme’s current version and stores it in a variable. To use the $theme_version variable when enqueuing styles, add it like so:wp_enqueue_style( 'theme-style', get_stylesheet_uri(), array(), $theme_version );Of course, for this to be effective, you’ll want to bump your theme’s version any time you have a new release. Now, whether you’re developing or publicly releasing a new feature, you can rest easier knowing that your end users are seeing what you’re seeing.",
            "content_html": "<p>With browsers getting more aggressive about holding on to local cache, it can be aggravating to hear that an end user doesn’t see updates, or they see something quite broken because a few styles are missing. This can be improved by appending a version number to the end of any stylesheet in your project.</p><p>In WordPress, the version number can come straight from the theme. To get the theme’s current version, make a call to <code class=\"highlighter-rouge\">wp_get_theme()</code>:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$theme_version</span> <span class=\"o\">=</span> <span class=\"nx\">wp_get_theme</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"na\">get</span><span class=\"p\">(</span> <span class=\"s1\">'Version'</span> <span class=\"p\">);</span></code></pre></div></div><p>This returns the theme’s current version and stores it in a variable. To use the <code class=\"highlighter-rouge\">$theme_version</code> variable when enqueuing styles, add it like so:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">wp_enqueue_style</span><span class=\"p\">(</span> <span class=\"s1\">'theme-style'</span><span class=\"p\">,</span> <span class=\"nx\">get_stylesheet_uri</span><span class=\"p\">(),</span> <span class=\"k\">array</span><span class=\"p\">(),</span> <span class=\"nv\">$theme_version</span> <span class=\"p\">);</span></code></pre></div></div><p>Of course, for this to be effective, you’ll want to bump your theme’s version any time you have a new release. Now, whether you’re developing or publicly releasing a new feature, you can rest easier knowing that your end users are seeing what you’re seeing.</p>",
            "url": "http://localhost:4000/posts/append-theme-version-to-stylesheet/",
            "date_published": "2017-09-25T00:00:00-05:00",
            "date_modified": "2017-09-25T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/explaining-accessible-modals/",
            "title": "Explaining accessible modals",
            "content_text": "Accessibility on the web is tricky, and modals are even trickier. Fortunately, there seem to be quite a few resources for getting there, one being Frend. It includes a component for an accessible modal that provides a small JavaScript library that hooks up to a modal and takes care of the rest. Only problem is that it’s a little too component-ized to understand what’s going on under the hood. The documentation says that you can just call var myModal = Frdialogmodal(); and you’re good to go. But what’s really happening, and how might we adapt it for our own use?Before I dig into this, I think it’s worth pointing out that “modal” is sort of a loose definition of what this will work for. In my current project, it’s less of a modal and more of a change of focus. In the Frend component, the main work that the JavaScript is doing is keeping the focus within the modal content while it is open and then putting the focus back where it was when the modal is closed. Someone who is tabbing through the site should be able to enter the context of the modal and then get back out of it when they’re ready. This works for modals or any event where you might be shifting context based on user input.Event bindingFirst things first, the display of a modal has to be triggered by an action taken by the user. Likely, that’s a click on a button. When a click event occurs, we want to attach an event listener that will listen for keydown events like so: document.addEventListener('keydown', modalTab);Collecting all focusable elementsNext up, if we’re going to be using the tab key, we need to find all of the elements that we want to be tabbed through. Essentially, we want to begin restricting focus states to a select group of elements that are inside the modal, and then loop through them as if the modal were a miniature webpage.We’re going to pass an array of all possible types of focusable elements into a function that will perform a querySelectorAll() within the context of the modal. Then we’ll end up with all of the elements to be tabbed through.Here’s an array containing all possible focusable elements:var focusableSelectors = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];Those are some pretty tricky selectors! For the most part, this will take care of just about anything you’d put in a modal, but you’ll want to make sure that this list matches up with reality.Once we know what types of elements could be focusable, we need to look inside of the modal content and gather up any element that matches. We can do that with the following:var modal = document.querySelector('.modal');var focusableElements = function() {  return [].slice.call( modal.querySelectorAll( focusableSelectors.join() ) );}With this function, if there are two anchor tags and a close button in the modal, an array with the two anchor links and button will be returned. This function will be used in the next step anytime the tab key is pressed.Handling tab keydownNow that the event listener is waiting for keydown events and we’ve got a list of all focusable elements, we can check to see if the user is using the tab key. This will be done within the modalTab() function, so let’s get that started.function modalTab(event) {It’s important to pass the event in to the function so that we can capture which key is being used. Our first check will be just that, through the following check:if (event.keyCode === 9) {The magic key code for the tab key is 9. When I first learned that keys were mapped to numbers, it seemed like something that could fall apart pretty easily, but it holds up! Tech!Creating a focus loopWe now move into controlling what happens when the first or last element is tabbed past. We want to drop the user’s focus state back on the first element if they get to the end of the modal and hit tab, and this should work in the inverse as well.The following code is still inside the modalTab() function, and inside the conditional tag we created above that’s checking to make sure the keyCode is 9.// Get the index of the currently focused element within the modalvar focusedIndex = focusableElements.indexOf(document.activeElement);// If the shift key is not in use, check to see if we're on the last elementif (!e.shiftKey &amp;&amp; focusedIndex === focusableElements.length - 1) {  // Focus first item within modal  focusableElements[0].focus();  e.preventDefault();// If the shift key is in use, we're going backwards, so check to see if we're on the first element} else if (e.shiftKey &amp;&amp; (focusedIndex === 0 || focusedIndex === -1)) {  // Focus last item within modal  focusableElements[focusableElements.length - 1].focus();  e.preventDefault();}We really don’t need to know what’s happening on the elements between the first and last element of the modal, their focus state can remain untouched by our script. We’re just waiting for the first or last.Removing event listener on closeWe really only want to listen for keydown events while the modal is open, so we’ll want to remove this event listener when the modal is closed. Since this could unexpectedly cause issues with other elements on the page, it’s safest to restrict our functions to just the modal. We’d remove the event listener like so: document.removeEventListener('keydown', modalTab);Additional considerationsBeyond handling the focus state, we’ll also want to manage state on a few other items. By default, the container of the modal should receive role=\"dialog\" as well as aria-hidden=\"true\". When the modal is opened, the aria-hidden attribute should be updated to false, and then set back to true  on close. This could be done with the following: modal.setAttribute('aria-hidden', true);This will vary based on what content is contained within the modal, but the first element should receive focus when the modal is opened. Whether this is just the first anchor tag or the modal container itself, the focus should be added to get the user started off properly.To learn more about how this works, the JS file for the Frend modal component is a great place to start. Much of what I went over in this post is contained within. View it on Github",
            "content_html": "<p>Accessibility on the web is tricky, and modals are even trickier. Fortunately, there seem to be quite a few resources for getting there, one being <a href=\"https://frend.co\">Frend</a>. It includes a component for an accessible modal that provides a small JavaScript library that hooks up to a modal and takes care of the rest. Only problem is that it’s a little too component-ized to understand what’s going on under the hood. The documentation says that you can just call <code class=\"highlighter-rouge\">var myModal = Frdialogmodal();</code> and you’re good to go. But what’s really happening, and how might we adapt it for our own use?</p><p>Before I dig into this, I think it’s worth pointing out that “modal” is sort of a loose definition of what this will work for. In my current project, it’s less of a modal and more of a change of focus. In the Frend component, the main work that the JavaScript is doing is keeping the focus within the modal content while it is open and then putting the focus back where it was when the modal is closed. Someone who is tabbing through the site should be able to enter the context of the modal and then get back out of it when they’re ready. This works for modals or any event where you might be shifting context based on user input.</p><h2 id=\"event-binding\">Event binding</h2><p>First things first, the display of a modal has to be triggered by an action taken by the user. Likely, that’s a click on a button. When a click event occurs, we want to attach an event listener that will listen for <code class=\"highlighter-rouge\">keydown</code> events like so: <code class=\"highlighter-rouge\">document.addEventListener('keydown', modalTab);</code></p><h2 id=\"collecting-all-focusable-elements\">Collecting all focusable elements</h2><p>Next up, if we’re going to be using the tab key, we need to find all of the elements that we want to be tabbed through. Essentially, we want to begin restricting focus states to a select group of elements that are inside the modal, and then loop through them as if the modal were a miniature webpage.</p><p>We’re going to pass an array of all possible types of focusable elements into a function that will perform a <code class=\"highlighter-rouge\">querySelectorAll()</code> within the context of the modal. Then we’ll end up with all of the elements to be tabbed through.</p><p>Here’s an array containing all possible focusable elements:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">focusableSelectors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a[href]'</span><span class=\"p\">,</span> <span class=\"s1\">'area[href]'</span><span class=\"p\">,</span> <span class=\"s1\">'input:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'select:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'textarea:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'button:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'iframe'</span><span class=\"p\">,</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"s1\">'embed'</span><span class=\"p\">,</span> <span class=\"s1\">'[contenteditable]'</span><span class=\"p\">,</span> <span class=\"s1\">'[tabindex]:not([tabindex^=\"-\"])'</span><span class=\"p\">];</span></code></pre></div></div><p>Those are some pretty tricky selectors! For the most part, this will take care of just about anything you’d put in a modal, but you’ll want to make sure that this list matches up with reality.</p><p>Once we know what types of elements could be focusable, we need to look inside of the modal content and gather up any element that matches. We can do that with the following:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">modal</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'.modal'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">focusableElements</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"k\">return</span> <span class=\"p\">[].</span><span class=\"nx\">slice</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span> <span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span> <span class=\"nx\">focusableSelectors</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>With this function, if there are two anchor tags and a close button in the modal, an array with the two anchor links and button will be returned. This function will be used in the next step anytime the tab key is pressed.</p><h2 id=\"handling-tab-keydown\">Handling tab keydown</h2><p>Now that the event listener is waiting for <code class=\"highlighter-rouge\">keydown</code> events and we’ve got a list of all focusable elements, we can check to see if the user is using the tab key. This will be done within the <code class=\"highlighter-rouge\">modalTab()</code> function, so let’s get that started.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">modalTab</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span></code></pre></div></div><p>It’s important to pass the <code class=\"highlighter-rouge\">event</code> in to the function so that we can capture which key is being used. Our first check will be just that, through the following check:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span></code></pre></div></div><p>The magic key code for the tab key is <code class=\"highlighter-rouge\">9</code>. When I first learned that keys were mapped to numbers, it seemed like something that could fall apart pretty easily, but it holds up! Tech!</p><h2 id=\"creating-a-focus-loop\">Creating a focus loop</h2><p>We now move into controlling what happens when the first or last element is tabbed past. We want to drop the user’s focus state back on the first element if they get to the end of the modal and hit tab, and this should work in the inverse as well.</p><p>The following code is still inside the <code class=\"highlighter-rouge\">modalTab()</code> function, and inside the conditional tag we created above that’s checking to make sure the <code class=\"highlighter-rouge\">keyCode</code> is <code class=\"highlighter-rouge\">9</code>.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Get the index of the currently focused element within the modal</span><span class=\"kd\">var</span> <span class=\"nx\">focusedIndex</span> <span class=\"o\">=</span> <span class=\"nx\">focusableElements</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">activeElement</span><span class=\"p\">);</span><span class=\"c1\">// If the shift key is not in use, check to see if we're on the last element</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">shiftKey</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">focusedIndex</span> <span class=\"o\">===</span> <span class=\"nx\">focusableElements</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// Focus first item within modal</span>  <span class=\"nx\">focusableElements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">focus</span><span class=\"p\">();</span>  <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span><span class=\"c1\">// If the shift key is in use, we're going backwards, so check to see if we're on the first element</span><span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">shiftKey</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">focusedIndex</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"nx\">focusedIndex</span> <span class=\"o\">===</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"c1\">// Focus last item within modal</span>  <span class=\"nx\">focusableElements</span><span class=\"p\">[</span><span class=\"nx\">focusableElements</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">focus</span><span class=\"p\">();</span>  <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span><span class=\"p\">}</span></code></pre></div></div><p>We really don’t need to know what’s happening on the elements between the first and last element of the modal, their focus state can remain untouched by our script. We’re just waiting for the first or last.</p><h2 id=\"removing-event-listener-on-close\">Removing event listener on close</h2><p>We really only want to listen for keydown events while the modal is open, so we’ll want to remove this event listener when the modal is closed. Since this could unexpectedly cause issues with other elements on the page, it’s safest to restrict our functions to just the modal. We’d remove the event listener like so: <code class=\"highlighter-rouge\">document.removeEventListener('keydown', modalTab);</code></p><h2 id=\"additional-considerations\">Additional considerations</h2><p>Beyond handling the focus state, we’ll also want to manage state on a few other items. By default, the container of the modal should receive <code class=\"highlighter-rouge\">role=\"dialog\"</code> as well as <code class=\"highlighter-rouge\">aria-hidden=\"true\"</code>. When the modal is opened, the <code class=\"highlighter-rouge\">aria-hidden</code> attribute should be updated to <code class=\"highlighter-rouge\">false</code>, and then set back to <code class=\"highlighter-rouge\">true</code>  on close. This could be done with the following: <code class=\"highlighter-rouge\">modal.setAttribute('aria-hidden', true);</code></p><p>This will vary based on what content is contained within the modal, but the first element should receive focus when the modal is opened. Whether this is just the first anchor tag or the modal container itself, the focus should be added to get the user started off properly.</p><p>To learn more about how this works, the JS file for the Frend modal component is a great place to start. Much of what I went over in this post is contained within. <a href=\"https://github.com/frend/frend.co/blob/gh-pages/_components/dialogmodal/dialogmodal.js\">View it on Github</a></p>",
            "url": "http://localhost:4000/posts/explaining-accessible-modals/",
            "date_published": "2017-08-18T00:00:00-05:00",
            "date_modified": "2017-08-18T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/omitting-optional-html-tags/",
            "title": "Omitting optional HTML tags",
            "content_text": "Someone mentioned somewhere at some point (life moves too fast) that the Google HTML/CSS Style Guide suggests that any unnecessary HTML tags can be omitted, such as the &lt;head&gt; and &lt;body&gt;. This was rather interesting to me, and so quintessential of the web. Even the things you think are so foundational may not be.I updated my Jekyll layout to remove optional tags, which means the page you’re currently viewing does not have a &lt;head&gt; tag or a &lt;body&gt; tag. The page source goes from the document type declaration right to a meta tag. The RSS link is followed immediately by the &lt;header&gt; tag.Of course, Google isn’t suggesting something new here, they’re simply following the HTML standard. The standard allows for the omission of quite a few other tags, such as the closing tag for &lt;li&gt; and &lt;p&gt;, among others. There are some conditionals around when this will work, though in most cases it seems feasible. Always good to check the spec.Since I’m using Jekyll to generate my site, I don’t have total control over the markup generated within the content of the site, but omitting a simple &lt;/li&gt; is neither here nor there. Still, interesting to consider that you can ship HTML without some of the most foundational tags.",
            "content_html": "<p>Someone mentioned somewhere at some point (life moves too fast) that the <a href=\"https://google.github.io/styleguide/htmlcssguide.html#Optional_Tags\">Google HTML/CSS Style Guide</a> suggests that any unnecessary HTML tags can be omitted, such as the <code class=\"highlighter-rouge\">&lt;head&gt;</code> and <code class=\"highlighter-rouge\">&lt;body&gt;</code>. This was rather interesting to me, and so quintessential of the web. Even the things you think are so foundational may not be.</p><p>I updated my Jekyll layout to remove optional tags, which means the page you’re currently viewing does not have a <code class=\"highlighter-rouge\">&lt;head&gt;</code> tag or a <code class=\"highlighter-rouge\">&lt;body&gt;</code> tag. The page source goes from the document type declaration right to a meta tag. The RSS link is followed immediately by the <code class=\"highlighter-rouge\">&lt;header&gt;</code> tag.</p><p>Of course, Google isn’t suggesting something new here, they’re simply following the HTML standard. The standard allows for the omission of quite a few other tags, such as the closing tag for <code class=\"highlighter-rouge\">&lt;li&gt;</code> and <code class=\"highlighter-rouge\">&lt;p&gt;</code>, among others. There are some conditionals around when this will work, though in most cases it seems feasible. Always good to <a href=\"https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-omission\">check the spec</a>.</p><p>Since I’m using Jekyll to generate my site, I don’t have total control over the markup generated within the content of the site, but omitting a simple <code class=\"highlighter-rouge\">&lt;/li&gt;</code> is neither here nor there. Still, interesting to consider that you can ship HTML without some of the most foundational tags.</p>",
            "url": "http://localhost:4000/posts/omitting-optional-html-tags/",
            "date_published": "2017-07-24T00:00:00-05:00",
            "date_modified": "2017-07-24T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/unregistering-widgets-in-wordpress/",
            "title": "Unregistering widgets in WordPress",
            "content_text": "If you’ve ever installed Jetpack, you’re probably familiar with widget overload. Sometimes it’s better to cut down on the number of widgets available to your users, both for the benefit of their cognitive load and just for the fact that they may never use some of them. Meta widget, anyone?Unregistering a widget is a fairly small bit of code, but getting all of the information you need can sometimes be the tricky part.Here is a function that hooks into the widgets_init action in WordPress, and in the function it calls unregister_widget() on the widget to remove, the meta widget in this case.function unregister_widgets() {  unregister_widget( 'WP_Meta' );}add_action( 'widgets_init', 'unregister_widgets' );Where do we know to get the class of the widget though? For all of the WordPress core widgets, you can reference the codex, where all of the widget names are listed. Each starts with WP_.What about widgets that come from other sources, such as a plugin or theme? That can take a little more work. The first and easiest way is to search the source code, and see if you can find where register_widget() is being called. In Sublime Text or Atom, you could perform a Find in Files for anywhere that register_widget appears in the project and grab the class name from there.If you don’t have the plugin or theme locally, you could also search the repository on GitHub. Opening the Jetpack repository, the search field in the header will perform searches only within the current repository, so a search for register_widget there will return the same results as if we had searched in a text editor.One last piece is adding a conditional to only unregister widgets if the plugin is actually active. It appears that unregister_widget fails gracefully if it can’t find the widget class, but it would be better to just ignore it entirely if the plugin or theme isn’t active. This might take a little investigation as well, but you can check to see if the main class of the plugin exists.if ( class_exists( 'Jetpack' ) ) {  unregister_widget( 'Jetpack_Gallery_Widget' );}If you’re unregistering a group of Jetpack widgets, adding this conditional will be much faster than checking for each widget individually.",
            "content_html": "<p>If you’ve ever installed Jetpack, you’re probably familiar with widget overload. Sometimes it’s better to cut down on the number of widgets available to your users, both for the benefit of their cognitive load and just for the fact that they may never use some of them. Meta widget, anyone?</p><p>Unregistering a widget is a fairly small bit of code, but getting all of the information you need can sometimes be the tricky part.</p><p>Here is a function that hooks into the <code class=\"highlighter-rouge\">widgets_init</code> action in WordPress, and in the function it calls <code class=\"highlighter-rouge\">unregister_widget()</code> on the widget to remove, the meta widget in this case.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">unregister_widgets</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"nx\">unregister_widget</span><span class=\"p\">(</span> <span class=\"s1\">'WP_Meta'</span> <span class=\"p\">);</span><span class=\"p\">}</span><span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">'widgets_init'</span><span class=\"p\">,</span> <span class=\"s1\">'unregister_widgets'</span> <span class=\"p\">);</span></code></pre></div></div><p>Where do we know to get the class of the widget though? For all of the WordPress core widgets, you can <a href=\"https://codex.wordpress.org/Function_Reference/unregister_widget\">reference the codex</a>, where all of the widget names are listed. Each starts with <code class=\"highlighter-rouge\">WP_</code>.</p><p>What about widgets that come from other sources, such as a plugin or theme? That can take a little more work. The first and easiest way is to search the source code, and see if you can find where <code class=\"highlighter-rouge\">register_widget()</code> is being called. In Sublime Text or Atom, you could perform a Find in Files for anywhere that <code class=\"highlighter-rouge\">register_widget</code> appears in the project and grab the class name from there.</p><p>If you don’t have the plugin or theme locally, you could also search the repository on GitHub. Opening the <a href=\"https://github.com/Automattic/Jetpack\">Jetpack repository</a>, the search field in the header will perform searches only within the current repository, so a search for <code class=\"highlighter-rouge\">register_widget</code> there will return the same results as if we had searched in a text editor.</p><p>One last piece is adding a conditional to only unregister widgets if the plugin is actually active. It appears that <code class=\"highlighter-rouge\">unregister_widget</code> fails gracefully if it can’t find the widget class, but it would be better to just ignore it entirely if the plugin or theme isn’t active. This might take a little investigation as well, but you can check to see if the main class of the plugin exists.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nb\">class_exists</span><span class=\"p\">(</span> <span class=\"s1\">'Jetpack'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">unregister_widget</span><span class=\"p\">(</span> <span class=\"s1\">'Jetpack_Gallery_Widget'</span> <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>If you’re unregistering a group of Jetpack widgets, adding this conditional will be much faster than checking for each widget individually.</p>",
            "url": "http://localhost:4000/posts/unregistering-widgets-in-wordpress/",
            "date_published": "2017-06-03T00:00:00-05:00",
            "date_modified": "2017-06-03T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/adding-ajax-search-to-wordpress/",
            "title": "Adding Ajax search to a WordPress theme",
            "content_text": "There are a few plugins that will add Ajax search for you, but what if you wanted to integrate it into your theme yourself for more control over functionality and appearance? Let’s see what we can do.I’ve broken out the functionality into separate files, which keeps this feature modular. We’ll be creating ajax-search.php and ajax-search.js.Before starting, there are a few things we need to do elsewhere first. The following will output the URL of the Ajax file that is part of WordPress core, and needs to be included in functions.php. We’ll use this in ajax-search.js to send requests for search results.wp_localize_script( 'ajax-search', 'ajaxurl', admin_url( 'admin-ajax.php' ) );You’ll want to customize the ajax-search bit to work with your naming structure. You’ll be less likely to run into conflicts if you use [theme-name]-ajax-search instead.Next, I’ve added a loading icon inside the search field to let users know that their request is being processed. I have a custom search-form.php defined in the theme that adds an animated SVG with a style property of display: none;. This ensures that the icon will only be show when we’re ready.Now, for creating the files. I’m going to start with ajax-search.php. This is where the template will be stored for the search results. Here we can control what is returned, add a thumbnail, excerpt, date, author, or simply return the title. There’s just one function in this file, and it attaches to the wp_ajax_ hook in WordPress.function ajax_search() {  // Get search term from search field  $search = sanitize_text_field( $_POST[ 'query' ] );  // Set up query using search string, limit to 8 results  $query = new WP_Query(    array(      'posts_per_page' =&gt; 8,      's' =&gt; $search    )  );  $output = '';  // Run search query  if ( $query-&gt;have_posts() ) {    while ( $query-&gt;have_posts() ) : $query-&gt;the_post();      /* Output a link to each result         This is where the post thumbnail, excerpt, or anything else could be added */      echo '&amp;lt;a href=\"' . get_permalink() . '\"&amp;gt;' . get_the_title() . '&amp;lt;/a&amp;gt;';    endwhile;    // If there is more than one page of results, add link to the full results page    if ( $query-&gt;max_num_pages &gt; 1 ) {      // We use urlencode() here to handle any spaces or odd characters in the search string      echo '&amp;lt;a class=\"see-all-results\" href=\"' . get_site_url() . '?s=' . urlencode( $search ) . '\"&amp;gt;View all results&amp;lt;/a&amp;gt;';    }  } else {    // There are no results, output a message    echo '&amp;lt;p class=\"no-results\"&amp;gt;No results&amp;lt;/p&amp;gt;';  }  // Reset query  wp_reset_query();  die();}/* We need to hook into both wp_ajax and wp_ajax_nopriv_ in order for   the search to work for both logged in and logged out users. */add_action( 'wp_ajax_ajax_search', 'ajax_search' );add_action( 'wp_ajax_nopriv_ajax_search', 'ajax_search' );The contents of ajax-search.php could be included inside of functions.php, but keeping it separate makes functions.php cleaner and easier to understand.Up next, let’s spend some time with the JavaScript to make it work. This example relies on jQuery, but could be reworked to use vanilla JavaScript. Essentially, we listen to the search field for changes. We’ll debounce the number of requests that can be made, but ensure that the user knows that we’re working nonetheless.jQuery(document).ready( function($) {  // Set up variables for each of the pertinent elements  var $searchWrap = $('.search-form'),      $searchField = $('.search-form .search-field'),      $loadingIcon = $('.search-form .loading'),      termExists = \"\";  // Debounce function from https://davidwalsh.name/javascript-debounce-function  function debounce(func, wait, immediate) {    var timeout;    return function() {      var context = this, args = arguments;      var later = function() {        timeout = null;        if (!immediate) func.apply(context, args);      };      var callNow = immediate &amp;&amp; !timeout;      clearTimeout(timeout);      timeout = setTimeout(later, wait);      if (callNow) func.apply(context, args);    };  };  // Add results container and disable autocomplete on search field  $searchWrap.append('&amp;lt;div class=\"results\"&amp;gt;&amp;lt;/div&amp;gt;');  var $searchResults = $('.search-form .results');  $searchField.attr('autocomplete', 'off');  // Perform search on keyup in search field, hide/show loading icon  $searchField.keyup( function() {    $loadingIcon.css('display', 'block');    // If the search field is not empty, perform the search function    if( $searchField.val() !== \"\" ) {      termExists = true;      doSearch();    } else {      termExists = false;      $searchResults.empty();      $loadingIcon.css('display', 'none');    }  });  // Make search Ajax request every 200 milliseconds, output results  var doSearch = debounce(function() {    var query = $searchField.val();    $.ajax({      type: 'POST',      url: ajaxurl, // ajaxurl comes from the localize_script we added to functions.php      data: {        action: 'ajax_search',        query: query,      },      success: function(result) {        if ( termExists ) {          // `result` here is what we've specified in ajax-search.php          $searchResults.html('&lt;div class=\"results-list\"&gt;' + result + '&lt;/div&gt;');        }      },      complete: function() {        // Whether or not results are returned, hide the loading icon once the request is complete        $loadingIcon.css('display', 'none');      }    });  }, 200);});That just about does it. The last piece is styling for the results. You’re likely to have plenty of ideas of your own, so I’ll close this up here. If there’s anything I’ve missed or been a bit unclear about, direct a tweet to @samhermes.",
            "content_html": "<p>There are a few plugins that will add Ajax search for you, but what if you wanted to integrate it into your theme yourself for more control over functionality and appearance? Let’s see what we can do.</p><p>I’ve broken out the functionality into separate files, which keeps this feature modular. We’ll be creating <code class=\"highlighter-rouge\">ajax-search.php</code> and <code class=\"highlighter-rouge\">ajax-search.js</code>.</p><p>Before starting, there are a few things we need to do elsewhere first. The following will output the URL of the Ajax file that is part of WordPress core, and needs to be included in <code class=\"highlighter-rouge\">functions.php</code>. We’ll use this in <code class=\"highlighter-rouge\">ajax-search.js</code> to send requests for search results.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">wp_localize_script</span><span class=\"p\">(</span> <span class=\"s1\">'ajax-search'</span><span class=\"p\">,</span> <span class=\"s1\">'ajaxurl'</span><span class=\"p\">,</span> <span class=\"nx\">admin_url</span><span class=\"p\">(</span> <span class=\"s1\">'admin-ajax.php'</span> <span class=\"p\">)</span> <span class=\"p\">);</span></code></pre></div></div><p>You’ll want to customize the <code class=\"highlighter-rouge\">ajax-search</code> bit to work with your naming structure. You’ll be less likely to run into conflicts if you use <code class=\"highlighter-rouge\">[theme-name]-ajax-search</code> instead.</p><p>Next, I’ve added a loading icon inside the search field to let users know that their request is being processed. I have a custom <code class=\"highlighter-rouge\">search-form.php</code> defined in the theme that adds an animated SVG with a style property of <code class=\"highlighter-rouge\">display: none;</code>. This ensures that the icon will only be show when we’re ready.</p><p>Now, for creating the files. I’m going to start with <code class=\"highlighter-rouge\">ajax-search.php</code>. This is where the template will be stored for the search results. Here we can control what is returned, add a thumbnail, excerpt, date, author, or simply return the title. There’s just one function in this file, and it attaches to the <code class=\"highlighter-rouge\">wp_ajax_</code> hook in WordPress.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">ajax_search</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"c1\">// Get search term from search field</span>  <span class=\"nv\">$search</span> <span class=\"o\">=</span> <span class=\"nx\">sanitize_text_field</span><span class=\"p\">(</span> <span class=\"nv\">$_POST</span><span class=\"p\">[</span> <span class=\"s1\">'query'</span> <span class=\"p\">]</span> <span class=\"p\">);</span>  <span class=\"c1\">// Set up query using search string, limit to 8 results</span>  <span class=\"nv\">$query</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">WP_Query</span><span class=\"p\">(</span>    <span class=\"k\">array</span><span class=\"p\">(</span>      <span class=\"s1\">'posts_per_page'</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">8</span><span class=\"p\">,</span>      <span class=\"s1\">'s'</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$search</span>    <span class=\"p\">)</span>  <span class=\"p\">);</span>  <span class=\"nv\">$output</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>  <span class=\"c1\">// Run search query</span>  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nv\">$query</span><span class=\"o\">-&gt;</span><span class=\"na\">have_posts</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">while</span> <span class=\"p\">(</span> <span class=\"nv\">$query</span><span class=\"o\">-&gt;</span><span class=\"na\">have_posts</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nv\">$query</span><span class=\"o\">-&gt;</span><span class=\"na\">the_post</span><span class=\"p\">();</span>      <span class=\"cm\">/* Output a link to each result         This is where the post thumbnail, excerpt, or anything else could be added */</span>      <span class=\"k\">echo</span> <span class=\"s1\">'&amp;lt;a href=\"'</span> <span class=\"o\">.</span> <span class=\"nx\">get_permalink</span><span class=\"p\">()</span> <span class=\"o\">.</span> <span class=\"s1\">'\"&amp;gt;'</span> <span class=\"o\">.</span> <span class=\"nx\">get_the_title</span><span class=\"p\">()</span> <span class=\"o\">.</span> <span class=\"s1\">'&amp;lt;/a&amp;gt;'</span><span class=\"p\">;</span>    <span class=\"k\">endwhile</span><span class=\"p\">;</span>    <span class=\"c1\">// If there is more than one page of results, add link to the full results page</span>    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nv\">$query</span><span class=\"o\">-&gt;</span><span class=\"na\">max_num_pages</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"c1\">// We use urlencode() here to handle any spaces or odd characters in the search string</span>      <span class=\"k\">echo</span> <span class=\"s1\">'&amp;lt;a class=\"see-all-results\" href=\"'</span> <span class=\"o\">.</span> <span class=\"nx\">get_site_url</span><span class=\"p\">()</span> <span class=\"o\">.</span> <span class=\"s1\">'?s='</span> <span class=\"o\">.</span> <span class=\"nb\">urlencode</span><span class=\"p\">(</span> <span class=\"nv\">$search</span> <span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">'\"&amp;gt;View all results&amp;lt;/a&amp;gt;'</span><span class=\"p\">;</span>    <span class=\"p\">}</span>  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>    <span class=\"c1\">// There are no results, output a message</span>    <span class=\"k\">echo</span> <span class=\"s1\">'&amp;lt;p class=\"no-results\"&amp;gt;No results&amp;lt;/p&amp;gt;'</span><span class=\"p\">;</span>  <span class=\"p\">}</span>  <span class=\"c1\">// Reset query</span>  <span class=\"nx\">wp_reset_query</span><span class=\"p\">();</span>  <span class=\"k\">die</span><span class=\"p\">();</span><span class=\"p\">}</span><span class=\"cm\">/* We need to hook into both wp_ajax and wp_ajax_nopriv_ in order for   the search to work for both logged in and logged out users. */</span><span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">'wp_ajax_ajax_search'</span><span class=\"p\">,</span> <span class=\"s1\">'ajax_search'</span> <span class=\"p\">);</span><span class=\"nx\">add_action</span><span class=\"p\">(</span> <span class=\"s1\">'wp_ajax_nopriv_ajax_search'</span><span class=\"p\">,</span> <span class=\"s1\">'ajax_search'</span> <span class=\"p\">);</span></code></pre></div></div><p>The contents of <code class=\"highlighter-rouge\">ajax-search.php</code> could be included inside of <code class=\"highlighter-rouge\">functions.php</code>, but keeping it separate makes <code class=\"highlighter-rouge\">functions.php</code> cleaner and easier to understand.</p><p>Up next, let’s spend some time with the JavaScript to make it work. This example relies on jQuery, but could be reworked to use vanilla JavaScript. Essentially, we listen to the search field for changes. We’ll debounce the number of requests that can be made, but ensure that the user knows that we’re working nonetheless.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">jQuery</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// Set up variables for each of the pertinent elements</span>  <span class=\"kd\">var</span> <span class=\"nx\">$searchWrap</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'.search-form'</span><span class=\"p\">),</span>      <span class=\"nx\">$searchField</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'.search-form .search-field'</span><span class=\"p\">),</span>      <span class=\"nx\">$loadingIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'.search-form .loading'</span><span class=\"p\">),</span>      <span class=\"nx\">termExists</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span>  <span class=\"c1\">// Debounce function from https://davidwalsh.name/javascript-debounce-function</span>  <span class=\"kd\">function</span> <span class=\"nx\">debounce</span><span class=\"p\">(</span><span class=\"nx\">func</span><span class=\"p\">,</span> <span class=\"nx\">wait</span><span class=\"p\">,</span> <span class=\"nx\">immediate</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">timeout</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>      <span class=\"kd\">var</span> <span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">args</span> <span class=\"o\">=</span> <span class=\"kr\">arguments</span><span class=\"p\">;</span>      <span class=\"kd\">var</span> <span class=\"nx\">later</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nx\">timeout</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">immediate</span><span class=\"p\">)</span> <span class=\"nx\">func</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">);</span>      <span class=\"p\">};</span>      <span class=\"kd\">var</span> <span class=\"nx\">callNow</span> <span class=\"o\">=</span> <span class=\"nx\">immediate</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">timeout</span><span class=\"p\">;</span>      <span class=\"nx\">clearTimeout</span><span class=\"p\">(</span><span class=\"nx\">timeout</span><span class=\"p\">);</span>      <span class=\"nx\">timeout</span> <span class=\"o\">=</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">later</span><span class=\"p\">,</span> <span class=\"nx\">wait</span><span class=\"p\">);</span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">callNow</span><span class=\"p\">)</span> <span class=\"nx\">func</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">);</span>    <span class=\"p\">};</span>  <span class=\"p\">};</span>  <span class=\"c1\">// Add results container and disable autocomplete on search field</span>  <span class=\"nx\">$searchWrap</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"s1\">'&amp;lt;div class=\"results\"&amp;gt;&amp;lt;/div&amp;gt;'</span><span class=\"p\">);</span>  <span class=\"kd\">var</span> <span class=\"nx\">$searchResults</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'.search-form .results'</span><span class=\"p\">);</span>  <span class=\"nx\">$searchField</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">'autocomplete'</span><span class=\"p\">,</span> <span class=\"s1\">'off'</span><span class=\"p\">);</span>  <span class=\"c1\">// Perform search on keyup in search field, hide/show loading icon</span>  <span class=\"nx\">$searchField</span><span class=\"p\">.</span><span class=\"nx\">keyup</span><span class=\"p\">(</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"nx\">$loadingIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'display'</span><span class=\"p\">,</span> <span class=\"s1\">'block'</span><span class=\"p\">);</span>    <span class=\"c1\">// If the search field is not empty, perform the search function</span>    <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"nx\">$searchField</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">()</span> <span class=\"o\">!==</span> <span class=\"s2\">\"\"</span> <span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"nx\">termExists</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>      <span class=\"nx\">doSearch</span><span class=\"p\">();</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>      <span class=\"nx\">termExists</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>      <span class=\"nx\">$searchResults</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>      <span class=\"nx\">$loadingIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'display'</span><span class=\"p\">,</span> <span class=\"s1\">'none'</span><span class=\"p\">);</span>    <span class=\"p\">}</span>  <span class=\"p\">});</span>  <span class=\"c1\">// Make search Ajax request every 200 milliseconds, output results</span>  <span class=\"kd\">var</span> <span class=\"nx\">doSearch</span> <span class=\"o\">=</span> <span class=\"nx\">debounce</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">$searchField</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">();</span>    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'POST'</span><span class=\"p\">,</span>      <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">ajaxurl</span><span class=\"p\">,</span> <span class=\"c1\">// ajaxurl comes from the localize_script we added to functions.php</span>      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>        <span class=\"na\">action</span><span class=\"p\">:</span> <span class=\"s1\">'ajax_search'</span><span class=\"p\">,</span>        <span class=\"na\">query</span><span class=\"p\">:</span> <span class=\"nx\">query</span><span class=\"p\">,</span>      <span class=\"p\">},</span>      <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">termExists</span> <span class=\"p\">)</span> <span class=\"p\">{</span>          <span class=\"c1\">// `result` here is what we've specified in ajax-search.php</span>          <span class=\"nx\">$searchResults</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div class=\"results-list\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">result</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>        <span class=\"p\">}</span>      <span class=\"p\">},</span>      <span class=\"na\">complete</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"c1\">// Whether or not results are returned, hide the loading icon once the request is complete</span>        <span class=\"nx\">$loadingIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'display'</span><span class=\"p\">,</span> <span class=\"s1\">'none'</span><span class=\"p\">);</span>      <span class=\"p\">}</span>    <span class=\"p\">});</span>  <span class=\"p\">},</span> <span class=\"mi\">200</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></div><p>That just about does it. The last piece is styling for the results. You’re likely to have plenty of ideas of your own, so I’ll close this up here. If there’s anything I’ve missed or been a bit unclear about, direct a tweet to <a href=\"https://twitter.com/samhermes\">@samhermes</a>.</p>",
            "url": "http://localhost:4000/posts/adding-ajax-search-to-wordpress/",
            "date_published": "2017-05-20T00:00:00-05:00",
            "date_modified": "2017-05-20T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/communicating-about-the-web/",
            "title": "Communicating about the web",
            "content_text": "The longer that I work in web development, the more time I spend thinking about the communication that surrounds the work I’m doing. How do I talk about what I’ve done? How do I best explain how to use a feature or tool? What happens when I’m no longer working on this project? The language that we use, whether we’re talking to another developer, a designer, or a user, is really important.For communicating with other developers, it just gets more and more important to be succinct. The fewer words I can use to explain something, the better. This is true in commit messages, code comments, and documentation. I know it’s important because I really appreciate it when others do it. It might take me a little more time to edit, but depending on how many people are involved, it can save a lot of others’ time.Slowly over time, I’ve been trying to cut out my use of the word ‘just’ and other similar terminology. Others have said this, but it’s unhelpful in that assumes that a process is easier than it may be for the reader. It subtly gives the writer the role of the expert, when it would be better to attempt to meet someone where they are. It’s something I’m working on.Beyond the day to day, I’m also challenged and interested in how to communicate to a larger, slightly undefined audience. In some cases, it’s hard to know who has or who will read what you’ve written. For on-boarding developers or users, how do I write broadly and generically while still being laser focused on the topic at hand? How do I write a commit or a pull request with enough information without taking up too much of my time? Or, how do I explain how to use a feature when my words could possibly be copied and shared with others?The web is more fun when everyone is included, and that includes everything about the web. The more we build, the more we have to keep others in mind. After all, you don’t know where your next users will come from.",
            "content_html": "<p>The longer that I work in web development, the more time I spend thinking about the communication that surrounds the work I’m doing. How do I talk about what I’ve done? How do I best explain how to use a feature or tool? What happens when I’m no longer working on this project? The language that we use, whether we’re talking to another developer, a designer, or a user, is really important.</p><p>For communicating with other developers, it just gets more and more important to be succinct. The fewer words I can use to explain something, the better. This is true in commit messages, code comments, and documentation. I know it’s important because I really appreciate it when others do it. It might take me a little more time to edit, but depending on how many people are involved, it can save a lot of others’ time.</p><p>Slowly over time, I’ve been trying to cut out my use of the word ‘just’ and other similar terminology. Others have said this, but it’s unhelpful in that assumes that a process is easier than it may be for the reader. It subtly gives the writer the role of the expert, when it would be better to attempt to meet someone where they are. It’s something I’m working on.</p><p>Beyond the day to day, I’m also challenged and interested in how to communicate to a larger, slightly undefined audience. In some cases, it’s hard to know who has or who will read what you’ve written. For on-boarding developers or users, how do I write broadly and generically while still being laser focused on the topic at hand? How do I write a commit or a pull request with enough information without taking up too much of my time? Or, how do I explain how to use a feature when my words could possibly be copied and shared with others?</p><p>The web is more fun when everyone is included, and that includes everything about the web. The more we build, the more we have to keep others in mind. After all, <a href=\"https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/\">you don’t know where your next users will come from</a>.</p>",
            "url": "http://localhost:4000/posts/communicating-about-the-web/",
            "date_published": "2017-05-06T00:00:00-05:00",
            "date_modified": "2017-05-06T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/next-posts-link-prev-posts-link-static-front-page/",
            "title": "Using next_posts_link() and prev_posts_link() on static front page",
            "content_text": "If you have a custom query of posts on a static front page in WordPress, adding pagination can be a confusing experience. The answer is fairly simple, if you’ve done it before. Prior to last week, I had not done it before, and I was very lost. Search results were driving me all kinds of places. Fortunately, you’ve landed here.The issue is that the paged query variable isn’t called paged on the homepage, but rather page. Both next_posts_link() and prev_posts_link() utilize the query variable, and a custom query is looking for the paged variable. To remedy this, you need to alter your query. In my specific case, the template partial could be used on a static front page or on any other page. Because of that, the following checks to see which is appropriate to use:global $paged;if ( get_query_var( 'paged' ) ) {\t$paged = get_query_var( 'paged' );} elseif ( get_query_var( 'page' ) ) {\t$paged = get_query_var( 'page' );} else {\t$paged = 1;}Once the $paged variable has been properly set, both next_posts_link() and prev_posts_link() will work as expected.I’ll note that paginate_links() works without making the modification I’ve outlined, if that’s the pagination structure you’re looking for. In my case, it was a bit more than I needed.",
            "content_html": "<p>If you have a custom query of posts on a static front page in WordPress, adding pagination can be a confusing experience. The answer is fairly simple, if you’ve done it before. Prior to last week, I had not done it before, and I was very lost. Search results were driving me all kinds of places. Fortunately, you’ve landed here.</p><p>The issue is that the <code class=\"highlighter-rouge\">paged</code> query variable isn’t called <code class=\"highlighter-rouge\">paged</code> on the homepage, but rather <code class=\"highlighter-rouge\">page</code>. Both <code class=\"highlighter-rouge\">next_posts_link()</code> and <code class=\"highlighter-rouge\">prev_posts_link()</code> utilize the query variable, and a custom query is looking for the <code class=\"highlighter-rouge\">paged</code> variable. To remedy this, you need to alter your query. In my specific case, the template partial could be used on a static front page or on any other page. Because of that, the following checks to see which is appropriate to use:</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">global</span> <span class=\"nv\">$paged</span><span class=\"p\">;</span><span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">get_query_var</span><span class=\"p\">(</span> <span class=\"s1\">'paged'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"nv\">$paged</span> <span class=\"o\">=</span> <span class=\"nx\">get_query_var</span><span class=\"p\">(</span> <span class=\"s1\">'paged'</span> <span class=\"p\">);</span><span class=\"p\">}</span> <span class=\"k\">elseif</span> <span class=\"p\">(</span> <span class=\"nx\">get_query_var</span><span class=\"p\">(</span> <span class=\"s1\">'page'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"nv\">$paged</span> <span class=\"o\">=</span> <span class=\"nx\">get_query_var</span><span class=\"p\">(</span> <span class=\"s1\">'page'</span> <span class=\"p\">);</span><span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t<span class=\"nv\">$paged</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Once the <code class=\"highlighter-rouge\">$paged</code> variable has been properly set, both <code class=\"highlighter-rouge\">next_posts_link()</code> and <code class=\"highlighter-rouge\">prev_posts_link()</code> will work as expected.</p><p>I’ll note that <code class=\"highlighter-rouge\">paginate_links()</code> works without making the modification I’ve outlined, if that’s the pagination structure you’re looking for. In my case, it was a bit more than I needed.</p>",
            "url": "http://localhost:4000/posts/next-posts-link-prev-posts-link-static-front-page/",
            "date_published": "2017-04-24T00:00:00-05:00",
            "date_modified": "2017-04-24T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/we-dont-need-amp/",
            "title": "We don’t need AMP",
            "content_text": "Episode #248 of Shop Talk Show is all about AMP (accelerated mobile pages) and how the project relates to the web at large. After listening, I have some thoughts. It’s made fairly clear in the episode that AMP is a crutch used by publishers who have lost control of their website’s performance. AMP has a very tight set of constraints built into it that prioritize performance. Comparing it to a traditional website, it makes sense why it is so effective. The defeating part of it is that it doesn’t have to exist. We can make pages that are better than AMP on the web.Development teams have been fighting constraints as long as the web has existed, and sometimes performance just doesn’t win out. Now they’ve been presented with, essentially, an easy way out. Instead of reprioritizing performance internally, AMP can be used to make the case for performance, and it wins out because it puts you in a good place with Google. This isn’t a good for the long-term.The guests in the episode don’t seem to be able to defend the AMP project very well, and it’s a bit hard to get on board listening to the discussion. It reeks a bit of “business reasons,” which is never a good reason in itself to do something. The fact of the matter is, AMP doesn’t need to exist. What we should be doing is using AMP as a model to improve what we already have. We should be removing as much code as possible from our sites, simplifying the layout, and caching as much as we possibly can. The future of the web depends on it.Update 3/25/17: An excellent roundup of the debate over AMP was posted on CSS-Tricks just the other day, it’s at css-tricks.com/need-catch-amp-debate.",
            "content_html": "<p><a href=\"http://shoptalkshow.com/episodes/248-amp/\">Episode #248 of Shop Talk Show</a> is all about AMP (accelerated mobile pages) and how the project relates to the web at large. After listening, I have some thoughts. It’s made fairly clear in the episode that AMP is a crutch used by publishers who have lost control of their website’s performance. AMP has a very tight set of constraints built into it that prioritize performance. Comparing it to a traditional website, it makes sense why it is so effective. The defeating part of it is that it doesn’t have to exist. We can make pages that are better than AMP on the web.</p><p>Development teams have been fighting constraints as long as the web has existed, and sometimes performance just doesn’t win out. Now they’ve been presented with, essentially, an easy way out. Instead of reprioritizing performance internally, AMP can be used to make the case for performance, and it wins out because it puts you in a good place with Google. This isn’t a good for the long-term.</p><p>The guests in the episode don’t seem to be able to defend the AMP project very well, and it’s a bit hard to get on board listening to the discussion. It reeks a bit of “business reasons,” which is never a good reason in itself to do something. The fact of the matter is, AMP doesn’t need to exist. What we should be doing is using AMP as a model to improve what we already have. We should be removing as much code as possible from our sites, simplifying the layout, and caching as much as we possibly can. The future of the web depends on it.</p><p><strong>Update 3/25/17:</strong> An excellent roundup of the debate over AMP was posted on CSS-Tricks just the other day, it’s at <a href=\"https://css-tricks.com/need-catch-amp-debate/\">css-tricks.com/need-catch-amp-debate</a>.</p>",
            "url": "http://localhost:4000/posts/we-dont-need-amp/",
            "date_published": "2017-03-16T00:00:00-05:00",
            "date_modified": "2017-03-16T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/two-worlds-web-development/",
            "title": "The two worlds of web development",
            "content_text": "There’s a big divide in the web development community that doesn’t get discussed enough. It’s roughly the difference between those who develop sites for informational purposes and those who develop sites that are applications. In some ways, it’s the divide between front end and back end development. It’s a bit difficult to draw a line between the two worlds, but informational sites are usually those for organizations, businesses, government, etc., and applications are properties like Airbnb, Facebook, and Google Docs. Interactivity, such as filtering, liking, saving, editing, or sorting, is usually what takes it from informational to application. The way we talk about and teach web development often mixes these two or makes no distinction.There are fundamental differences in the way we approach development in the two worlds. I’ve often gotten caught in this myself. Developing CSS for a web application is infinitely more complex than developing CSS for a static site mostly consisting of pages. Typically, if a project has a small team of developers working on it, CSS naming techniques such as BEM or OOCSS are not necessary. In fact, they are likely adding undue complexity and bloat to the site. In addition, a future developer would need to be briefed on how CSS works in that specific project.The same problem exists with JavaScript frameworks. An informational site rarely calls for a framework, and only sometimes calls for jQuery or another library. To develop an informational site using React, we’ve introduced a great deal of complexity that will require a level of maintenance that likely outweighs the perceived benefits. React makes sense for those sites that absolutely call for it, where we need to break apart each and every piece of a page into small, maintainable components. In addition, for someone new to web development, it may seem like React is required knowledge. We talk about it often, making it seem like a core piece of the web. In reality, it’s not. It’s simply the thing that there is a lot to learn about at the moment.Many of the foremost developers working in our industry are no longer solving problems for information-based sites. The pressing issues are how to handle a site when there are an innumerable amount of views and states, from all of the different ways to view a single post, photo, or conversation. And what about these views at each breakpoint? What if the user is not logged in? On top of that, how do we handle small updates with a team of 30 developers and keep everyone in sync? Many of the articles that get written and shared are answers to these big problems. While it’s fantastic to be aware of this work, it would be better if we had a bit of context before adapting it for ourselves. At the very least, we should take some time to consider whether or not the practices being put forth are appropriate for our world.",
            "content_html": "<p>There’s a big divide in the web development community that doesn’t get discussed enough. It’s roughly the difference between those who develop sites for informational purposes and those who develop sites that are applications. In some ways, it’s the divide between front end and back end development. It’s a bit difficult to draw a line between the two worlds, but informational sites are usually those for organizations, businesses, government, etc., and applications are properties like Airbnb, Facebook, and Google Docs. Interactivity, such as filtering, liking, saving, editing, or sorting, is usually what takes it from informational to application. The way we talk about and teach web development often mixes these two or makes no distinction.</p><p>There are fundamental differences in the way we approach development in the two worlds. I’ve often gotten caught in this myself. Developing CSS for a web application is infinitely more complex than developing CSS for a static site mostly consisting of pages. Typically, if a project has a small team of developers working on it, CSS naming techniques such as BEM or OOCSS are not necessary. In fact, they are likely adding undue complexity and bloat to the site. In addition, a future developer would need to be briefed on how CSS works in that specific project.</p><p>The same problem exists with JavaScript frameworks. An informational site rarely calls for a framework, and only sometimes calls for jQuery or another library. To develop an informational site using React, we’ve introduced a great deal of complexity that will require a level of maintenance that likely outweighs the perceived benefits. React makes sense for those sites that absolutely call for it, where we need to break apart each and every piece of a page into small, maintainable components. In addition, for someone new to web development, it may seem like React is required knowledge. We talk about it often, making it seem like a core piece of the web. In reality, it’s not. It’s simply the thing that there is a lot to learn about at the moment.</p><p>Many of the foremost developers working in our industry are no longer solving problems for information-based sites. The pressing issues are how to handle a site when there are an innumerable amount of views and states, from all of the different ways to view a single post, photo, or conversation. And what about these views at each breakpoint? What if the user is not logged in? On top of that, how do we handle small updates with a team of 30 developers and keep everyone in sync? Many of the articles that get written and shared are answers to these big problems. While it’s fantastic to be aware of this work, it would be better if we had a bit of context before adapting it for ourselves. At the very least, we should take some time to consider whether or not the practices being put forth are appropriate for our world.</p>",
            "url": "http://localhost:4000/posts/two-worlds-web-development/",
            "date_published": "2017-03-13T00:00:00-05:00",
            "date_modified": "2017-03-13T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/the-long-game-of-web-development/",
            "title": "The long game of web development",
            "content_text": "I recently finished reading The World Beyond Your Head by Matthew B. Crawford, and in the book he speaks of observing the individuals working as organ builders. He tells of the slowness of the process, much done by hand, then spends a bit of time musing on the long game of organ building. In it, one must respect the work of the person who came before, and also think of the person who will be maintaining the organ, and learning from their work in the future.Throughout, I couldn’t stop myself from paralleling organ building with web development, as I am wont to do. Web development depends so heavily on the past and the future, both respecting the standards and best practices that came before, and looking to the future and working in a way that will allow for flexibility down the line. Compared to building an organ, all of this is happening in a heavily compressed amount of time.In making the parallel, and taking it a little further, I was incredibly inspired by the following, taken straight from the book:“The preparation—getting the cutups right, getting them straight, manipulating the windway sizes and the toe holes—you could train a monkey to do that sort of thing. Just give them the list and they do it. If that’s done really really well, that’s ninety-seven percent of the work. After that ninety-seven percent is finished, the pipe will make a sound, it’ll play. Getting it to play beautifully, that’s the last three percent. And that’s where I’d like to say the artistic integrity of the voicer is put to use, and it’s at that point where the good voicer who has done really well preparing the pipes can take all the math and all the science, if they so desire, and you can start to throw some of that out the window. Now we’re not in the science book anymore, we’re not studying the math, now we’re making music.”It’s impossible to take web development seriously without great attention to the design, and design is music. The organ builders are involved in a tedious operation that ultimately results in music. Web developers spend months preparing a site the results in design. It’s design that hits the screen, not the development. No matter what you did in development, does it create music?Maybe the numbers all add up, they make sense, they’ve been engineered to perfection. Is the website a technical feat, it’s perfectly functional, but it just doesn’t seem to have a point of view? It’s easy to get caught up in the engineering of a website so much that the product of all that work doesn’t present itself as an emotional experience. And isn’t that what we’re doing on the web? If we were to throw emotion and perspective and impact out the window, we wouldn’t have much use for CSS. Why would we get halfway there and then give up when we’re so close?I urge you to spend that last 3 percent, and rebel. Go against the numbers, use your gut. Make something that feels like music. Make something that will inform the future.",
            "content_html": "<p>I recently finished reading <em>The World Beyond Your Head</em> by Matthew B. Crawford, and in the book he speaks of observing the individuals working as organ builders. He tells of the slowness of the process, much done by hand, then spends a bit of time musing on the long game of organ building. In it, one must respect the work of the person who came before, and also think of the person who will be maintaining the organ, and learning from their work in the future.</p><p>Throughout, I couldn’t stop myself from paralleling organ building with web development, as I am wont to do. Web development depends so heavily on the past and the future, both respecting the standards and best practices that came before, and looking to the future and working in a way that will allow for flexibility down the line. Compared to building an organ, all of this is happening in a heavily compressed amount of time.</p><p>In making the parallel, and taking it a little further, I was incredibly inspired by the following, taken straight from the book:</p><p>“The preparation—getting the cutups right, getting them straight, manipulating the windway sizes and the toe holes—you could train a monkey to do that sort of thing. Just give them the list and they do it. If that’s done really really well, that’s ninety-seven percent of the work. After that ninety-seven percent is finished, the pipe will make a sound, it’ll play. Getting it to play beautifully, that’s the last three percent. And that’s where I’d like to say the artistic integrity of the voicer is put to use, and it’s at that point where the good voicer who has done really well preparing the pipes can take all the math and all the science, if they so desire, and you can start to throw some of that out the window. Now we’re not in the science book anymore, we’re not studying the math, now we’re making music.”</p><p>It’s impossible to take web development seriously without great attention to the design, and design is music. The organ builders are involved in a tedious operation that ultimately results in music. Web developers spend months preparing a site the results in design. It’s design that hits the screen, not the development. No matter what you did in development, does it create music?</p><p>Maybe the numbers all add up, they make sense, they’ve been engineered to perfection. Is the website a technical feat, it’s perfectly functional, but it just doesn’t seem to have a point of view? It’s easy to get caught up in the engineering of a website so much that the product of all that work doesn’t present itself as an emotional experience. And isn’t that what we’re doing on the web? If we were to throw emotion and perspective and impact out the window, we wouldn’t have much use for CSS. Why would we get halfway there and then give up when we’re so close?</p><p>I urge you to spend that last 3 percent, and rebel. Go against the numbers, use your gut. Make something that feels like music. Make something that will inform the future.</p>",
            "url": "http://localhost:4000/posts/the-long-game-of-web-development/",
            "date_published": "2017-01-01T00:00:00-06:00",
            "date_modified": "2017-01-01T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/high-density-screens-web-performance/",
            "title": "High density screens and web performance",
            "content_text": "High density screens and the web are at odds. On one side, we want sites to look as crisp as possible, no matter where they are being viewed, but on the other hand, performance is incredibly important. Actually, most important.Say that we begin preparing images for 2x devices. We serve up images that are four times bigger in file size, and they look great on a Retina MacBook Pro. That’s great. But, look at it on a 5K iMac, and we’re essentially back to square one. Also, we forgot to ask, but did that MacBook Pro user want to download an image that was four times bigger? Maybe they were on a slow connection and did not really care to. Should we be making those decisions for them at this point? I think we should be waiting for browsers to get smarter about this.Currently, my goal is to prepare everything, except for photos, for any pixel density. I think that by leaving photos at or slightly above their display size, it optimizes for web performance. Photos are the hardest to tell if they are not at the correct pixel density. If there is text in an image, it should be served up in higher density. Otherwise, 1x is good enough for now.I think sites are in good shape if they convert all remaining graphical elements to vector, including interface controls. If you can do it in a vector graphic, it’s ready for the future. Right now, the support for SVG is fantastic, and they are fairly performant. I think they are what I am most excited about on the web at the moment.",
            "content_html": "<p>High density screens and the web are at odds. On one side, we want sites to look as crisp as possible, no matter where they are being viewed, but on the other hand, performance is incredibly important. Actually, most important.</p><p>Say that we begin preparing images for 2x devices. We serve up images that are four times bigger in file size, and they look great on a Retina MacBook Pro. That’s great. But, look at it on a 5K iMac, and we’re essentially back to square one. Also, we forgot to ask, but did that MacBook Pro user want to download an image that was four times bigger? Maybe they were on a slow connection and did not really care to. Should we be making those decisions for them at this point? I think we should be waiting for browsers to get smarter about this.</p><p>Currently, my goal is to prepare everything, except for photos, for any pixel density. I think that by leaving photos at or slightly above their display size, it optimizes for web performance. Photos are the hardest to tell if they are not at the correct pixel density. If there is text in an image, it should be served up in higher density. Otherwise, 1x is good enough for now.</p><p>I think sites are in good shape if they convert all remaining graphical elements to vector, including interface controls. If you can do it in a vector graphic, it’s ready for the future. Right now, the support for SVG is fantastic, and they are fairly performant. I think they are what I am most excited about on the web at the moment.</p>",
            "url": "http://localhost:4000/posts/high-density-screens-web-performance/",
            "date_published": "2016-12-05T00:00:00-06:00",
            "date_modified": "2016-12-05T00:00:00-06:00"
        }
    
    ]
}