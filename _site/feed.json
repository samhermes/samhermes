{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sam Hermes",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "Web developer at Washington University in St. Louis",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    "author": {
        "name": "Sam Hermes",
        "url": "http://localhost:4000/"
    },
    "items": [
    
        {
            "id": "http://localhost:4000/posts/but-what-about-css-skills/",
            "title": "CSS skills should be valued as much as JavaScript skills",
            "content_text": "Honestly, this should have just been a tweet, because it’s as simple as that. However, I deleted my account so we’re just going to have to give it deeper consideration.Why do I feel this way?A few months ago there were discussions about the job title “front end developer” and exactly what responsibilities fall under that domain. From the developers viewpoint, what should they be studying up on? From a hiring manager’s viewpoint, what skills should they be asking for, expecting, interviewing on, etc.? Looking at a sampling of job postings, it seems to be that front end developers need to know JavaScript, and maybe CSS gets listed next to HTML. You should know React, Angular, Vue (that all three of those would ever end up in the same listing is concerning), and then everything else is pretty much secondary.Who is responsible for the styles then? Who is going to ensure that your interfaces don’t fall apart the moment you add new functionality? Who is even keeping track of patterns, components, shared standards? Apparently a front end developer spends something like 2% of their time on these things?Why is this important?Performance, accessibility, maintainability, user experience… I could go on.If you know CSS really well, you know how to ship performative CSS. You know how to ship less CSS. You know how to ship accessible CSS. And these are two incredibly important aspects of any web project. As the web continues to reach people it never has before, performance and accessibility just get more important.Additionally, as more and more CSS is added to a project, the harder it is to keep track of it all. Creating style guides, pattern libraries, and component systems are all important tasks for the longevity of a project. The developers who create a project may not maintain it in 2 years, and someone with strong CSS skills is writing code with an eye to the future.What do we do?A little while ago, I switched my title on my website to “UI Developer,” as it seems to better describe my skills, abilities, and talent. I don’t think that “front end developer” accurately describes my role anymore, even though my day to day work hasn’t changed that much. So, part of the solution is for developers who love this part of the stack to own it.Beyond titles, we need to adjust how we talk about CSS skills. Unlike JavaScript, it can be hard to define what “good” CSS is. It’s a little more subjective. Writing or talking about CSS can involve more gray area, which is harder to talk about than a straightforward snippet of code. However, we need to be having these conversations. Discussions should happen around how UI elements work within a larger system, and how to make exceptions. We need to talk about browser support and what can cause accessibility issues. Also, beyond a chosen methodology, we have to think about how we get everyone on the same page with how we create UI within our organizations.As much as I’m feeling this issue of giving CSS priority, my own site is having trouble. It can be difficult to write and share CSS outside of a larger system, and the posts are slightly more difficult to write. It’s been a concern of mine for a while now that my writing doesn’t align well with what I am most interested in. This is definitely something I need to course correct on. Walk the talk!",
            "content_html": "<p>Honestly, this should have just been a tweet, because it’s as simple as that. However, I deleted my account so we’re just going to have to give it deeper consideration.</p><h2 id=\"why-do-i-feel-this-way\">Why do I feel this way?</h2><p>A few months ago there were discussions about the job title “front end developer” and exactly what responsibilities fall under that domain. From the developers viewpoint, what should they be studying up on? From a hiring manager’s viewpoint, what skills should they be asking for, expecting, interviewing on, etc.? Looking at a sampling of job postings, it seems to be that front end developers need to know JavaScript, and maybe CSS gets listed next to HTML. You should know React, Angular, Vue (that all three of those would ever end up in the same listing is concerning), and then everything else is pretty much secondary.</p><p>Who is responsible for the styles then? Who is going to ensure that your interfaces don’t fall apart the moment you add new functionality? Who is even keeping track of patterns, components, shared standards? Apparently a front end developer spends something like 2% of their time on these things?</p><h2 id=\"why-is-this-important\">Why is this important?</h2><p>Performance, accessibility, maintainability, user experience… I could go on.</p><p>If you know CSS really well, you know how to ship performative CSS. You know how to ship less CSS. You know how to ship accessible CSS. And these are two incredibly important aspects of any web project. As the web continues to reach people it never has before, performance and accessibility just get more important.</p><p>Additionally, as more and more CSS is added to a project, the harder it is to keep track of it all. Creating style guides, pattern libraries, and component systems are all important tasks for the longevity of a project. The developers who create a project may not maintain it in 2 years, and someone with strong CSS skills is writing code with an eye to the future.</p><h2 id=\"what-do-we-do\">What do we do?</h2><p>A little while ago, I switched my title on my website to “UI Developer,” as it seems to better describe my skills, abilities, and talent. I don’t think that “front end developer” accurately describes my role anymore, even though my day to day work hasn’t changed that much. So, part of the solution is for developers who love this part of the stack to own it.</p><p>Beyond titles, we need to adjust how we talk about CSS skills. Unlike JavaScript, it can be hard to define what “good” CSS is. It’s a little more subjective. Writing or talking about CSS can involve more gray area, which is harder to talk about than a straightforward snippet of code. However, we need to be having these conversations. Discussions should happen around how UI elements work within a larger system, and how to make exceptions. We need to talk about browser support and what can cause accessibility issues. Also, beyond a chosen methodology, we have to think about how we get everyone on the same page with how we create UI within our organizations.</p><p>As much as I’m feeling this issue of giving CSS priority, my own site is having trouble. It can be difficult to write and share CSS outside of a larger system, and the posts are slightly more difficult to write. It’s been a concern of mine for a while now that my writing doesn’t align well with what I am most interested in. This is definitely something I need to course correct on. Walk the talk!</p>",
            "url": "http://localhost:4000/posts/but-what-about-css-skills/",
            "date_published": "2017-12-20T00:00:00-06:00",
            "date_modified": "2017-12-20T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/getting-started-with-css-grid/",
            "title": "Getting started with CSS grid",
            "content_text": "CSS grid has been out in the wild for a little while now, and though I still have a little hesitation about putting it into production, it’s worth studying up on it. For all of the complexity that CSS grid brings, it’s incredibly simple to get started. Many of the basic layout tasks that I’ve attempted so far have only required a few properties to be specified on the parent element. Let’s look at a run-of-the-mill example.Two Column LayoutOne of the most common layouts, this used to require a pairing of floats and widths. Although calc() introduced new possibilities for how widths could be calculated, it still wasn’t powerful (or easy) enough.We begin by enabling grid on the parent element with a new value for the display property..two-column {\tdisplay: grid;}From there, we need to decide the widths for each column. For a sidebar, we could set up a fixed or flexible width for it. Here, we give it a fixed width of 15em..two-column {\tdisplay: grid;\tgrid-template-columns: 15em 1fr;}As you probably noticed, we’ve got a new measurement in use here. CSS grid adds the fr unit, or fraction unit. It’s incredibly powerful, and here, using 1fr, it fills up the remaining space.We can use the fraction unit to develop our own grid system of sorts, and the possibilities are unlimited. To create a percentage-based layout similar to what we’ve already done, we use two values in fractions..two-column {\tdisplay: grid;\tgrid-template-columns: 10fr 4fr;}If we’re on a fairly large screen, this layout probably looks great. However, we probably only want to apply it when the screen is wider than 600px, or 37.5em, or so.@media screen and (min-width: 37.5em) {\t.two-column {\t\tdisplay: grid;\t\tgrid-template-columns: 15em 1fr;\t}}This feels really familiar, and goes along with what we’ve been doing with flexbox. Using grid with media queries, we only apply the layout changes when we’d like them to take effect.The last piece of this layout is the most exciting. Whereas we needed to perform quite a bit of management of the margin between elements with float layouts, this is no longer an issue. Grid gap takes care of this in a clean, simple way. Floats required adding margin to both sides, or removing it from the last child. Grid gap just gets to the point..two-column {\tdisplay: grid;\tgrid-template-columns: 15em 1fr;\tgrid-gap: 5em;}Here we’re telling grid to set the first column to 15em, then add a blank 5em gap, and then fill up the remaining space with the second element. A flexible or fixed value could be used here, just like with our column measurements.It’s incredibly exciting to have such a powerful layout engine baked into browsers, and I can’t wait to use these properties in production. With the appropriate fallbacks, those who wish to live on the edge can use CSS grid in production today. I’ll be writing about how that can be done next.",
            "content_html": "<p>CSS grid has been out in the wild for a little while now, and though I still have a little hesitation about putting it into production, it’s worth studying up on it. For all of the complexity that CSS grid brings, it’s incredibly simple to get started. Many of the basic layout tasks that I’ve attempted so far have only required a few properties to be specified on the parent element. Let’s look at a run-of-the-mill example.</p><h2 id=\"two-column-layout\">Two Column Layout</h2><p>One of the most common layouts, this used to require a pairing of floats and widths. Although <code class=\"highlighter-rouge\">calc()</code> introduced new possibilities for how widths could be calculated, it still wasn’t powerful (or easy) enough.</p><p>We begin by enabling grid on the parent element with a new value for the display property.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>From there, we need to decide the widths for each column. For a sidebar, we could set up a fixed or flexible width for it. Here, we give it a fixed width of <code class=\"highlighter-rouge\">15em</code>.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">15em</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>As you probably noticed, we’ve got a new measurement in use here. CSS grid adds the <code class=\"highlighter-rouge\">fr</code> unit, or fraction unit. It’s incredibly powerful, and here, using <code class=\"highlighter-rouge\">1fr</code>, it fills up the remaining space.</p><p>We can use the fraction unit to develop our own grid system of sorts, and the possibilities are unlimited. To create a percentage-based layout similar to what we’ve already done, we use two values in fractions.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">10</span><span class=\"n\">fr</span> <span class=\"m\">4</span><span class=\"n\">fr</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>If we’re on a fairly large screen, this layout probably looks great. However, we probably only want to apply it when the screen is wider than <code class=\"highlighter-rouge\">600px</code>, or <code class=\"highlighter-rouge\">37.5em</code>, or so.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"p\">:</span> <span class=\"m\">37.5em</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">15em</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>This feels really familiar, and goes along with what we’ve been doing with flexbox. Using grid with media queries, we only apply the layout changes when we’d like them to take effect.</p><p>The last piece of this layout is the most exciting. Whereas we needed to perform quite a bit of management of the margin between elements with float layouts, this is no longer an issue. Grid gap takes care of this in a clean, simple way. Floats required adding margin to both sides, or removing it from the last child. Grid gap just gets to the point.</p><div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.two-column</span> <span class=\"p\">{</span>\t<span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\t<span class=\"py\">grid-template-columns</span><span class=\"p\">:</span> <span class=\"m\">15em</span> <span class=\"m\">1</span><span class=\"n\">fr</span><span class=\"p\">;</span>\t<span class=\"py\">grid-gap</span><span class=\"p\">:</span> <span class=\"m\">5em</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Here we’re telling grid to set the first column to <code class=\"highlighter-rouge\">15em</code>, then add a blank <code class=\"highlighter-rouge\">5em</code> gap, and then fill up the remaining space with the second element. A flexible or fixed value could be used here, just like with our column measurements.</p><p>It’s incredibly exciting to have such a powerful layout engine baked into browsers, and I can’t wait to use these properties in production. With the appropriate fallbacks, those who wish to live on the edge can use CSS grid in production today. I’ll be writing about how that can be done next.</p>",
            "url": "http://localhost:4000/posts/getting-started-with-css-grid/",
            "date_published": "2017-11-06T00:00:00-06:00",
            "date_modified": "2017-11-06T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/buttons-need-declared-type/",
            "title": "Buttons need a declared type",
            "content_text": "When using a &lt;button&gt; element, the default type is submit. So, if you’re just going for a toggle button or other interactive functionality, type=\"button\" should be added.I was reading through an article in CSS Tricks from last November about HTML/SVG usage, and it notes that in their study of sites in the wild, about 30% of buttons did not have any attribute at all. Hate to admit, I think I’ve contributed to that figure.Of additional interest, buttons do not need role=\"button\" as it is implied. This is according to the HTML specification on buttons, where it notes that ARIA roles that match the implicit role of the element are not recommended. Further reading about this can be found at w3c.github.io/html/dom.html",
            "content_html": "<p>When using a <code class=\"highlighter-rouge\">&lt;button&gt;</code> element, the default type is <code class=\"highlighter-rouge\">submit</code>. So, if you’re just going for a toggle button or other interactive functionality, <code class=\"highlighter-rouge\">type=\"button\"</code> should be added.</p><p>I was reading through <a href=\"https://css-tricks.com/random-interesting-facts-htmlsvg-usage/#article-header-id-12\">an article in CSS Tricks</a> from last November about HTML/SVG usage, and it notes that in their study of sites in the wild, about 30% of buttons did not have any attribute at all. Hate to admit, I think I’ve contributed to that figure.</p><p>Of additional interest, buttons do not need <code class=\"highlighter-rouge\">role=\"button\"</code> as it is implied. This is according to the <a href=\"https://w3c.github.io/html/sec-forms.html#the-button-element\">HTML specification on buttons</a>, where it notes that ARIA roles that match the implicit role of the element are not recommended. Further reading about this can be found at <a href=\"https://w3c.github.io/html/dom.html#aria-authoring-requirements\">w3c.github.io/html/dom.html</a></p>",
            "url": "http://localhost:4000/posts/buttons-need-declared-type/",
            "date_published": "2017-10-26T00:00:00-05:00",
            "date_modified": "2017-10-26T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/append-theme-version-to-stylesheet/",
            "title": "Append theme version to stylesheet",
            "content_text": "With browsers getting more aggressive about holding on to local cache, it can be aggravating to hear that an end user doesn’t see updates, or they see something quite broken because a few styles are missing. This can be improved by appending a version number to the end of any stylesheet in your project.In WordPress, the version number can come straight from the theme. To get the theme’s current version, make a call to wp_get_theme():$theme_version = wp_get_theme()-&gt;get( 'Version' );This returns the theme’s current version and stores it in a variable. To use the $theme_version variable when enqueuing styles, add it like so:wp_enqueue_style( 'theme-style', get_stylesheet_uri(), array(), $theme_version );Of course, for this to be effective, you’ll want to bump your theme’s version any time you have a new release. Now, whether you’re developing or publicly releasing a new feature, you can rest easier knowing that your end users are seeing what you’re seeing.",
            "content_html": "<p>With browsers getting more aggressive about holding on to local cache, it can be aggravating to hear that an end user doesn’t see updates, or they see something quite broken because a few styles are missing. This can be improved by appending a version number to the end of any stylesheet in your project.</p><p>In WordPress, the version number can come straight from the theme. To get the theme’s current version, make a call to <code class=\"highlighter-rouge\">wp_get_theme()</code>:</p><figure class=\"highlight\"><pre><code class=\"language-php\" data-lang=\"php\"><span class=\"nv\">$theme_version</span> <span class=\"o\">=</span> <span class=\"nx\">wp_get_theme</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"na\">get</span><span class=\"p\">(</span> <span class=\"s1\">'Version'</span> <span class=\"p\">);</span></code></pre></figure><p>This returns the theme’s current version and stores it in a variable. To use the <code class=\"highlighter-rouge\">$theme_version</code> variable when enqueuing styles, add it like so:</p><figure class=\"highlight\"><pre><code class=\"language-php\" data-lang=\"php\"><span class=\"nx\">wp_enqueue_style</span><span class=\"p\">(</span> <span class=\"s1\">'theme-style'</span><span class=\"p\">,</span> <span class=\"nx\">get_stylesheet_uri</span><span class=\"p\">(),</span> <span class=\"k\">array</span><span class=\"p\">(),</span> <span class=\"nv\">$theme_version</span> <span class=\"p\">);</span></code></pre></figure><p>Of course, for this to be effective, you’ll want to bump your theme’s version any time you have a new release. Now, whether you’re developing or publicly releasing a new feature, you can rest easier knowing that your end users are seeing what you’re seeing.</p>",
            "url": "http://localhost:4000/posts/append-theme-version-to-stylesheet/",
            "date_published": "2017-09-25T00:00:00-05:00",
            "date_modified": "2017-09-25T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/explaining-accessible-modals/",
            "title": "Explaining accessible modals",
            "content_text": "Accessibility on the web is tricky, and modals are even trickier. Fortunately, there seem to be quite a few resources for getting there, one being Frend. It includes a component for an accessible modal that provides a small JavaScript library that hooks up to a modal and takes care of the rest. Only problem is that it’s a little too component-ized to understand what’s going on under the hood. The documentation says that you can just call var myModal = Frdialogmodal(); and you’re good to go. But what’s really happening, and how might we adapt it for our own use?Before I dig into this, I think it’s worth pointing out that “modal” is sort of a loose definition of what this will work for. In my current project, it’s less of a modal and more of a change of focus. In the Frend component, the main work that the JavaScript is doing is keeping the focus within the modal content while it is open and then putting the focus back where it was when the modal is closed. Someone who is tabbing through the site should be able to enter the context of the modal and then get back out of it when they’re ready. This works for modals or any event where you might be shifting context based on user input.Event bindingFirst things first, the display of a modal has to be triggered by an action taken by the user. Likely, that’s a click on a button. When a click event occurs, we want to attach an event listener that will listen for keydown events like so: document.addEventListener('keydown', modalTab);Collecting all focusable elementsNext up, if we’re going to be using the tab key, we need to find all of the elements that we want to be tabbed through. Essentially, we want to begin restricting focus states to a select group of elements that are inside the modal, and then loop through them as if the modal were a miniature webpage.We’re going to pass an array of all possible types of focusable elements into a function that will perform a querySelectorAll() within the context of the modal. Then we’ll end up with all of the elements to be tabbed through.Here’s an array containing all possible focusable elements:var focusableSelectors = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];Those are some pretty tricky selectors! For the most part, this will take care of just about anything you’d put in a modal, but you’ll want to make sure that this list matches up with reality.Once we know what types of elements could be focusable, we need to look inside of the modal content and gather up any element that matches. We can do that with the following:var modal = document.querySelector('.modal');var focusableElements = function() {   return [].slice.call( modal.querySelectorAll( focusableSelectors.join() ) );}With this function, if there are two anchor tags and a close button in the modal, an array with the two anchor links and button will be returned. This function will be used in the next step anytime the tab key is pressed.Handling tab keydownNow that the event listener is waiting for keydown events and we’ve got a list of all focusable elements, we can check to see if the user is using the tab key. This will be done within the modalTab() function, so let’s get that started.function modalTab(event) {It’s important to pass the event in to the function so that we can capture which key is being used. Our first check will be just that, through the following check:if (event.keyCode === 9) {The magic key code for the tab key is 9. When I first learned that keys were mapped to numbers, it seemed like something that could fall apart pretty easily, but it holds up! Tech!Creating a focus loopWe now move into controlling what happens when the first or last element is tabbed past. We want to drop the user’s focus state back on the first element if they get to the end of the modal and hit tab, and this should work in the inverse as well.The following code is still inside the modalTab() function, and inside the conditional tag we created above that’s checking to make sure the keyCode is 9.// Get the index of the currently focused element within the modalvar focusedIndex = focusableElements.indexOf(document.activeElement);// If the shift key is not in use, check to see if we're on the last elementif (!e.shiftKey &amp;&amp; focusedIndex === focusableElements.length - 1) {  // Focus first item within modal  focusableElements[0].focus();  e.preventDefault();// If the shift key is in use, we're going backwards, so check to see if we're on the first element} else if (e.shiftKey &amp;&amp; (focusedIndex === 0 || focusedIndex === -1)) {  // Focus last item within modal  focusableElements[focusableElements.length - 1].focus();  e.preventDefault();}We really don’t need to know what’s happening on the elements between the first and last element of the modal, their focus state can remain untouched by our script. We’re just waiting for the first or last.Removing event listener on closeWe really only want to listen for keydown events while the modal is open, so we’ll want to remove this event listener when the modal is closed. Since this could unexpectedly cause issues with other elements on the page, it’s safest to restrict our functions to just the modal. We’d remove the event listener like so: document.removeEventListener('keydown', modalTab);Additional considerationsBeyond handling the focus state, we’ll also want to manage state on a few other items. By default, the container of the modal should receive role=\"dialog\" as well as aria-hidden=\"true\". When the modal is opened, the aria-hidden attribute should be updated to false, and then set back to true  on close. This could be done with the following: modal.setAttribute('aria-hidden', true);This will vary based on what content is contained within the modal, but the first element should receive focus when the modal is opened. Whether this is just the first anchor tag or the modal container itself, the focus should be added to get the user started off properly.To learn more about how this works, the JS file for the Frend modal component is a great place to start. Much of what I went over in this post is contained within. View it on Github",
            "content_html": "<p>Accessibility on the web is tricky, and modals are even trickier. Fortunately, there seem to be quite a few resources for getting there, one being <a href=\"https://frend.co\">Frend</a>. It includes a component for an accessible modal that provides a small JavaScript library that hooks up to a modal and takes care of the rest. Only problem is that it’s a little too component-ized to understand what’s going on under the hood. The documentation says that you can just call <code class=\"highlighter-rouge\">var myModal = Frdialogmodal();</code> and you’re good to go. But what’s really happening, and how might we adapt it for our own use?</p><p>Before I dig into this, I think it’s worth pointing out that “modal” is sort of a loose definition of what this will work for. In my current project, it’s less of a modal and more of a change of focus. In the Frend component, the main work that the JavaScript is doing is keeping the focus within the modal content while it is open and then putting the focus back where it was when the modal is closed. Someone who is tabbing through the site should be able to enter the context of the modal and then get back out of it when they’re ready. This works for modals or any event where you might be shifting context based on user input.</p><h2 id=\"event-binding\">Event binding</h2><p>First things first, the display of a modal has to be triggered by an action taken by the user. Likely, that’s a click on a button. When a click event occurs, we want to attach an event listener that will listen for <code class=\"highlighter-rouge\">keydown</code> events like so: <code class=\"highlighter-rouge\">document.addEventListener('keydown', modalTab);</code></p><h2 id=\"collecting-all-focusable-elements\">Collecting all focusable elements</h2><p>Next up, if we’re going to be using the tab key, we need to find all of the elements that we want to be tabbed through. Essentially, we want to begin restricting focus states to a select group of elements that are inside the modal, and then loop through them as if the modal were a miniature webpage.</p><p>We’re going to pass an array of all possible types of focusable elements into a function that will perform a <code class=\"highlighter-rouge\">querySelectorAll()</code> within the context of the modal. Then we’ll end up with all of the elements to be tabbed through.</p><p>Here’s an array containing all possible focusable elements:</p><figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">focusableSelectors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a[href]'</span><span class=\"p\">,</span> <span class=\"s1\">'area[href]'</span><span class=\"p\">,</span> <span class=\"s1\">'input:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'select:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'textarea:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'button:not([disabled])'</span><span class=\"p\">,</span> <span class=\"s1\">'iframe'</span><span class=\"p\">,</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"s1\">'embed'</span><span class=\"p\">,</span> <span class=\"s1\">'[contenteditable]'</span><span class=\"p\">,</span> <span class=\"s1\">'[tabindex]:not([tabindex^=\"-\"])'</span><span class=\"p\">];</span></code></pre></figure><p>Those are some pretty tricky selectors! For the most part, this will take care of just about anything you’d put in a modal, but you’ll want to make sure that this list matches up with reality.</p><p>Once we know what types of elements could be focusable, we need to look inside of the modal content and gather up any element that matches. We can do that with the following:</p><figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">modal</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'.modal'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">focusableElements</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>   <span class=\"k\">return</span> <span class=\"p\">[].</span><span class=\"nx\">slice</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span> <span class=\"nx\">modal</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span> <span class=\"nx\">focusableSelectors</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></figure><p>With this function, if there are two anchor tags and a close button in the modal, an array with the two anchor links and button will be returned. This function will be used in the next step anytime the tab key is pressed.</p><h2 id=\"handling-tab-keydown\">Handling tab keydown</h2><p>Now that the event listener is waiting for <code class=\"highlighter-rouge\">keydown</code> events and we’ve got a list of all focusable elements, we can check to see if the user is using the tab key. This will be done within the <code class=\"highlighter-rouge\">modalTab()</code> function, so let’s get that started.</p><figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">function</span> <span class=\"nx\">modalTab</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span></code></pre></figure><p>It’s important to pass the <code class=\"highlighter-rouge\">event</code> in to the function so that we can capture which key is being used. Our first check will be just that, through the following check:</p><figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span></code></pre></figure><p>The magic key code for the tab key is <code class=\"highlighter-rouge\">9</code>. When I first learned that keys were mapped to numbers, it seemed like something that could fall apart pretty easily, but it holds up! Tech!</p><h2 id=\"creating-a-focus-loop\">Creating a focus loop</h2><p>We now move into controlling what happens when the first or last element is tabbed past. We want to drop the user’s focus state back on the first element if they get to the end of the modal and hit tab, and this should work in the inverse as well.</p><p>The following code is still inside the <code class=\"highlighter-rouge\">modalTab()</code> function, and inside the conditional tag we created above that’s checking to make sure the <code class=\"highlighter-rouge\">keyCode</code> is <code class=\"highlighter-rouge\">9</code>.</p><figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Get the index of the currently focused element within the modal</span><span class=\"kd\">var</span> <span class=\"nx\">focusedIndex</span> <span class=\"o\">=</span> <span class=\"nx\">focusableElements</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">activeElement</span><span class=\"p\">);</span><span class=\"c1\">// If the shift key is not in use, check to see if we're on the last element</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">shiftKey</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">focusedIndex</span> <span class=\"o\">===</span> <span class=\"nx\">focusableElements</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// Focus first item within modal</span>  <span class=\"nx\">focusableElements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">focus</span><span class=\"p\">();</span>  <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span><span class=\"c1\">// If the shift key is in use, we're going backwards, so check to see if we're on the first element</span><span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">shiftKey</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">focusedIndex</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"nx\">focusedIndex</span> <span class=\"o\">===</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"c1\">// Focus last item within modal</span>  <span class=\"nx\">focusableElements</span><span class=\"p\">[</span><span class=\"nx\">focusableElements</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">focus</span><span class=\"p\">();</span>  <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span><span class=\"p\">}</span></code></pre></figure><p>We really don’t need to know what’s happening on the elements between the first and last element of the modal, their focus state can remain untouched by our script. We’re just waiting for the first or last.</p><h2 id=\"removing-event-listener-on-close\">Removing event listener on close</h2><p>We really only want to listen for keydown events while the modal is open, so we’ll want to remove this event listener when the modal is closed. Since this could unexpectedly cause issues with other elements on the page, it’s safest to restrict our functions to just the modal. We’d remove the event listener like so: <code class=\"highlighter-rouge\">document.removeEventListener('keydown', modalTab);</code></p><h2 id=\"additional-considerations\">Additional considerations</h2><p>Beyond handling the focus state, we’ll also want to manage state on a few other items. By default, the container of the modal should receive <code class=\"highlighter-rouge\">role=\"dialog\"</code> as well as <code class=\"highlighter-rouge\">aria-hidden=\"true\"</code>. When the modal is opened, the <code class=\"highlighter-rouge\">aria-hidden</code> attribute should be updated to <code class=\"highlighter-rouge\">false</code>, and then set back to <code class=\"highlighter-rouge\">true</code>  on close. This could be done with the following: <code class=\"highlighter-rouge\">modal.setAttribute('aria-hidden', true);</code></p><p>This will vary based on what content is contained within the modal, but the first element should receive focus when the modal is opened. Whether this is just the first anchor tag or the modal container itself, the focus should be added to get the user started off properly.</p><p>To learn more about how this works, the JS file for the Frend modal component is a great place to start. Much of what I went over in this post is contained within. <a href=\"https://github.com/frend/frend.co/blob/gh-pages/_components/dialogmodal/dialogmodal.js\">View it on Github</a></p>",
            "url": "http://localhost:4000/posts/explaining-accessible-modals/",
            "date_published": "2017-08-18T00:00:00-05:00",
            "date_modified": "2017-08-18T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/omitting-optional-html-tags/",
            "title": "Omitting optional HTML tags",
            "content_text": "Someone mentioned somewhere at some point (life moves too fast) that the Google HTML/CSS Style Guide suggests that any unnecessary HTML tags can be omitted, such as the &lt;head&gt; and &lt;body&gt;. This was rather interesting to me, and so quintessential of the web. Even the things you think are so foundational may not be.I updated my Jekyll layout to remove optional tags, which means the page you’re currently viewing does not have a &lt;head&gt; tag or a &lt;body&gt; tag. The page source goes from the document type declaration right to a meta tag. The RSS link is followed immediately by the &lt;header&gt; tag.Of course, Google isn’t suggesting something new here, they’re simply following the HTML standard. The standard allows for the omission of quite a few other tags, such as the closing tag for &lt;li&gt; and &lt;p&gt;, among others. There are some conditionals around when this will work, though in most cases it seems feasible. Always good to check the spec.Since I’m using Jekyll to generate my site, I don’t have total control over the markup generated within the content of the site, but omitting a simple &lt;/li&gt; is neither here nor there. Still, interesting to consider that you can ship HTML without some of the most foundational tags.",
            "content_html": "<p>Someone mentioned somewhere at some point (life moves too fast) that the <a href=\"https://google.github.io/styleguide/htmlcssguide.html#Optional_Tags\">Google HTML/CSS Style Guide</a> suggests that any unnecessary HTML tags can be omitted, such as the <code class=\"highlighter-rouge\">&lt;head&gt;</code> and <code class=\"highlighter-rouge\">&lt;body&gt;</code>. This was rather interesting to me, and so quintessential of the web. Even the things you think are so foundational may not be.</p><p>I updated my Jekyll layout to remove optional tags, which means the page you’re currently viewing does not have a <code class=\"highlighter-rouge\">&lt;head&gt;</code> tag or a <code class=\"highlighter-rouge\">&lt;body&gt;</code> tag. The page source goes from the document type declaration right to a meta tag. The RSS link is followed immediately by the <code class=\"highlighter-rouge\">&lt;header&gt;</code> tag.</p><p>Of course, Google isn’t suggesting something new here, they’re simply following the HTML standard. The standard allows for the omission of quite a few other tags, such as the closing tag for <code class=\"highlighter-rouge\">&lt;li&gt;</code> and <code class=\"highlighter-rouge\">&lt;p&gt;</code>, among others. There are some conditionals around when this will work, though in most cases it seems feasible. Always good to <a href=\"https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-omission\">check the spec</a>.</p><p>Since I’m using Jekyll to generate my site, I don’t have total control over the markup generated within the content of the site, but omitting a simple <code class=\"highlighter-rouge\">&lt;/li&gt;</code> is neither here nor there. Still, interesting to consider that you can ship HTML without some of the most foundational tags.</p>",
            "url": "http://localhost:4000/posts/omitting-optional-html-tags/",
            "date_published": "2017-07-24T00:00:00-05:00",
            "date_modified": "2017-07-24T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/unregistering-widgets-in-wordpress/",
            "title": "Unregistering widgets in WordPress",
            "content_text": "If you’ve ever installed Jetpack, you’re probably familiar with widget overload. Sometimes it’s better to cut down on the number of widgets available to your users, both for the benefit of their cognitive load and just for the fact that they may never use some of them. Meta widget, anyone?Unregistering a widget is a fairly small bit of code, but getting all of the information you need can sometimes be the tricky part.Here is a function that hooks into the widgets_init action in WordPress, and in the function it calls unregister_widget() on the widget to remove, the meta widget in this case.function unregister_widgets() {  unregister_widget( 'WP_Meta' );}add_action( 'widgets_init', 'unregister_widgets' );Where do we know to get the class of the widget though? For all of the WordPress core widgets, you can reference the codex, where all of the widget names are listed. Each starts with WP_.What about widgets that come from other sources, such as a plugin or theme? That can take a little more work. The first and easiest way is to search the source code, and see if you can find where register_widget() is being called. In Sublime Text or Atom, you could perform a Find in Files for anywhere that register_widget appears in the project and grab the class name from there.If you don’t have the plugin or theme locally, you could also search the repository on GitHub. Opening the Jetpack repository, the search field in the header will perform searches only within the current repository, so a search for register_widget there will return the same results as if we had searched in a text editor.One last piece is adding a conditional to only unregister widgets if the plugin is actually active. It appears that unregister_widget fails gracefully if it can’t find the widget class, but it would be better to just ignore it entirely if the plugin or theme isn’t active. This might take a little investigation as well, but you can check to see if the main class of the plugin exists.if ( class_exists( 'Jetpack' ) ) {  unregister_widget( 'Jetpack_Gallery_Widget' );}If you’re unregistering a group of Jetpack widgets, adding this conditional will be much faster than checking for each widget individually.",
            "content_html": "<p>If you’ve ever installed Jetpack, you’re probably familiar with widget overload. Sometimes it’s better to cut down on the number of widgets available to your users, both for the benefit of their cognitive load and just for the fact that they may never use some of them. Meta widget, anyone?</p><p>Unregistering a widget is a fairly small bit of code, but getting all of the information you need can sometimes be the tricky part.</p><p>Here is a function that hooks into the <code class=\"highlighter-rouge\">widgets_init</code> action in WordPress, and in the function it calls <code class=\"highlighter-rouge\">unregister_widget()</code> on the widget to remove, the meta widget in this case.</p><pre><code class=\"language-php\">function unregister_widgets() {  unregister_widget( 'WP_Meta' );}add_action( 'widgets_init', 'unregister_widgets' );</code></pre><p>Where do we know to get the class of the widget though? For all of the WordPress core widgets, you can <a href=\"https://codex.wordpress.org/Function_Reference/unregister_widget\">reference the codex</a>, where all of the widget names are listed. Each starts with <code class=\"highlighter-rouge\">WP_</code>.</p><p>What about widgets that come from other sources, such as a plugin or theme? That can take a little more work. The first and easiest way is to search the source code, and see if you can find where <code class=\"highlighter-rouge\">register_widget()</code> is being called. In Sublime Text or Atom, you could perform a Find in Files for anywhere that <code class=\"highlighter-rouge\">register_widget</code> appears in the project and grab the class name from there.</p><p>If you don’t have the plugin or theme locally, you could also search the repository on GitHub. Opening the <a href=\"https://github.com/Automattic/Jetpack\">Jetpack repository</a>, the search field in the header will perform searches only within the current repository, so a search for <code class=\"highlighter-rouge\">register_widget</code> there will return the same results as if we had searched in a text editor.</p><p>One last piece is adding a conditional to only unregister widgets if the plugin is actually active. It appears that <code class=\"highlighter-rouge\">unregister_widget</code> fails gracefully if it can’t find the widget class, but it would be better to just ignore it entirely if the plugin or theme isn’t active. This might take a little investigation as well, but you can check to see if the main class of the plugin exists.</p><pre><code class=\"language-php\">if ( class_exists( 'Jetpack' ) ) {  unregister_widget( 'Jetpack_Gallery_Widget' );}</code></pre><p>If you’re unregistering a group of Jetpack widgets, adding this conditional will be much faster than checking for each widget individually.</p>",
            "url": "http://localhost:4000/posts/unregistering-widgets-in-wordpress/",
            "date_published": "2017-06-03T00:00:00-05:00",
            "date_modified": "2017-06-03T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/adding-ajax-search-to-wordpress/",
            "title": "Adding Ajax search to a WordPress theme",
            "content_text": "There are a few plugins that will add Ajax search for you, but what if you wanted to integrate it into your theme yourself for more control over functionality and appearance? Let’s see what we can do.I’ve broken out the functionality into separate files, which keeps this feature modular. We’ll be creating ajax-search.php and ajax-search.js.Before starting, there are a few things we need to do elsewhere first. The following will output the URL of the Ajax file that is part of WordPress core, and needs to be included in functions.php. We’ll use this in ajax-search.js to send requests for search results.wp_localize_script( 'ajax-search', 'ajaxurl', admin_url( 'admin-ajax.php' ) );You’ll want to customize the ajax-search bit to work with your naming structure. You’ll be less likely to run into conflicts if you use [theme-name]-ajax-search instead.Next, I’ve added a loading icon inside the search field to let users know that their request is being processed. I have a custom search-form.php defined in the theme that adds an animated SVG with a style property of display: none;. This ensures that the icon will only be show when we’re ready.Now, for creating the files. I’m going to start with ajax-search.php. This is where the template will be stored for the search results. Here we can control what is returned, add a thumbnail, excerpt, date, author, or simply return the title. There’s just one function in this file, and it attaches to the wp_ajax_ hook in WordPress.function ajax_search() {  // Get search term from search field  $search = sanitize_text_field( $_POST[ 'query' ] );    // Set up query using search string, limit to 8 results  $query = new WP_Query(    array(      'posts_per_page' =&gt; 8,      's' =&gt; $search    )  );    $output = '';    // Run search query  if ( $query-&gt;have_posts() ) {    while ( $query-&gt;have_posts() ) : $query-&gt;the_post();            /* Output a link to each result         This is where the post thumbnail, excerpt, or anything else could be added */      echo '&lt;a href=\"' . get_permalink() . '\"&gt;' . get_the_title() . '&lt;/a&gt;';        endwhile;                // If there is more than one page of results, add link to the full results page    if ( $query-&gt;max_num_pages &gt; 1 ) {      // We use urlencode() here to handle any spaces or odd characters in the search string      echo '&lt;a class=\"see-all-results\" href=\"' . get_site_url() . '?s=' . urlencode( $search ) . '\"&gt;View all results&lt;/a&gt;';    }      } else {        // There are no results, output a message    echo '&lt;p class=\"no-results\"&gt;No results&lt;/p&gt;';    }    // Reset query  wp_reset_query();    die();}/* We need to hook into both wp_ajax and wp_ajax_nopriv_ in order for   the search to work for both logged in and logged out users. */add_action( 'wp_ajax_ajax_search', 'ajax_search' );add_action( 'wp_ajax_nopriv_ajax_search', 'ajax_search' );The contents of ajax-search.php could be included inside of functions.php, but keeping it separate makes functions.php cleaner and easier to understand.Up next, let’s spend some time with the JavaScript to make it work. This example relies on jQuery, but could be reworked to use vanilla JavaScript. Essentially, we listen to the search field for changes. We’ll debounce the number of requests that can be made, but ensure that the user knows that we’re working nonetheless.jQuery(document).ready( function($) {  // Set up variables for each of the pertinent elements  var $searchWrap = $('.search-form'),      $searchField = $('.search-form .search-field'),      $loadingIcon = $('.search-form .loading'),      termExists = \"\";    // Debounce function from https://davidwalsh.name/javascript-debounce-function  function debounce(func, wait, immediate) {    var timeout;    return function() {      var context = this, args = arguments;      var later = function() {        timeout = null;        if (!immediate) func.apply(context, args);      };      var callNow = immediate &amp;&amp; !timeout;      clearTimeout(timeout);      timeout = setTimeout(later, wait);      if (callNow) func.apply(context, args);    };  };    // Add results container and disable autocomplete on search field  $searchWrap.append('&lt;div class=\"results\"&gt;&lt;/div&gt;');  var $searchResults = $('.search-form .results');  $searchField.attr('autocomplete', 'off');    // Perform search on keyup in search field, hide/show loading icon  $searchField.keyup( function() {    $loadingIcon.css('display', 'block');        // If the search field is not empty, perform the search function    if( $searchField.val() !== \"\" ) {      termExists = true;      doSearch();    } else {      termExists = false;      $searchResults.empty();      $loadingIcon.css('display', 'none');    }  });    // Make search Ajax request every 200 milliseconds, output results  var doSearch = debounce(function() {    var query = $searchField.val();    $.ajax({      type: 'POST',      url: ajaxurl, // ajaxurl comes from the localize_script we added to functions.php      data: {        action: 'ajax_search',        query: query,      },      success: function(result) {        if ( termExists ) {          // `result` here is what we've specified in ajax-search.php          $searchResults.html('' + result + '');        }      },      complete: function() {        // Whether or not results are returned, hide the loading icon once the request is complete        $loadingIcon.css('display', 'none');      }    });  }, 200);  });That just about does it. The last piece is styling for the results. You’re likely to have plenty of ideas of your own, so I’ll close this up here. If there’s anything I’ve missed or been a bit unclear about, direct a tweet to @samhermes.",
            "content_html": "<p>There are a few plugins that will add Ajax search for you, but what if you wanted to integrate it into your theme yourself for more control over functionality and appearance? Let’s see what we can do.</p><p>I’ve broken out the functionality into separate files, which keeps this feature modular. We’ll be creating <code class=\"highlighter-rouge\">ajax-search.php</code> and <code class=\"highlighter-rouge\">ajax-search.js</code>.</p><p>Before starting, there are a few things we need to do elsewhere first. The following will output the URL of the Ajax file that is part of WordPress core, and needs to be included in <code class=\"highlighter-rouge\">functions.php</code>. We’ll use this in <code class=\"highlighter-rouge\">ajax-search.js</code> to send requests for search results.</p><pre><code class=\"language-php\">wp_localize_script( 'ajax-search', 'ajaxurl', admin_url( 'admin-ajax.php' ) );</code></pre><p>You’ll want to customize the <code class=\"highlighter-rouge\">ajax-search</code> bit to work with your naming structure. You’ll be less likely to run into conflicts if you use <code class=\"highlighter-rouge\">[theme-name]-ajax-search</code> instead.</p><p>Next, I’ve added a loading icon inside the search field to let users know that their request is being processed. I have a custom <code class=\"highlighter-rouge\">search-form.php</code> defined in the theme that adds an animated SVG with a style property of <code class=\"highlighter-rouge\">display: none;</code>. This ensures that the icon will only be show when we’re ready.</p><p>Now, for creating the files. I’m going to start with <code class=\"highlighter-rouge\">ajax-search.php</code>. This is where the template will be stored for the search results. Here we can control what is returned, add a thumbnail, excerpt, date, author, or simply return the title. There’s just one function in this file, and it attaches to the <code class=\"highlighter-rouge\">wp_ajax_</code> hook in WordPress.</p><pre><code class=\"language-php\">function ajax_search() {  // Get search term from search field  $search = sanitize_text_field( $_POST[ 'query' ] );    // Set up query using search string, limit to 8 results  $query = new WP_Query(    array(      'posts_per_page' =&gt; 8,      's' =&gt; $search    )  );    $output = '';    // Run search query  if ( $query-&gt;have_posts() ) {    while ( $query-&gt;have_posts() ) : $query-&gt;the_post();            /* Output a link to each result         This is where the post thumbnail, excerpt, or anything else could be added */      echo '&lt;a href=\"' . get_permalink() . '\"&gt;' . get_the_title() . '&lt;/a&gt;';        endwhile;                // If there is more than one page of results, add link to the full results page    if ( $query-&gt;max_num_pages &gt; 1 ) {      // We use urlencode() here to handle any spaces or odd characters in the search string      echo '&lt;a class=\"see-all-results\" href=\"' . get_site_url() . '?s=' . urlencode( $search ) . '\"&gt;View all results&lt;/a&gt;';    }      } else {        // There are no results, output a message    echo '&lt;p class=\"no-results\"&gt;No results&lt;/p&gt;';    }    // Reset query  wp_reset_query();    die();}/* We need to hook into both wp_ajax and wp_ajax_nopriv_ in order for   the search to work for both logged in and logged out users. */add_action( 'wp_ajax_ajax_search', 'ajax_search' );add_action( 'wp_ajax_nopriv_ajax_search', 'ajax_search' );</code></pre><p>The contents of <code class=\"highlighter-rouge\">ajax-search.php</code> could be included inside of <code class=\"highlighter-rouge\">functions.php</code>, but keeping it separate makes <code class=\"highlighter-rouge\">functions.php</code> cleaner and easier to understand.</p><p>Up next, let’s spend some time with the JavaScript to make it work. This example relies on jQuery, but could be reworked to use vanilla JavaScript. Essentially, we listen to the search field for changes. We’ll debounce the number of requests that can be made, but ensure that the user knows that we’re working nonetheless.</p><pre><code class=\"language-javascript\">jQuery(document).ready( function($) {  // Set up variables for each of the pertinent elements  var $searchWrap = $('.search-form'),      $searchField = $('.search-form .search-field'),      $loadingIcon = $('.search-form .loading'),      termExists = \"\";    // Debounce function from https://davidwalsh.name/javascript-debounce-function  function debounce(func, wait, immediate) {    var timeout;    return function() {      var context = this, args = arguments;      var later = function() {        timeout = null;        if (!immediate) func.apply(context, args);      };      var callNow = immediate &amp;&amp; !timeout;      clearTimeout(timeout);      timeout = setTimeout(later, wait);      if (callNow) func.apply(context, args);    };  };    // Add results container and disable autocomplete on search field  $searchWrap.append('&lt;div class=\"results\"&gt;&lt;/div&gt;');  var $searchResults = $('.search-form .results');  $searchField.attr('autocomplete', 'off');    // Perform search on keyup in search field, hide/show loading icon  $searchField.keyup( function() {    $loadingIcon.css('display', 'block');        // If the search field is not empty, perform the search function    if( $searchField.val() !== \"\" ) {      termExists = true;      doSearch();    } else {      termExists = false;      $searchResults.empty();      $loadingIcon.css('display', 'none');    }  });    // Make search Ajax request every 200 milliseconds, output results  var doSearch = debounce(function() {    var query = $searchField.val();    $.ajax({      type: 'POST',      url: ajaxurl, // ajaxurl comes from the localize_script we added to functions.php      data: {        action: 'ajax_search',        query: query,      },      success: function(result) {        if ( termExists ) {          // `result` here is what we've specified in ajax-search.php          $searchResults.html('<div class=\"results-list\">' + result + '</div>');        }      },      complete: function() {        // Whether or not results are returned, hide the loading icon once the request is complete        $loadingIcon.css('display', 'none');      }    });  }, 200);  });</code></pre><p>That just about does it. The last piece is styling for the results. You’re likely to have plenty of ideas of your own, so I’ll close this up here. If there’s anything I’ve missed or been a bit unclear about, direct a tweet to <a href=\"https://twitter.com/samhermes\">@samhermes</a>.</p>",
            "url": "http://localhost:4000/posts/adding-ajax-search-to-wordpress/",
            "date_published": "2017-05-20T00:00:00-05:00",
            "date_modified": "2017-05-20T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/communicating-about-the-web/",
            "title": "Communicating about the web",
            "content_text": "The longer that I work in web development, the more time I spend thinking about the communication that surrounds the work I’m doing. How do I talk about what I’ve done? How do I best explain how to use a feature or tool? What happens when I’m no longer working on this project? The language that we use, whether we’re talking to another developer, a designer, or a user, is really important.For communicating with other developers, it just gets more and more important to be succinct. The fewer words I can use to explain something, the better. This is true in commit messages, code comments, and documentation. I know it’s important because I really appreciate it when others do it. It might take me a little more time to edit, but depending on how many people are involved, it can save a lot of others’ time.Slowly over time, I’ve been trying to cut out my use of the word ‘just’ and other similar terminology. Others have said this, but it’s unhelpful in that assumes that a process is easier than it may be for the reader. It subtly gives the writer the role of the expert, when it would be better to attempt to meet someone where they are. It’s something I’m working on.Beyond the day to day, I’m also challenged and interested in how to communicate to a larger, slightly undefined audience. In some cases, it’s hard to know who has or who will read what you’ve written. For on-boarding developers or users, how do I write broadly and generically while still being laser focused on the topic at hand? How do I write a commit or a pull request with enough information without taking up too much of my time? Or, how do I explain how to use a feature when my words could possibly be copied and shared with others?The web is more fun when everyone is included, and that includes everything about the web. The more we build, the more we have to keep others in mind. After all, you don’t know where your next users will come from.",
            "content_html": "<p>The longer that I work in web development, the more time I spend thinking about the communication that surrounds the work I’m doing. How do I talk about what I’ve done? How do I best explain how to use a feature or tool? What happens when I’m no longer working on this project? The language that we use, whether we’re talking to another developer, a designer, or a user, is really important.</p><p>For communicating with other developers, it just gets more and more important to be succinct. The fewer words I can use to explain something, the better. This is true in commit messages, code comments, and documentation. I know it’s important because I really appreciate it when others do it. It might take me a little more time to edit, but depending on how many people are involved, it can save a lot of others’ time.</p><p>Slowly over time, I’ve been trying to cut out my use of the word ‘just’ and other similar terminology. Others have said this, but it’s unhelpful in that assumes that a process is easier than it may be for the reader. It subtly gives the writer the role of the expert, when it would be better to attempt to meet someone where they are. It’s something I’m working on.</p><p>Beyond the day to day, I’m also challenged and interested in how to communicate to a larger, slightly undefined audience. In some cases, it’s hard to know who has or who will read what you’ve written. For on-boarding developers or users, how do I write broadly and generically while still being laser focused on the topic at hand? How do I write a commit or a pull request with enough information without taking up too much of my time? Or, how do I explain how to use a feature when my words could possibly be copied and shared with others?</p><p>The web is more fun when everyone is included, and that includes everything about the web. The more we build, the more we have to keep others in mind. After all, <a href=\"https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/\">you don’t know where your next users will come from</a>.</p>",
            "url": "http://localhost:4000/posts/communicating-about-the-web/",
            "date_published": "2017-05-06T00:00:00-05:00",
            "date_modified": "2017-05-06T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/next-posts-link-prev-posts-link-static-front-page/",
            "title": "Using next_posts_link() and prev_posts_link() on static front page",
            "content_text": "If you have a custom query of posts on a static front page in WordPress, adding pagination can be a confusing experience. The answer is fairly simple, if you’ve done it before. Prior to last week, I had not done it before, and I was very lost. Search results were driving me all kinds of places. Fortunately, you’ve landed here.The issue is that the paged query variable isn’t called paged on the homepage, but rather page. Both next_posts_link() and prev_posts_link() utilize the query variable, and a custom query is looking for the paged variable. To remedy this, you need to alter your query. In my specific case, the template partial could be used on a static front page or on any other page. Because of that, the following checks to see which is appropriate to use:global $paged;    if ( get_query_var( 'paged' ) ) {\t$paged = get_query_var( 'paged' );} elseif ( get_query_var( 'page' ) ) {\t$paged = get_query_var( 'page' );} else {\t$paged = 1;}Once the $paged variable has been properly set, both next_posts_link() and prev_posts_link() will work as expected.I’ll note that paginate_links() works without making the modification I’ve outlined, if that’s the pagination structure you’re looking for. In my case, it was a bit more than I needed.",
            "content_html": "<p>If you have a custom query of posts on a static front page in WordPress, adding pagination can be a confusing experience. The answer is fairly simple, if you’ve done it before. Prior to last week, I had not done it before, and I was very lost. Search results were driving me all kinds of places. Fortunately, you’ve landed here.</p><p>The issue is that the <code class=\"highlighter-rouge\">paged</code> query variable isn’t called <code class=\"highlighter-rouge\">paged</code> on the homepage, but rather <code class=\"highlighter-rouge\">page</code>. Both <code class=\"highlighter-rouge\">next_posts_link()</code> and <code class=\"highlighter-rouge\">prev_posts_link()</code> utilize the query variable, and a custom query is looking for the <code class=\"highlighter-rouge\">paged</code> variable. To remedy this, you need to alter your query. In my specific case, the template partial could be used on a static front page or on any other page. Because of that, the following checks to see which is appropriate to use:</p><pre><code class=\"language-php\">global $paged;    if ( get_query_var( 'paged' ) ) {\t$paged = get_query_var( 'paged' );} elseif ( get_query_var( 'page' ) ) {\t$paged = get_query_var( 'page' );} else {\t$paged = 1;}</code></pre><p>Once the <code class=\"highlighter-rouge\">$paged</code> variable has been properly set, both <code class=\"highlighter-rouge\">next_posts_link()</code> and <code class=\"highlighter-rouge\">prev_posts_link()</code> will work as expected.</p><p>I’ll note that <code class=\"highlighter-rouge\">paginate_links()</code> works without making the modification I’ve outlined, if that’s the pagination structure you’re looking for. In my case, it was a bit more than I needed.</p>",
            "url": "http://localhost:4000/posts/next-posts-link-prev-posts-link-static-front-page/",
            "date_published": "2017-04-24T00:00:00-05:00",
            "date_modified": "2017-04-24T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/we-dont-need-amp/",
            "title": "We don’t need AMP",
            "content_text": "Episode #248 of Shop Talk Show is all about AMP (accelerated mobile pages) and how the project relates to the web at large. After listening, I have some thoughts. It’s made fairly clear in the episode that AMP is a crutch used by publishers who have lost control of their website’s performance. AMP has a very tight set of constraints built into it that prioritize performance. Comparing it to a traditional website, it makes sense why it is so effective. The defeating part of it is that it doesn’t have to exist. We can make pages that are better than AMP on the web.Development teams have been fighting constraints as long as the web has existed, and sometimes performance just doesn’t win out. Now they’ve been presented with, essentially, an easy way out. Instead of reprioritizing performance internally, AMP can be used to make the case for performance, and it wins out because it puts you in a good place with Google. This isn’t a good for the long-term.The guests in the episode don’t seem to be able to defend the AMP project very well, and it’s a bit hard to get on board listening to the discussion. It reeks a bit of “business reasons,” which is never a good reason in itself to do something. The fact of the matter is, AMP doesn’t need to exist. What we should be doing is using AMP as a model to improve what we already have. We should be removing as much code as possible from our sites, simplifying the layout, and caching as much as we possibly can. The future of the web depends on it.Update 3/25/17: An excellent roundup of the debate over AMP was posted on CSS-Tricks just the other day, it’s at css-tricks.com/need-catch-amp-debate.",
            "content_html": "<p><a href=\"http://shoptalkshow.com/episodes/248-amp/\">Episode #248 of Shop Talk Show</a> is all about AMP (accelerated mobile pages) and how the project relates to the web at large. After listening, I have some thoughts. It’s made fairly clear in the episode that AMP is a crutch used by publishers who have lost control of their website’s performance. AMP has a very tight set of constraints built into it that prioritize performance. Comparing it to a traditional website, it makes sense why it is so effective. The defeating part of it is that it doesn’t have to exist. We can make pages that are better than AMP on the web.</p><p>Development teams have been fighting constraints as long as the web has existed, and sometimes performance just doesn’t win out. Now they’ve been presented with, essentially, an easy way out. Instead of reprioritizing performance internally, AMP can be used to make the case for performance, and it wins out because it puts you in a good place with Google. This isn’t a good for the long-term.</p><p>The guests in the episode don’t seem to be able to defend the AMP project very well, and it’s a bit hard to get on board listening to the discussion. It reeks a bit of “business reasons,” which is never a good reason in itself to do something. The fact of the matter is, AMP doesn’t need to exist. What we should be doing is using AMP as a model to improve what we already have. We should be removing as much code as possible from our sites, simplifying the layout, and caching as much as we possibly can. The future of the web depends on it.</p><p><strong>Update 3/25/17:</strong> An excellent roundup of the debate over AMP was posted on CSS-Tricks just the other day, it’s at <a href=\"https://css-tricks.com/need-catch-amp-debate/\">css-tricks.com/need-catch-amp-debate</a>.</p>",
            "url": "http://localhost:4000/posts/we-dont-need-amp/",
            "date_published": "2017-03-16T00:00:00-05:00",
            "date_modified": "2017-03-16T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/two-worlds-web-development/",
            "title": "The two worlds of web development",
            "content_text": "There’s a big divide in the web development community that doesn’t get discussed enough. It’s roughly the difference between those who develop sites for informational purposes and those who develop sites that are applications. In some ways, it’s the divide between front end and back end development. It’s a bit difficult to draw a line between the two worlds, but informational sites are usually those for organizations, businesses, government, etc., and applications are properties like Airbnb, Facebook, and Google Docs. Interactivity, such as filtering, liking, saving, editing, or sorting, is usually what takes it from informational to application. The way we talk about and teach web development often mixes these two or makes no distinction.There are fundamental differences in the way we approach development in the two worlds. I’ve often gotten caught in this myself. Developing CSS for a web application is infinitely more complex than developing CSS for a static site mostly consisting of pages. Typically, if a project has a small team of developers working on it, CSS naming techniques such as BEM or OOCSS are not necessary. In fact, they are likely adding undue complexity and bloat to the site. In addition, a future developer would need to be briefed on how CSS works in that specific project.The same problem exists with JavaScript frameworks. An informational site rarely calls for a framework, and only sometimes calls for jQuery or another library. To develop an informational site using React, we’ve introduced a great deal of complexity that will require a level of maintenance that likely outweighs the perceived benefits. React makes sense for those sites that absolutely call for it, where we need to break apart each and every piece of a page into small, maintainable components. In addition, for someone new to web development, it may seem like React is required knowledge. We talk about it often, making it seem like a core piece of the web. In reality, it’s not. It’s simply the thing that there is a lot to learn about at the moment.Many of the foremost developers working in our industry are no longer solving problems for information-based sites. The pressing issues are how to handle a site when there are an innumerable amount of views and states, from all of the different ways to view a single post, photo, or conversation. And what about these views at each breakpoint? What if the user is not logged in? On top of that, how do we handle small updates with a team of 30 developers and keep everyone in sync? Many of the articles that get written and shared are answers to these big problems. While it’s fantastic to be aware of this work, it would be better if we had a bit of context before adapting it for ourselves. At the very least, we should take some time to consider whether or not the practices being put forth are appropriate for our world.",
            "content_html": "<p>There’s a big divide in the web development community that doesn’t get discussed enough. It’s roughly the difference between those who develop sites for informational purposes and those who develop sites that are applications. In some ways, it’s the divide between front end and back end development. It’s a bit difficult to draw a line between the two worlds, but informational sites are usually those for organizations, businesses, government, etc., and applications are properties like Airbnb, Facebook, and Google Docs. Interactivity, such as filtering, liking, saving, editing, or sorting, is usually what takes it from informational to application. The way we talk about and teach web development often mixes these two or makes no distinction.</p><p>There are fundamental differences in the way we approach development in the two worlds. I’ve often gotten caught in this myself. Developing CSS for a web application is infinitely more complex than developing CSS for a static site mostly consisting of pages. Typically, if a project has a small team of developers working on it, CSS naming techniques such as BEM or OOCSS are not necessary. In fact, they are likely adding undue complexity and bloat to the site. In addition, a future developer would need to be briefed on how CSS works in that specific project.</p><p>The same problem exists with JavaScript frameworks. An informational site rarely calls for a framework, and only sometimes calls for jQuery or another library. To develop an informational site using React, we’ve introduced a great deal of complexity that will require a level of maintenance that likely outweighs the perceived benefits. React makes sense for those sites that absolutely call for it, where we need to break apart each and every piece of a page into small, maintainable components. In addition, for someone new to web development, it may seem like React is required knowledge. We talk about it often, making it seem like a core piece of the web. In reality, it’s not. It’s simply the thing that there is a lot to learn about at the moment.</p><p>Many of the foremost developers working in our industry are no longer solving problems for information-based sites. The pressing issues are how to handle a site when there are an innumerable amount of views and states, from all of the different ways to view a single post, photo, or conversation. And what about these views at each breakpoint? What if the user is not logged in? On top of that, how do we handle small updates with a team of 30 developers and keep everyone in sync? Many of the articles that get written and shared are answers to these big problems. While it’s fantastic to be aware of this work, it would be better if we had a bit of context before adapting it for ourselves. At the very least, we should take some time to consider whether or not the practices being put forth are appropriate for our world.</p>",
            "url": "http://localhost:4000/posts/two-worlds-web-development/",
            "date_published": "2017-03-13T00:00:00-05:00",
            "date_modified": "2017-03-13T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/the-long-game-of-web-development/",
            "title": "The long game of web development",
            "content_text": "I recently finished reading The World Beyond Your Head by Matthew B. Crawford, and in the book he speaks of observing the individuals working as organ builders. He tells of the slowness of the process, much done by hand, then spends a bit of time musing on the long game of organ building. In it, one must respect the work of the person who came before, and also think of the person who will be maintaining the organ, and learning from their work in the future.Throughout, I couldn’t stop myself from paralleling organ building with web development, as I am wont to do. Web development depends so heavily on the past and the future, both respecting the standards and best practices that came before, and looking to the future and working in a way that will allow for flexibility down the line. Compared to building an organ, all of this is happening in a heavily compressed amount of time.In making the parallel, and taking it a little further, I was incredibly inspired by the following, taken straight from the book:“The preparation—getting the cutups right, getting them straight, manipulating the windway sizes and the toe holes—you could train a monkey to do that sort of thing. Just give them the list and they do it. If that’s done really really well, that’s ninety-seven percent of the work. After that ninety-seven percent is finished, the pipe will make a sound, it’ll play. Getting it to play beautifully, that’s the last three percent. And that’s where I’d like to say the artistic integrity of the voicer is put to use, and it’s at that point where the good voicer who has done really well preparing the pipes can take all the math and all the science, if they so desire, and you can start to throw some of that out the window. Now we’re not in the science book anymore, we’re not studying the math, now we’re making music.”It’s impossible to take web development seriously without great attention to the design, and design is music. The organ builders are involved in a tedious operation that ultimately results in music. Web developers spend months preparing a site the results in design. It’s design that hits the screen, not the development. No matter what you did in development, does it create music?Maybe the numbers all add up, they make sense, they’ve been engineered to perfection. Is the website a technical feat, it’s perfectly functional, but it just doesn’t seem to have a point of view? It’s easy to get caught up in the engineering of a website so much that the product of all that work doesn’t present itself as an emotional experience. And isn’t that what we’re doing on the web? If we were to throw emotion and perspective and impact out the window, we wouldn’t have much use for CSS. Why would we get halfway there and then give up when we’re so close?I urge you to spend that last 3 percent, and rebel. Go against the numbers, use your gut. Make something that feels like music. Make something that will inform the future.",
            "content_html": "<p>I recently finished reading <em>The World Beyond Your Head</em> by Matthew B. Crawford, and in the book he speaks of observing the individuals working as organ builders. He tells of the slowness of the process, much done by hand, then spends a bit of time musing on the long game of organ building. In it, one must respect the work of the person who came before, and also think of the person who will be maintaining the organ, and learning from their work in the future.</p><p>Throughout, I couldn’t stop myself from paralleling organ building with web development, as I am wont to do. Web development depends so heavily on the past and the future, both respecting the standards and best practices that came before, and looking to the future and working in a way that will allow for flexibility down the line. Compared to building an organ, all of this is happening in a heavily compressed amount of time.</p><p>In making the parallel, and taking it a little further, I was incredibly inspired by the following, taken straight from the book:</p><p>“The preparation—getting the cutups right, getting them straight, manipulating the windway sizes and the toe holes—you could train a monkey to do that sort of thing. Just give them the list and they do it. If that’s done really really well, that’s ninety-seven percent of the work. After that ninety-seven percent is finished, the pipe will make a sound, it’ll play. Getting it to play beautifully, that’s the last three percent. And that’s where I’d like to say the artistic integrity of the voicer is put to use, and it’s at that point where the good voicer who has done really well preparing the pipes can take all the math and all the science, if they so desire, and you can start to throw some of that out the window. Now we’re not in the science book anymore, we’re not studying the math, now we’re making music.”</p><p>It’s impossible to take web development seriously without great attention to the design, and design is music. The organ builders are involved in a tedious operation that ultimately results in music. Web developers spend months preparing a site the results in design. It’s design that hits the screen, not the development. No matter what you did in development, does it create music?</p><p>Maybe the numbers all add up, they make sense, they’ve been engineered to perfection. Is the website a technical feat, it’s perfectly functional, but it just doesn’t seem to have a point of view? It’s easy to get caught up in the engineering of a website so much that the product of all that work doesn’t present itself as an emotional experience. And isn’t that what we’re doing on the web? If we were to throw emotion and perspective and impact out the window, we wouldn’t have much use for CSS. Why would we get halfway there and then give up when we’re so close?</p><p>I urge you to spend that last 3 percent, and rebel. Go against the numbers, use your gut. Make something that feels like music. Make something that will inform the future.</p>",
            "url": "http://localhost:4000/posts/the-long-game-of-web-development/",
            "date_published": "2017-01-01T00:00:00-06:00",
            "date_modified": "2017-01-01T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/high-density-screens-web-performance/",
            "title": "High density screens and web performance",
            "content_text": "High density screens and the web are at odds. On one side, we want sites to look as crisp as possible, no matter where they are being viewed, but on the other hand, performance is incredibly important. Actually, most important.Say that we begin preparing images for 2x devices. We serve up images that are four times bigger in file size, and they look great on a Retina MacBook Pro. That’s great. But, look at it on a 5K iMac, and we’re essentially back to square one. Also, we forgot to ask, but did that MacBook Pro user want to download an image that was four times bigger? Maybe they were on a slow connection and did not really care to. Should we be making those decisions for them at this point? I think we should be waiting for browsers to get smarter about this.Currently, my goal is to prepare everything, except for photos, for any pixel density. I think that by leaving photos at or slightly above their display size, it optimizes for web performance. Photos are the hardest to tell if they are not at the correct pixel density. If there is text in an image, it should be served up in higher density. Otherwise, 1x is good enough for now.I think sites are in good shape if they convert all remaining graphical elements to vector, including interface controls. If you can do it in a vector graphic, it’s ready for the future. Right now, the support for SVG is fantastic, and they are fairly performant. I think they are what I am most excited about on the web at the moment.",
            "content_html": "<p>High density screens and the web are at odds. On one side, we want sites to look as crisp as possible, no matter where they are being viewed, but on the other hand, performance is incredibly important. Actually, most important.</p><p>Say that we begin preparing images for 2x devices. We serve up images that are four times bigger in file size, and they look great on a Retina MacBook Pro. That’s great. But, look at it on a 5K iMac, and we’re essentially back to square one. Also, we forgot to ask, but did that MacBook Pro user want to download an image that was four times bigger? Maybe they were on a slow connection and did not really care to. Should we be making those decisions for them at this point? I think we should be waiting for browsers to get smarter about this.</p><p>Currently, my goal is to prepare everything, except for photos, for any pixel density. I think that by leaving photos at or slightly above their display size, it optimizes for web performance. Photos are the hardest to tell if they are not at the correct pixel density. If there is text in an image, it should be served up in higher density. Otherwise, 1x is good enough for now.</p><p>I think sites are in good shape if they convert all remaining graphical elements to vector, including interface controls. If you can do it in a vector graphic, it’s ready for the future. Right now, the support for SVG is fantastic, and they are fairly performant. I think they are what I am most excited about on the web at the moment.</p>",
            "url": "http://localhost:4000/posts/high-density-screens-web-performance/",
            "date_published": "2016-12-05T00:00:00-06:00",
            "date_modified": "2016-12-05T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/how-to-configure-sticky-header-to-prevent-page-jump/",
            "title": "How to configure a sticky header to prevent page jump",
            "content_text": "As I’ve been out browsing the web lately, I’ve come across quite a few sticky headers that are implemented in a way that causes the page to jump up as scrolling begins. They are statically positioned at the top of the page, and then convert to fixed position when the page is scrolled down to a certain point. That works well, except removing an element from its position in the page leaves a gap, and that gap will close immediately after the element is removed, causing the page to jump up.Fortunately, the fix is simple and straightforward. We must simply fill the gap left by a sticky header. We can fill it in a number of ways, a few of which I will detail now.Apply padding to the top or bottom of the nearest elementThis works well if you have an stable environment in which to do it. If the header is the same across the entire site, you can be certain that this will always give you the desired outcome. Right next to the JavaScript that you are using to change the positioning of the header, just grab a calculation of the current height of the sticky element and apply that value as top or bottom padding to the nearest element. dusts off hands, walks awayvar navHeight = document.getElementById('site-header').offsetHeight,\tpage = document.getElementById('page');page.style.paddingTop = navHeight + 'px';Keep in mind that .offsetHeight will include padding and border, but not margin.Add an empty &lt;div&gt; after the sticky headerThis method is used by Stickyfill, which I’ve written about before. This method is a little more flexible if you’re looking to make multiple items sticky or if you aren’t sure what elements will be reliably above or below the header. Rather than reinventing a wheel, add Stickyfill to your project and follow its implementation. It does an excellent job and won’t lead to issues with page jump.",
            "content_html": "<p>As I’ve been out browsing the web lately, I’ve come across quite a few sticky headers that are implemented in a way that causes the page to jump up as scrolling begins. They are statically positioned at the top of the page, and then convert to fixed position when the page is scrolled down to a certain point. That works well, except removing an element from its position in the page leaves a gap, and that gap will close immediately after the element is removed, causing the page to jump up.</p><p>Fortunately, the fix is simple and straightforward. We must simply fill the gap left by a sticky header. We can fill it in a number of ways, a few of which I will detail now.</p><h3 id=\"apply-padding-to-the-top-or-bottom-of-the-nearest-element\">Apply padding to the top or bottom of the nearest element</h3><p>This works well if you have an stable environment in which to do it. If the header is the same across the entire site, you can be certain that this will always give you the desired outcome. Right next to the JavaScript that you are using to change the positioning of the header, just grab a calculation of the current height of the sticky element and apply that value as top or bottom padding to the nearest element. <em>dusts off hands, walks away</em></p><pre><code class=\"language-javascript\">var navHeight = document.getElementById('site-header').offsetHeight,\tpage = document.getElementById('page');page.style.paddingTop = navHeight + 'px';</code></pre><p>Keep in mind that <code class=\"highlighter-rouge\">.offsetHeight</code> will include padding and border, but not margin.</p><h3 id=\"add-an-empty-div-after-the-sticky-header\">Add an empty <code class=\"highlighter-rouge\">&lt;div&gt;</code> after the sticky header</h3><p>This method is used by Stickyfill, which I’ve written about before. This method is a little more flexible if you’re looking to make multiple items sticky or if you aren’t sure what elements will be reliably above or below the header. Rather than reinventing a wheel, add Stickyfill to your project and follow its implementation. It does an excellent job and won’t lead to issues with page jump.</p>",
            "url": "http://localhost:4000/posts/how-to-configure-sticky-header-to-prevent-page-jump/",
            "date_published": "2016-11-10T00:00:00-06:00",
            "date_modified": "2016-11-10T00:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/preparing-svg-for-the-web/",
            "title": "Preparing SVG for the web",
            "content_text": "I used to be really scared of using SVG, and now I’m just a little bit scared. I think the scary part is that you can easily see the mess inside. It’s all right there, open to edit and optimize. I’ve been working with SVG for a while now, and I’ve come to rest on what I’ve found to be the best way to prepare them for the web. As they are complex, these may not be the best in each and every case, but this is what works for me.Saving from IllustratorI followed the save dialog example given in the CSS Tricks article on using SVG for a while before I got comfortable with it. The article doesn’t get into details of the options, so let me step through those. You’ll have to toggle the ‘More Options’ button to get to all of these.  SVG ProfileSet this to SVG 1.1, which is the current supported version in modern browsers.  CSS PropertiesThere’s not a big difference between using a style element, or applying presentation attributes, but I like to use presentation attributes. It makes the resulting document cleaner, and doesn’t muddy it up with classes. We already have enough classes. If you’re going to inline the SVG and use CSS to add additional styles, then classes are the way to go. For static images, presentation attributes make the most sense to me.  Decimal PlacesYou’ll want to adjust the amount of decimals on an image by image basis, as some images will break down if you use too few, but it’s always better for performance if you use fewer. I like to get down to about 1 or 2 if possible.  CheckboxesI hate to generalize, but if there’s a checkbox with a check in it, uncheck it. We don’t want to preserve editing capabilities, include slicing data or XMP, or make it responsive.Much of this I was able to verify using an incredibly helpful answer given on Stack Overflow. It details even further the reasons behind settings, and talks about fonts and images, both of which don’t really seem to belong inside of an SVG.Once the SVG has been saved from Illustrator, further optimization is necessary. Illustrator includes a generator comment inside the SVG, and does not do any minimization.Optimizing for the webIllustrator gives you a big glob of stuff that you do not need, or want to send down the pipe. SVG is already a little heavier than a PNG anyway, depending, so it’s important to make it as slim as possible.I use SVGO on the command line to optimize all SVGs. It works great, and I’ll give it credit for warming me up to the command line in general. You just type svgo, a space, drag and drop the file onto the terminal window, and hit enter. Done. It will tell you what percentage it has shaved off, which always feels awesome. There is also a web interface, created by Jake Archibald, that will perform the same tasks. It’s accessible at https://jakearchibald.github.io/svgomg.A few things you’ll want to look out for:  Make sure that the height and width are set inside the SVG, not just in CSS. This improves compatibility across browsers. Can I use reports an issue in IE 9–11 where SVGs don’t scale properly without height, width, viewBox, and CSS rules specified, and I’ve had an SVG without height and width collapse to about 3px tall on an older Android device.  It’s best if the viewBox attribute starts with 0 0, followed by the width and height of the graphic. This puts the origin of the graphic at the natural origin and matches the viewport to the height and width. A fantastic, thorough explanation of this has been written by Sara Soueidan at https://sarasoueidan.com/blog/svg-coordinate-systems.",
            "content_html": "<p>I used to be really scared of using SVG, and now I’m just a little bit scared. I think the scary part is that you can easily see the mess inside. It’s all right there, open to edit and optimize. I’ve been working with SVG for a while now, and I’ve come to rest on what I’ve found to be the best way to prepare them for the web. As they are complex, these may not be the best in each and every case, but this is what works for me.</p><h3 id=\"saving-from-illustrator\">Saving from Illustrator</h3><p>I followed the save dialog example given in the <a href=\"https://css-tricks.com/using-svg/\">CSS Tricks article on using SVG</a> for a while before I got comfortable with it. The article doesn’t get into details of the options, so let me step through those. You’ll have to toggle the ‘More Options’ button to get to all of these.</p><ul>  <li><strong>SVG Profile</strong><br />Set this to SVG 1.1, which is the current supported version in modern browsers.</li>  <li><strong>CSS Properties</strong><br />There’s not a big difference between using a style element, or applying presentation attributes, but I like to use presentation attributes. It makes the resulting document cleaner, and doesn’t muddy it up with classes. We already have enough classes. If you’re going to inline the SVG and use CSS to add additional styles, then classes are the way to go. For static images, presentation attributes make the most sense to me.</li>  <li><strong>Decimal Places</strong><br />You’ll want to adjust the amount of decimals on an image by image basis, as some images will break down if you use too few, but it’s always better for performance if you use fewer. I like to get down to about 1 or 2 if possible.</li>  <li><strong>Checkboxes</strong><br />I hate to generalize, but if there’s a checkbox with a check in it, uncheck it. We don’t want to preserve editing capabilities, include slicing data or XMP, or make it responsive.</li></ul><p>Much of this I was able to verify using an <a href=\"http://stackoverflow.com/questions/13236365/optimal-settings-for-exporting-svgs-for-the-web-from-illustrator\">incredibly helpful answer given on Stack Overflow</a>. It details even further the reasons behind settings, and talks about fonts and images, both of which don’t really seem to belong inside of an SVG.</p><p>Once the SVG has been saved from Illustrator, further optimization is necessary. Illustrator includes a generator comment inside the SVG, and does not do any minimization.</p><h3 id=\"optimizing-for-the-web\">Optimizing for the web</h3><p>Illustrator gives you a big glob of stuff that you do not need, or want to send down the pipe. SVG is already a little heavier than a PNG anyway, depending, so it’s important to make it as slim as possible.</p><p>I use SVGO on the command line to optimize all SVGs. It works great, and I’ll give it credit for warming me up to the command line in general. You just type <code class=\"highlighter-rouge\">svgo</code>, a space, drag and drop the file onto the terminal window, and hit enter. Done. It will tell you what percentage it has shaved off, which always feels awesome. There is also a web interface, created by Jake Archibald, that will perform the same tasks. It’s accessible at <a href=\"https://jakearchibald.github.io/svgomg\">https://jakearchibald.github.io/svgomg</a>.</p><h4 id=\"a-few-things-youll-want-to-look-out-for\">A few things you’ll want to look out for:</h4><ul>  <li>Make sure that the height and width are set inside the SVG, not just in CSS. This improves compatibility across browsers. Can I use reports an issue in IE 9–11 where SVGs don’t scale properly without height, width, viewBox, and CSS rules specified, and I’ve had an SVG without height and width collapse to about 3px tall on an older Android device.</li>  <li>It’s best if the viewBox attribute starts with <code class=\"highlighter-rouge\">0 0</code>, followed by the width and height of the graphic. This puts the origin of the graphic at the natural origin and matches the viewport to the height and width. A fantastic, thorough explanation of this has been written by Sara Soueidan at <a href=\"https://sarasoueidan.com/blog/svg-coordinate-systems\">https://sarasoueidan.com/blog/svg-coordinate-systems</a>.</li></ul>",
            "url": "http://localhost:4000/posts/preparing-svg-for-the-web/",
            "date_published": "2016-09-14T00:00:00-05:00",
            "date_modified": "2016-09-14T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/adding-syntax-highlighting-to-code/",
            "title": "Adding syntax highlighting to code",
            "content_text": "When I started working on the last iteration of my site, I knew I was going to need to figure out how to display code snippets. I considered using Github Gists or Codepen, but they both seemed to be a bit overkill. Also, I wanted control over the appearance and formatting.If I wasn’t going to be embedding the code, that meant I would need to add it directly to the post, wrap it in &lt;pre&gt; tags, and style it. I could handle the first two steps, but needed help styling it. There are a number of JavaScript libraries that will apply syntax highlighting to your code, but I landed on Prism.js. It was the lightest option, and was the easiest to tweak the styles of. I am using the Okaidia theme and added PHP to the list of default languages.Since I’m using Jekyll to build my site, I wasn’t sure how to conditionally include Prism only on the posts I’m using code snippets in. Using an article by Matt Gemmell, I added YAML front matter that specified the name of the JavaScript file to include.custom_js: prismThen, in the footer, I added a for loop that added a script tag for each javascript file included.{% if page.custom_js %}  {% for js_file in page.custom_js %}&lt;script src='/js/{{ js_file }}.js' type=\"text/javascript\"&gt;&lt;/script&gt;  {% endfor %}{% endif %}Prism comes with the appropriate styles bundled with it, which I just copied and included in my main stylesheet, tweaking them slightly.With Prism running on the page, all that’s needed to properly activate it is the appropriate class for the language of the code snippet. For the above snippet, I added class=\"language-markup\" to the &lt;code&gt;  element to add the appropriate highlighting. Now when making a new post, I just need to include the YAML front matter and add a class, and that’s it!",
            "content_html": "<p>When I started working on the last iteration of my site, I knew I was going to need to figure out how to display code snippets. I considered using Github Gists or Codepen, but they both seemed to be a bit overkill. Also, I wanted control over the appearance and formatting.</p><p>If I wasn’t going to be embedding the code, that meant I would need to add it directly to the post, wrap it in <code class=\"highlighter-rouge\">&lt;pre&gt;</code> tags, and style it. I could handle the first two steps, but needed help styling it. There are a number of JavaScript libraries that will apply syntax highlighting to your code, but I landed on <a href=\"http://prismjs.com\">Prism.js</a>. It was the lightest option, and was the easiest to tweak the styles of. I am using the Okaidia theme and added PHP to the list of default languages.</p><p>Since I’m using Jekyll to build my site, I wasn’t sure how to conditionally include Prism only on the posts I’m using code snippets in. Using an <a href=\"http://mattgemmell.com/page-specific-assets-with-jekyll/\">article by Matt Gemmell</a>, I added YAML front matter that specified the name of the JavaScript file to include.</p><pre><code class=\"language-markup\">custom_js: prism</code></pre><p>Then, in the footer, I added a <code class=\"highlighter-rouge\">for</code> loop that added a script tag for each javascript file included.</p><pre><code class=\"language-markup\">{% if page.custom_js %}  {% for js_file in page.custom_js %}&lt;script src='/js/{{ js_file }}.js' type=\"text/javascript\"&gt;&lt;/script&gt;  {% endfor %}{% endif %}</code></pre><p>Prism comes with the appropriate styles bundled with it, which I just copied and included in my main stylesheet, tweaking them slightly.</p><p>With Prism running on the page, all that’s needed to properly activate it is the appropriate class for the language of the code snippet. For the above snippet, I added <code class=\"highlighter-rouge\">class=\"language-markup\"</code> to the <code class=\"highlighter-rouge\">&lt;code&gt;</code>  element to add the appropriate highlighting. Now when making a new post, I just need to include the YAML front matter and add a class, and that’s it!</p>",
            "url": "http://localhost:4000/posts/adding-syntax-highlighting-to-code/",
            "date_published": "2016-08-25T00:00:00-05:00",
            "date_modified": "2016-08-25T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/what-changes-on-hover-should-be-actionable/",
            "title": "What changes on hover should be actionable",
            "content_text": "This falls clearly in the realm of opinion, but I thought I’d share my thoughts anyway. If an item has a hover state, that hover state should highlight the part of the item that an action can be taken on. To illustrate this, I’ve created an example card. When hovering over the card, an outline appears. However, only the link at the bottom is actionable.      Porano Pasta    Fast Casual Italian    Visit Site  Hover states are becoming less and less important, but I still feel that this requires some consideration. I think that anything that changes when you hover over it should be one link. If there are multiple links within the element, then there should be no hover effect applied. Again, the card example, but with the link covering the entire element.            Porano Pasta      Fast Casual Italian      Visit Site      Usually, as a page is navigated, the hover states are what indicates that something is actionable, so keeping this behavior will provide a more cohesive experience.",
            "content_html": "<p>This falls clearly in the realm of opinion, but I thought I’d share my thoughts anyway. If an item has a hover state, that hover state should highlight the part of the item that an action can be taken on. To illustrate this, I’ve created an example card. When hovering over the card, an outline appears. However, only the link at the bottom is actionable.</p><div class=\"card-container\">  <div class=\"card\">    <h1>Porano Pasta</h1>    <p>Fast Casual Italian</p>    <a href=\"http://poranopasta.com\">Visit Site</a>  </div></div><p>Hover states are becoming less and less important, but I still feel that this requires some consideration. I think that anything that changes when you hover over it should be one link. If there are multiple links within the element, then there should be no hover effect applied. Again, the card example, but with the link covering the entire element.</p><div class=\"card-container\">  <a href=\"http://poranopasta.com\">    <div class=\"card\">      <h1>Porano Pasta</h1>      <p>Fast Casual Italian</p>      <p class=\"action\">Visit Site</p>    </div>  </a></div><p>Usually, as a page is navigated, the hover states are what indicates that something is actionable, so keeping this behavior will provide a more cohesive experience.</p>",
            "url": "http://localhost:4000/posts/what-changes-on-hover-should-be-actionable/",
            "date_published": "2016-08-07T00:00:00-05:00",
            "date_modified": "2016-08-07T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/sticky-elements-with-stickyfill/",
            "title": "Sticky elements with Stickyfill",
            "content_text": "Sticky elements seem to be everywhere, following you wherever you scroll. There are many ways to implement sticky positioning, but as support comes to browsers natively, the best way right now is to use a polyfill. This is where Stickyfill comes in. If position: sticky is not supported, it mimics the behavior. As soon as support comes to all major browsers, the polyfill can be removed. At the moment, it is supported in Firefox and Safari, and is behind a flag in Chrome and Opera. Considering that it is most commonly used on larger screens, the support is strong.You can download Stickyfill on Github. There is a demo and a few use cases provided. I’m sure there are some cases where this isn’t the best option, but I think the polyfill approach is best in most implementations.Taken directly from the readme, you can hook Stickyfill up with the following JavaScript:var stickyElements = document.getElementsByClassName('sticky');for (var i = stickyElements.length - 1; i &gt;= 0; i--) {  Stickyfill.add(stickyElements[i]);}I have been using Stickyfill with a WordPress site, so I have changed the class to simply stick so that it will not interfere with sticky posts.While your implementation may be much more complex, applying the following styles to a sidebar would be all you would need to get started..sticky {  position: -webkit-sticky;  position: sticky;  top: 0;}In my project, I set the value of top to 15px to give a little room above the element. Also, I added an additional selector that would account for the WordPress admin bar, so the value of top is 47px when the .admin-bar class is present. This makes sure that even users who are signed in see a properly formatted site.",
            "content_html": "<p>Sticky elements seem to be everywhere, following you wherever you scroll. There are many ways to implement sticky positioning, but as support comes to browsers natively, the best way right now is to use a polyfill. This is where Stickyfill comes in. If <code class=\"highlighter-rouge\">position: sticky</code> is not supported, it mimics the behavior. As soon as support comes to all major browsers, the polyfill can be removed. At the moment, it is supported in Firefox and Safari, and is behind a flag in Chrome and Opera. Considering that it is most commonly used on larger screens, the support is strong.</p><p>You can <a href=\"https://github.com/wilddeer/stickyfill\">download Stickyfill on Github</a>. There is a demo and a few use cases provided. I’m sure there are some cases where this isn’t the best option, but I think the polyfill approach is best in most implementations.</p><p>Taken directly from the readme, you can hook Stickyfill up with the following JavaScript:</p><pre><code class=\"language-javascript\">var stickyElements = document.getElementsByClassName('sticky');for (var i = stickyElements.length - 1; i &gt;= 0; i--) {  Stickyfill.add(stickyElements[i]);}</code></pre><p>I have been using Stickyfill with a WordPress site, so I have changed the class to simply <code class=\"highlighter-rouge\">stick</code> so that it will not interfere with sticky posts.</p><p>While your implementation may be much more complex, applying the following styles to a sidebar would be all you would need to get started.</p><pre><code class=\"language-css\">.sticky {  position: -webkit-sticky;  position: sticky;  top: 0;}</code></pre><p>In my project, I set the value of top to <code class=\"highlighter-rouge\">15px</code> to give a little room above the element. Also, I added an additional selector that would account for the WordPress admin bar, so the value of top is <code class=\"highlighter-rouge\">47px</code> when the <code class=\"highlighter-rouge\">.admin-bar</code> class is present. This makes sure that even users who are signed in see a properly formatted site.</p>",
            "url": "http://localhost:4000/posts/sticky-elements-with-stickyfill/",
            "date_published": "2016-07-24T00:00:00-05:00",
            "date_modified": "2016-07-24T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/maintaining-state-with-sessionstorage/",
            "title": "Maintaining state with sessionStorage",
            "content_text": "When a multi-level menu is collapsed on a small screen, it can difficult to communicate a sense of place as someone is navigating between pages. If the page is several levels deep in the hierarchy, it is really frustrating to dig back down to it if you’d like to view a sibling page. One way to manage this is to let the browser remember your location with sessionStorage.To start, you need to give a unique ID to each menu item that has children. If you’re working with WordPress, you could use the built in page ID, since you know that it will be unique.We only need to keep one ID in sessionStorage at a time, so we listen for a click event on all of the elements serving as a toggle and update sessionStorage each time.$('.main-menu li').click(function() {  var menu_state = $(this).prop('class').match(/page-([0-9]+)/)[1];  sessionStorage.setItem('menu_state', menu_state);}This sets the name of the sessionStorage item to be ‘menu_state’, and then stores the ID as the value. As a submenu is toggled, this value is updated. Move to another page, and the last value is still remembered by the browser.You can view all of the sessionStorage items that have been set in your browser in the web inspector. In Chrome, go to the Resources tab. In Safari and Firefox, go to the Storage tab. A nice feature of sessionStorage is that the browser clears it as soon as you close the page.Retrieving a value from sessionStorage is very similar to setting it. We perform this action when the document is ready instead of waiting for a click event.var menu_state = sessionStorage.getItem('menu_state');if( menu_state ) {  $('.page-' + menu_state).addClass('open');}This applies a class of open to the menu that was open on the last page. Now, given that open has a bit of CSS behind it, when someone opens the mobile menu, they’ll still be in the same place where they were. Magic.",
            "content_html": "<p>When a multi-level menu is collapsed on a small screen, it can difficult to communicate a sense of place as someone is navigating between pages. If the page is several levels deep in the hierarchy, it is really frustrating to dig back down to it if you’d like to view a sibling page. One way to manage this is to let the browser remember your location with sessionStorage.</p><p>To start, you need to give a unique ID to each menu item that has children. If you’re working with WordPress, you could use the built in page ID, since you know that it will be unique.</p><p>We only need to keep one ID in sessionStorage at a time, so we listen for a click event on all of the elements serving as a toggle and update sessionStorage each time.</p><pre><code class=\"language-javascript\">$('.main-menu li').click(function() {  var menu_state = $(this).prop('class').match(/page-([0-9]+)/)[1];  sessionStorage.setItem('menu_state', menu_state);}</code></pre><p>This sets the name of the sessionStorage item to be ‘menu_state’, and then stores the ID as the value. As a submenu is toggled, this value is updated. Move to another page, and the last value is still remembered by the browser.</p><p>You can view all of the sessionStorage items that have been set in your browser in the web inspector. In Chrome, go to the Resources tab. In Safari and Firefox, go to the Storage tab. A nice feature of sessionStorage is that the browser clears it as soon as you close the page.</p><p>Retrieving a value from sessionStorage is very similar to setting it. We perform this action when the document is ready instead of waiting for a click event.</p><pre><code class=\"language-javascript\">var menu_state = sessionStorage.getItem('menu_state');if( menu_state ) {  $('.page-' + menu_state).addClass('open');}</code></pre><p>This applies a class of <code class=\"highlighter-rouge\">open</code> to the menu that was open on the last page. Now, given that <code class=\"highlighter-rouge\">open</code> has a bit of CSS behind it, when someone opens the mobile menu, they’ll still be in the same place where they were. Magic.</p>",
            "url": "http://localhost:4000/posts/maintaining-state-with-sessionstorage/",
            "date_published": "2016-04-24T00:00:00-05:00",
            "date_modified": "2016-04-24T00:00:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/caching-menu-in-transient-in-wordpress/",
            "title": "Caching a menu in a transient in WordPress",
            "content_text": "Menus in WordPress are expensive to generate, in terms of site performance. On every page load, the site is rebuilding almost the exact same thing, and it gets more expensive as the number of menu items increases. The only difference between pages is the current page classes that get applied. What if we stored the menu in a transient, and applied the current page classes on the front end using JavaScript?The first thing we do is check to see if the transient doesn’t exist with a conditional (which it doesn’t, yet), using get_transient and passing in the name of the transient, which we’ll specify later.if ( ! get_transient( 'header-menu' ) ) {Next, if the transient doesn’t exist (which it doesn’t, yet), we generate the menu, and store the result in a variable.$menu = wp_nav_menu( array(  'theme_location' =&gt; 'header-menu',  'echo' =&gt; 0) );We need to disable echo here, as we don’t want to print it to the page just yet.Once we have the menu stored in a variable, we can set a transient. This part of the process is relatively simple. You give the transient a name, pass in the menu variable, and tell it how long to keep it before clearing it.set_transient( 'header-menu', $menu, 60*60*24 );In this example, I’ve named the transient “header-menu”, and told it to save it for 1 day (60 seconds times 60 times 24). I’m not sure what the ideal transient lifetime is, but if the menu will rarely change, you could set it for much longer than a day.Next, continuing with the conditional, if the transient does exist, we just need to retrieve it and set it to the menu variable. And, after that, we echo out the menu variable.} else {  $menu = get_transient( 'header-menu' );}echo $menu;The last piece of the transient is clearing it whenever an update is made to the menu. This function can be added to functions.php. This function looks for a menu in the ‘header-menu’ menu location.function site_nav_clear_transient( $menu_id ) {  $theme_locations = get_nav_menu_locations();  $term = get_term( $theme_locations['header-menu'], 'nav_menu' );  $id = $term-&gt;term_id;  if ( $menu_id = $id ) {    delete_transient( 'header-menu' );  }}add_action( 'wp_update_nav_menu', 'site_nav_clear_transient' );That’s it for the transient, but now we need to reapply the class for the current page. We accomplish that with a little jQuery.This approach is fairly simple. On page load, we get the URL of the current page using window.location.href, store the result in a variable, and then use that variable to find a matching href attribute. It’s as simple as:var url = window.location.href;$('.header-menu a[href=\"' + url + '\"]').addClass('current-page');The jQuery selector looks for an anchor tag inside of an element with the class of ‘header-menu’, matches the url variable we passed in, and then adds a class of ‘current-page’.",
            "content_html": "<p>Menus in WordPress are expensive to generate, in terms of site performance. On every page load, the site is rebuilding almost the exact same thing, and it gets more expensive as the number of menu items increases. The only difference between pages is the current page classes that get applied. What if we stored the menu in a transient, and applied the current page classes on the front end using JavaScript?</p><p>The first thing we do is check to see if the transient doesn’t exist with a conditional (which it doesn’t, yet), using get_transient and passing in the name of the transient, which we’ll specify later.</p><pre><code class=\"language-php\">if ( ! get_transient( 'header-menu' ) ) {</code></pre><p>Next, if the transient doesn’t exist (which it doesn’t, yet), we generate the menu, and store the result in a variable.</p><pre><code class=\"language-php\">$menu = wp_nav_menu( array(  'theme_location' =&gt; 'header-menu',  'echo' =&gt; 0) );</code></pre><p>We need to disable echo here, as we don’t want to print it to the page just yet.</p><p>Once we have the menu stored in a variable, we can set a transient. This part of the process is relatively simple. You give the transient a name, pass in the menu variable, and tell it how long to keep it before clearing it.</p><pre><code class=\"language-php\">set_transient( 'header-menu', $menu, 60*60*24 );</code></pre><p>In this example, I’ve named the transient “header-menu”, and told it to save it for 1 day (60 seconds times 60 times 24). I’m not sure what the ideal transient lifetime is, but if the menu will rarely change, you could set it for much longer than a day.</p><p>Next, continuing with the conditional, if the transient does exist, we just need to retrieve it and set it to the menu variable. And, after that, we echo out the menu variable.</p><pre><code class=\"language-php\">} else {  $menu = get_transient( 'header-menu' );}echo $menu;</code></pre><p>The last piece of the transient is clearing it whenever an update is made to the menu. This function can be added to functions.php. This function looks for a menu in the ‘header-menu’ menu location.</p><pre><code class=\"language-php\">function site_nav_clear_transient( $menu_id ) {  $theme_locations = get_nav_menu_locations();  $term = get_term( $theme_locations['header-menu'], 'nav_menu' );  $id = $term-&gt;term_id;  if ( $menu_id = $id ) {    delete_transient( 'header-menu' );  }}add_action( 'wp_update_nav_menu', 'site_nav_clear_transient' );</code></pre><p>That’s it for the transient, but now we need to reapply the class for the current page. We accomplish that with a little jQuery.</p><p>This approach is fairly simple. On page load, we get the URL of the current page using <code>window.location.href</code>, store the result in a variable, and then use that variable to find a matching <code>href</code> attribute. It’s as simple as:</p><pre><code class=\"language-javascript\">var url = window.location.href;$('.header-menu a[href=\"' + url + '\"]').addClass('current-page');</code></pre><p>The jQuery selector looks for an anchor tag inside of an element with the class of ‘header-menu’, matches the url variable we passed in, and then adds a class of ‘current-page’.</p>",
            "url": "http://localhost:4000/posts/caching-menu-in-transient-in-wordpress/",
            "date_published": "2016-03-30T16:38:00-05:00",
            "date_modified": "2016-03-30T16:38:00-05:00"
        },
    
        {
            "id": "http://localhost:4000/posts/toggling-elements-with-javascript/",
            "title": "Toggling elements with JavaScript",
            "content_text": "One of the most performant ways to toggle an element with JavaScript is to apply and remove a class. Paul Irish pointed out last year that using jQuery’s .hide(), .show(), and .toggle() methods are very costly. I’ve used/am currently using each of these, as they are really easy to understand and implement. However, you’ll see that a plain JavaScript approach isn’t too difficult.For my site, I needed a toggle for the menu on small screens. I used the following to add and remove a class named ‘open’, which has the proper styles to show the menu. In this case, it is performed when an element with the class of ‘toggle’ is clicked.&lt;script&gt;  var menu = document.querySelector('.toggle');  menu.onclick = function(){    menu.classList.toggle('open');  }&lt;/script&gt;",
            "content_html": "<p>One of the most performant ways to toggle an element with JavaScript is to apply and remove a class. Paul Irish pointed out last year that using jQuery’s .hide(), .show(), and .toggle() methods are very costly. I’ve used/am currently using each of these, as they are really easy to understand and implement. However, you’ll see that a plain JavaScript approach isn’t too difficult.</p><p>For my site, I needed a toggle for the menu on small screens. I used the following to add and remove a class named ‘open’, which has the proper styles to show the menu. In this case, it is performed when an element with the class of ‘toggle’ is clicked.</p><pre><code class=\"language-javascript\">&lt;script&gt;  var menu = document.querySelector('.toggle');  menu.onclick = function(){    menu.classList.toggle('open');  }&lt;/script&gt;</code></pre>",
            "url": "http://localhost:4000/posts/toggling-elements-with-javascript/",
            "date_published": "2016-03-08T14:20:00-06:00",
            "date_modified": "2016-03-08T14:20:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/setting-up-jekyll/",
            "title": "Setting up Jekyll",
            "content_text": "I recently switched this site to Jekyll, and I thought I’d share the setup process. Jekyll was a bit slow the last time I used it, so I was excited to find that the 3.0.0 update included speed improvements that make updates available in the browser almost immediately. Here are some of the configuration changes I made outside of the defaults:  Changed the permalink structure to /posts/:title/. I made this update in config.yml, refreshed the site, and nothing changed. A little digging, and I found out that changes to config.yml will not be processed while jekyll serve is running. You’ll need to ctrl-c and jekyll serve again.  I was using m/d/Y to display dates, and so in looking at how to set that up in Jekyll, I found an article from Allan W. Smith that detailed all of the possibilities. It can be accomplished with {{ post.date | date: \"%-m/%-d/%Y\" }}.  I display excerpts from posts on the homepage, and in order to specify those manually, you can add an excerpt: declaration to the YAML front matter on each post and specify the excerpt there. It can then be output with {{ post.excerpt }}. Jekyll will automatically give you an excerpt, but for posts that start with a code snippet, that was not ideal.  For posts that include code snippets, I use prism.js for formatting. To include the file only on posts that use it, I add custom_js: prism  to the front matter. In footer.html, I’ve added the following, which takes care of outputting the script tag:    {% if page.custom_js %}  {% for js_file in page.custom_js %}    &lt;script src='/js/{{ js_file }}.js' type=\"text/javascript\"&gt;&lt;/script&gt;  {% endfor %}{% endif %}    This also allows for the possibility of additional js files, so I can just add the name of a file I’d like to include to the custom_js declaration. Learned this trick on Matt Gemmell’s site.    I wanted my 404 page to live at /404.html. By default, Jekyll takes that and moves it to /404/index.html. To change that, I added permalink: /404.html to the YAML front matter on the page.Phew. That was more that I thought. Hope this helps speed things up for you.",
            "content_html": "<p>I recently switched this site to Jekyll, and I thought I’d share the setup process. Jekyll was a bit slow the last time I used it, so I was excited to find that the 3.0.0 update included speed improvements that make updates available in the browser almost immediately. Here are some of the configuration changes I made outside of the defaults:</p><ul>  <li>Changed the permalink structure to <code class=\"highlighter-rouge\">/posts/:title/</code>. I made this update in config.yml, refreshed the site, and nothing changed. A little digging, and I found out that changes to config.yml will not be processed while <code class=\"highlighter-rouge\">jekyll serve</code> is running. You’ll need to ctrl-c and <code class=\"highlighter-rouge\">jekyll serve</code> again.</li>  <li>I was using m/d/Y to display dates, and so in looking at how to set that up in Jekyll, I found an <a href=\"http://alanwsmith.com/jekyll-liquid-date-formatting-examples\">article from Allan W. Smith</a> that detailed all of the possibilities. It can be accomplished with <code class=\"highlighter-rouge\">{{ post.date | date: \"%-m/%-d/%Y\" }}</code>.</li>  <li>I display excerpts from posts on the homepage, and in order to specify those manually, you can add an <code class=\"highlighter-rouge\">excerpt:</code> declaration to the YAML front matter on each post and specify the excerpt there. It can then be output with <code class=\"highlighter-rouge\">{{ post.excerpt }}</code>. Jekyll will automatically give you an excerpt, but for posts that start with a code snippet, that was not ideal.</li>  <li>For posts that include code snippets, I use <a href=\"http://prismjs.com/\">prism.js</a> for formatting. To include the file only on posts that use it, I add <code class=\"highlighter-rouge\">custom_js: prism</code>  to the front matter. In footer.html, I’ve added the following, which takes care of outputting the script tag:    <pre><code class=\"language-markup\">{% if page.custom_js %}  {% for js_file in page.custom_js %}</code>    <code class=\"language-javascript\">&lt;script src='/js/{{ js_file }}.js' type=\"text/javascript\"&gt;&lt;/script&gt;</code>  <code class=\"language-markup\">{% endfor %}{% endif %}</code></pre>    <p>This also allows for the possibility of additional js files, so I can just add the name of a file I’d like to include to the <code class=\"highlighter-rouge\">custom_js</code> declaration. Learned this trick on <a href=\"http://mattgemmell.com/page-specific-assets-with-jekyll/\">Matt Gemmell’s site</a>.</p>  </li>  <li>I wanted my 404 page to live at /404.html. By default, Jekyll takes that and moves it to /404/index.html. To change that, I added <code class=\"highlighter-rouge\">permalink: /404.html</code> to the YAML front matter on the page.</li></ul><p>Phew. That was more that I thought. Hope this helps speed things up for you.</p>",
            "url": "http://localhost:4000/posts/setting-up-jekyll/",
            "date_published": "2016-02-13T01:15:00-06:00",
            "date_modified": "2016-02-13T01:15:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/output-featured-image-caption-wordpress/",
            "title": "Output featured image caption in WordPress",
            "content_text": "It’s relatively easy and well documented to output a featured image, but getting the caption is a little trickier. Here’s the code I use:$post_thumbnail_caption = get_post( get_post_thumbnail_id() )-&gt;post_excerpt;if ( ! empty( $post_thumbnail_caption ) ) {    echo '&lt;p class=\"featured-image-caption\"&gt;' . esc_html( $post_thumbnail_caption ) . '&lt;/p&gt;';}Note: If you are expecting to output HTML inside captions, use wp_kses_post() in place of esc_html(). While not as performant, it allows the same tags that are allowed inside post content, such as links, italics, bolding, etc.Last Updated: 2/3/2016",
            "content_html": "<p>It’s relatively easy and well documented to output a featured image, but getting the caption is a little trickier. Here’s the code I use:</p><pre><code class=\"language-php\">$post_thumbnail_caption = get_post( get_post_thumbnail_id() )-&gt;post_excerpt;if ( ! empty( $post_thumbnail_caption ) ) {    echo '&lt;p class=\"featured-image-caption\"&gt;' . esc_html( $post_thumbnail_caption ) . '&lt;/p&gt;';}</code></pre><p>Note: If you are expecting to output HTML inside captions, use <code>wp_kses_post()</code> in place of <code>esc_html()</code>. While not as performant, it allows the same tags that are allowed inside post content, such as links, italics, bolding, etc.</p><p class=\"last-updated\">Last Updated: 2/3/2016</p>",
            "url": "http://localhost:4000/posts/output-featured-image-caption-wordpress/",
            "date_published": "2016-01-30T12:00:00-06:00",
            "date_modified": "2016-01-30T12:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/add-one-hour-to-date-and-time-in-php/",
            "title": "Add 1 hour to date & time in PHP",
            "content_text": "strtotime($time . '+ 1 hour');This is probably the most magical thing I’ve ever done PHP. Pass in the date and time (in this case, in a variable), tell it what you want to do with it, and out comes the updated date and time. I needed to add an hour to the time I was working with. Seems simple until you think about transition to the next day. This function takes care of advancing the date to the next day if necessary.",
            "content_html": "<pre><code class=\"language-php\">strtotime($time . '+ 1 hour');</code></pre><p>This is probably the most magical thing I’ve ever done PHP. Pass in the date and time (in this case, in a variable), tell it what you want to do with it, and out comes the updated date and time. I needed to add an hour to the time I was working with. Seems simple until you think about transition to the next day. This function takes care of advancing the date to the next day if necessary.</p>",
            "url": "http://localhost:4000/posts/add-one-hour-to-date-and-time-in-php/",
            "date_published": "2016-01-04T12:00:00-06:00",
            "date_modified": "2016-01-04T12:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/using-vertical-height-media-queries-with-fixed-headers/",
            "title": "Using vertical height media queries with fixed headers",
            "content_text": "On a site with tall pages, setting up a fixed header can make a lot of sense. Why not use that extra screen real estate? The philosophies of responsive design can and should apply to this as well. Screen height should be taken into account, and fixed headers should be disabled if there is not enough height for them to be useful (although, I would argue that they are never useful).Let’s say that the fixed header on a site is 80px tall. Nothing too unruly, but it might get in the way of someone on a smaller laptop as they are browsing your site. In this example, you could set the header to fixed if the viewport is at least 800px tall. Any shorter and let that header scroll away out of sight.@media screen and (min-height: 800px) {    header {        position: fixed;        top: 0;        left: 0;    }    body {        margin-top: 80px;    }}You’ll want to replace the space you’re creating when the header is fixed by applying the height of the header as margin-top of the body element.To take this a bit further, you could combine this with a max-width media query so that the header would not be fixed below a specified width, something like 600px. In that way, you are only applying a fixed header when there is plenty of room.",
            "content_html": "<p>On a site with tall pages, setting up a fixed header can make a lot of sense. Why not use that extra screen real estate? The philosophies of responsive design can and should apply to this as well. Screen height should be taken into account, and fixed headers should be disabled if there is not enough height for them to be useful (although, I would argue that they are never useful).</p><p>Let’s say that the fixed header on a site is 80px tall. Nothing too unruly, but it might get in the way of someone on a smaller laptop as they are browsing your site. In this example, you could set the header to fixed if the viewport is at least 800px tall. Any shorter and let that header scroll away out of sight.</p><pre><code class=\"language-css\">@media screen and (min-height: 800px) {    header {        position: fixed;        top: 0;        left: 0;    }    body {        margin-top: 80px;    }}</code></pre><p>You’ll want to replace the space you’re creating when the header is fixed by applying the height of the header as margin-top of the body element.</p><p>To take this a bit further, you could combine this with a max-width media query so that the header would not be fixed below a specified width, something like 600px. In that way, you are only applying a fixed header when there is plenty of room.</p>",
            "url": "http://localhost:4000/posts/using-vertical-height-media-queries-with-fixed-headers/",
            "date_published": "2016-01-03T12:00:00-06:00",
            "date_modified": "2016-01-03T12:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/designing-for-every-moment/",
            "title": "Designing for every moment",
            "content_text": "Responsive design is truly about each and every point in between the smallest supported viewport and the largest, which leaves a lot of possibilities. If truly designing for a fully responsive experience, you should give attention to the awkward moments of change. One of those moments is when an element comes into contact with the edge of the screen.If there is a centered image on the page with no border or additional styles around it, what happens when the width of the browser window is about 10px wider than the image? It leaves a small gutter along each side. Is this an issue? Maybe not. I still think it deserves consideration.It depends on the case, but on a few occasions I have adjusted the behavior of those images so that there are no awkward in-between moments. When the image got to have less than 10px on each side, I stretched the image to fill the entire width of the screen. This is usually okay, as long as the image has a little extra resolution to give. Of course, we wouldn’t want to stretch an image beyond it’s natural size.If this is applied to an image, this means that there are no situations where the image has a small gutter along each side, which means that each and every moment along the responsive spectrum has been thought of and cared for.",
            "content_html": "<p>Responsive design is truly about each and every point in between the smallest supported viewport and the largest, which leaves a lot of possibilities. If truly designing for a fully responsive experience, you should give attention to the awkward moments of change. One of those moments is when an element comes into contact with the edge of the screen.</p><p>If there is a centered image on the page with no border or additional styles around it, what happens when the width of the browser window is about 10px wider than the image? It leaves a small gutter along each side. Is this an issue? Maybe not. I still think it deserves consideration.</p><p>It depends on the case, but on a few occasions I have adjusted the behavior of those images so that there are no awkward in-between moments. When the image got to have less than 10px on each side, I stretched the image to fill the entire width of the screen. This is usually okay, as long as the image has a little extra resolution to give. Of course, we wouldn’t want to stretch an image beyond it’s natural size.</p><p>If this is applied to an image, this means that there are no situations where the image has a small gutter along each side, which means that each and every moment along the responsive spectrum has been thought of and cared for.</p>",
            "url": "http://localhost:4000/posts/designing-for-every-moment/",
            "date_published": "2016-01-02T12:00:00-06:00",
            "date_modified": "2016-01-02T12:00:00-06:00"
        },
    
        {
            "id": "http://localhost:4000/posts/giving-back/",
            "title": "Giving back",
            "content_text": "Everything I’ve learned about working on the web, I’ve learned on the web. From reading blogs to doing Treehouse courses to simply reading Twitter, it all took place on one website or another. Up to this point, I’ve really only been taking things in. I don’t think it’s a bad thing, I’ve simply been learning as much as I can. However, I think the time has come that I try to give back a little.I am switching my website from portfolio to blog, and starting to share what I know. In my experience, when searching for an answer to a specific question, I know that a short, concise post can be all it takes to put the last piece into a puzzle. I’ll be taking that approach, posting snippets of code and quick explanations of how I solved a problem.If this is the first post you’ve read here, then there is already more! Head back to posts to read them.",
            "content_html": "<p>Everything I’ve learned about working on the web, I’ve learned on the web. From reading blogs to doing Treehouse courses to simply reading Twitter, it all took place on one website or another. Up to this point, I’ve really only been taking things in. I don’t think it’s a bad thing, I’ve simply been learning as much as I can. However, I think the time has come that I try to give back a little.</p><p>I am switching my website from portfolio to blog, and starting to share what I know. In my experience, when searching for an answer to a specific question, I know that a short, concise post can be all it takes to put the last piece into a puzzle. I’ll be taking that approach, posting snippets of code and quick explanations of how I solved a problem.</p><p>If this is the first post you’ve read here, then there is already more! Head back to posts to read them.</p>",
            "url": "http://localhost:4000/posts/giving-back/",
            "date_published": "2016-01-01T12:00:00-06:00",
            "date_modified": "2016-01-01T12:00:00-06:00"
        }
    
    ]
}