<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sam Hermes</title>
    <description>Front-end web developer at Washington University in St. Louis. Writes about CSS, JavaScript, accessibility, WordPress, and more.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 May 2019 22:00:10 -0500</pubDate>
    <lastBuildDate>Wed, 01 May 2019 22:00:10 -0500</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Controlling scroll position natively</title>
        <description>&lt;p&gt;It had been a little while since I implemented a control to scroll the page, and I was delighted to find that much of the functionality we usually look for has been implemented directly into &lt;a href=&quot;https://caniuse.com/#feat=element-scroll-methods&quot;&gt;most of the major browsers&lt;/a&gt;! Of course, before we get too carried away, it’s important to note that this isn’t quite ready for use without a polyfill, but we’re getting closer and closer every day.&lt;/p&gt;

&lt;p&gt;The browser controls fall under the &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; object, so we can give our directions there. The available functions are &lt;code class=&quot;highlighter-rouge&quot;&gt;.scroll()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.scrollBy()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.scrollByLines()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.scrollByPages()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;.scrollTo()&lt;/code&gt;. The scroll by lines and pages are hardly supported, it looks like just Firefox has picked them up for now. However, the remaining three are more than enough to get most jobs done.&lt;/p&gt;

&lt;p&gt;A common pattern that we see around is the case where the hero area of a page takes up &lt;code class=&quot;highlighter-rouge&quot;&gt;100vh&lt;/code&gt;, and gives the appearance of a full screen element. Some feel that users do not know to scroll, so they put a down arrow at the bottom of the hero area, which, when clicked, takes the user down the page. Usually, with this, we want to position the top of the viewport in alignment with the very bottom of the hero area.&lt;/p&gt;

&lt;p&gt;Here’s the full function for the desired behavior, and then I’ll pick it apart a bit:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// store the &amp;lt;button&amp;gt; element in a variable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;downButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.down-button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// attach event handler to the button element&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;downButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get the pixel value of how much the user has already scrolled&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alreadyScrolled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get the window's height, subtract how much the user has scrolled&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;windowHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alreadyScrolled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// smoothly scroll down the page by calculated amount&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;windowHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'smooth'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;.scrollBy()&lt;/code&gt; is in use here. This allows us to pass in a pixel value of how much we’d like to scroll. To ensure that the user always gets take to the same spot, we need to check and makes sure that we incorporate any amount that they’ve already scrolled. We subtract that from the &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHeight&lt;/code&gt; value that is a part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The best part of this functionality is the &lt;code class=&quot;highlighter-rouge&quot;&gt;behavior&lt;/code&gt; setting. Previously, we went looking for libraries to scroll smoothly, but now it’s built into the browser. Although it lacks customization, it works great for most cases, and eases the page to the new scroll position. You can always take a user immediately to the new scroll position if desired, but the smooth scroll helps to show exactly what’s happening.&lt;/p&gt;

&lt;p&gt;Last but not least, a polyfill is needed to make this work in IE and Edge (at least at the time of writing). There is one by Dustan Kasten, &lt;a href=&quot;https://github.com/iamdustan/smoothscroll&quot;&gt;available on GitHub&lt;/a&gt;. It gets the browser support to where most would need it to be. Hopefully we’ll be able to skip it altogether soon.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Apr 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/controlling-scroll-position-natively/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/controlling-scroll-position-natively/</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Deploying a repository to a subdirectory of GitHub Pages site</title>
        <description>&lt;p&gt;My site is currently hosted on GitHub Pages, which means that anytime I want to put something on the site, I have to make a commit and push it up. This works great for most things, but if I want to work on a larger project and “host” it on my site, it has to all go in the same repo. With GitHub Pages, it wasn’t clear that there is a much easier way to handle this. It’s a simple as setting any other repository to use GitHub Pages as well.&lt;/p&gt;

&lt;p&gt;When you set up the first GitHub Pages repository, you’re given subdomain at a github.io address. This acts as the main or parent site. In my case, I took this a little further by setting up a custom domain, which isn’t required but works just the same. After the main site is set up, any additional repositories that have GitHub pages enabled on them will use a subdirectory structure. These are referred to as “project pages.” The GitHub documentation is a little fuzzy on what exactly that means, but it’s just that these are deployed to a subdirectory of the main site.&lt;/p&gt;

&lt;p&gt;I made a repository called &lt;code class=&quot;highlighter-rouge&quot;&gt;test-subdirectory&lt;/code&gt;, which had a sample index file in it. I pushed this repo to GitHub, and in the repository settings, I chose a source branch under the GitHub Pages section. This immediately deployed the repository to &lt;a href=&quot;https://samhermes.com/test-subdirectory&quot;&gt;samhermes.com/test-subdirectory&lt;/a&gt;. Now, I no longer need to keep all of my projects within the main repository.&lt;/p&gt;

&lt;p&gt;It’s very likely that this is something that is obvious to other people, but it’s something that just wasn’t very clear to me, even after searching around for information. Sometimes something so simple can turn into an unnecessary hurdle.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Apr 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/deploying-repository-subdirectory-github-pages-site/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/deploying-repository-subdirectory-github-pages-site/</guid>
        
        
      </item>
    
      <item>
        <title>Defining a new project - Reading List Admin React App</title>
        <description>&lt;p&gt;I’m starting on a new project, and I’ll be working on it in the open. This post is the first in a series where I’ll be chronicling my experience. So, to get started, like any project, I need to define exactly what I’ll be doing. Right now, I have a reading list on my site, and I handle updates to the list through a WordPress dashboard. What I’d like to have is a custom admin panel that I could log in to separately from WordPress. The WordPress admin has a lot of other things going on, and I’d like to just focus on my books.&lt;/p&gt;

&lt;p&gt;The main point of this project is to learn more about the ins and outs of React. I could build this admin without React, but this is just the sort of project that React was made for. I’ve never completed a React project of this size, or seen it from start to finish.&lt;/p&gt;

&lt;p&gt;In the app, I’ll need to pull in a list of all of the books that are currently in the database, both the ones that I’m currently reading and the ones I’ve completed. I’ll want to be able to make updates to existing books, as well as add new books as I begin reading them. I’ll be able to pull in these books through the WordPress REST API.&lt;/p&gt;

&lt;p&gt;An interesting component of this project will be authentication. I’ll only want to be able to access the app if I’m logged in, so I’ll need to develop a login form and ensure that what I’ve developed isn’t accessible to the outside world. I’ll use my existing WordPress account, and that will keep me from having to manage two accounts. With that, I’ll need to interface with the WordPress API to maintain my logged in status.&lt;/p&gt;

&lt;p&gt;The last part of the project that I want to pay special attention to is how it behaves on mobile vs. desktop. I want it to work anywhere, but I am imagining slightly different behavior in the two cases. In general, it will be a big UI project, as I’ll be starting from the ground up to build all of the views and components.&lt;/p&gt;

&lt;p&gt;The next post in this series will be about getting the project started. I’ll use Create React App to jump start the project and begin configuring from there. I’ve done this part before, so hopefully it’s smooth sailing for now. It won’t last long though!&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Apr 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/defining-new-project-reading-list-admin-react-app/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/defining-new-project-reading-list-admin-react-app/</guid>
        
        
        <category>React</category>
        
      </item>
    
      <item>
        <title>Asking for feedback</title>
        <description>&lt;p&gt;Feedback is a topic that comes up all the time when working with a team. I definitely know its value and appreciate it when it comes, but it’s difficult to both remember to ask for it and to stay open to it.&lt;/p&gt;

&lt;p&gt;First off, asking for someone’s opinion of your work can be pretty scary, and very easy to avoid as well. If you don’t ask, you won’t find out that it’s bad. Why would you punish yourself? Like most things, my default around this seems to be remaining quiet. The problem with this is that feedback helps us grow, and growing is good. It helps us do better next time.&lt;/p&gt;

&lt;p&gt;One of the biggest things that I’ve found to help is to ask very specifically for it. After a meeting is over, asking your supervisor about how they thought you did. Or, after a presentation, sending a Slack message to a few key individuals to ask about how it went. Small, specific bits of feedback are super helpful and easy for someone else to give. Asking someone about how good you are at your job in general is a very tricky thing to answer.&lt;/p&gt;

&lt;p&gt;Taking this further, it’s good to ensure that space is left for feedback. Oftentimes, feedback is requested in a group setting, which isn’t a very good forum for honest feedback. An asynchronous way to send in feedback at someone’s own pace is much better, whether that’s just an email or Slack message. I think that sometimes we’re scared of getting too much feedback, especially if we’re leaving it open to an entire group of people, but more feedback is always better!&lt;/p&gt;

&lt;p&gt;Asking for feedback is good, but getting unsolicited feedback is better! One thing I really appreciate is when someone takes the time to comment on how I did. It’s really nice to receive, but can be difficult to give. You can really make someone’s day if you give them positive reinforcement. I haven’t found a good, structured of going about this, but sometimes it’s the spontaneity that makes it special anyhow.&lt;/p&gt;

&lt;p&gt;After everything that I’ve said here, I would also like to look at this in the opposite way. Sometimes, too much feedback is bad. And, if we’re constantly evaluating how someone else is doing at something, we miss the valiant effort that they made to begin with. No one is running at 100% all the time. It’s when you’re having a bad day that you really don’t want to give or receive feedback. If I’m having a bad day, I’m unimpressed with everyone else, and that’s just not my true feeling. That’s more about my bad day. It’s good to remember that feedback has its proper time and place.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Mar 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/asking-for-feedback/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/asking-for-feedback/</guid>
        
        
      </item>
    
      <item>
        <title>Excluding Uncategorized when listing categories in WordPress</title>
        <description>&lt;p&gt;Ah, the eternal dilemma. What’s the best way to show a list of categories without including the “Uncategorized” category that WordPress generates by default? I feel like I re-solve this issue each time that it comes up. The issue is that categories can be listed in a couple different contexts, so the solution differs. Sometimes we’re listing all of them on the site or sometimes we’re listing them for the current post. Let’s solve this once and for all!&lt;/p&gt;

&lt;h2 id=&quot;for-the-current-post&quot;&gt;For the current post&lt;/h2&gt;

&lt;p&gt;Whether displayed in an archive or in the single post template, this is when we’re listing categories for a specific post.&lt;/p&gt;

&lt;p&gt;The best way to list post categories is &lt;code class=&quot;highlighter-rouge&quot;&gt;get_the_category()&lt;/code&gt;. It actually returns all categories, despite what its name may imply. Normally, you could use &lt;code class=&quot;highlighter-rouge&quot;&gt;get_the_category_list()&lt;/code&gt;, but we need to do a little modification before outputting.&lt;/p&gt;

&lt;p&gt;Place this function in your &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; file, or in the commonly-used &lt;code class=&quot;highlighter-rouge&quot;&gt;template-tags.php&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;custom_get_the_category_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_the_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$uncategorized_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_cat_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Uncategorized'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$categories_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$categories&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;category_parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uncategorized_id&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cat_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uncategorized_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$categories_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'&amp;lt;li&amp;gt;&amp;lt;a href=&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_category_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cat_ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;ul class=&quot;post-categories&quot;&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$categories_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/ul&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to call out about this function is that it checks for both Uncategorized itself and any children of Uncategorized. This may vary in your project, but it seems a safe assumption to make.&lt;/p&gt;

&lt;p&gt;Now you can just use &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_get_the_category_list()&lt;/code&gt; anywhere that you would use &lt;code class=&quot;highlighter-rouge&quot;&gt;get_the_category_list()&lt;/code&gt;. Note for the beginner, it’s best to substitute the name of your project for &lt;code class=&quot;highlighter-rouge&quot;&gt;custom&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;for-all-posts&quot;&gt;For all posts&lt;/h2&gt;

&lt;p&gt;Listing all of the categories on a site is very similar to listing them for a single post. Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;get_the_category()&lt;/code&gt;, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;get_categories()&lt;/code&gt;. The naming makes a little more sense this time. Again, normally you could just use &lt;code class=&quot;highlighter-rouge&quot;&gt;wp_list_categories()&lt;/code&gt;, and you’d get an unordered list of categories that included Uncategorized.&lt;/p&gt;

&lt;p&gt;Place this function in your &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; file, or in the commonly-used &lt;code class=&quot;highlighter-rouge&quot;&gt;template-tags.php&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;custom_list_categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$uncategorized_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_cat_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Uncategorized'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$categories_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$categories&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;category_parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uncategorized_id&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cat_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uncategorized_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$categories_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'&amp;lt;li&amp;gt;&amp;lt;a href=&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_category_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cat_ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;ul class=&quot;site-categories&quot;&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$categories_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/ul&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can just use &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_list_categories()&lt;/code&gt; anywhere that you would use &lt;code class=&quot;highlighter-rouge&quot;&gt;wp_list_categories()&lt;/code&gt;. Note for the beginner, it’s best to substitute the name of your project for &lt;code class=&quot;highlighter-rouge&quot;&gt;custom&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Feb 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/posts/excluding-uncategorized-listing-categories-wordpress/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/excluding-uncategorized-listing-categories-wordpress/</guid>
        
        
        <category>WordPress</category>
        
      </item>
    
      <item>
        <title>Notes from WordCamp US 2018</title>
        <description>&lt;h2 class=&quot;margin-bottom-zero&quot;&gt;Thinking Like a Front-End Developer&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Chris Coyier&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;During Chris’s talk, I pushed a &lt;a href=&quot;https://github.com/samhermes/samhermes.github.io/commit/d6a66519092adee0376a1f748f27964551846e0a&quot;&gt;very small commit&lt;/a&gt; to my website to change “front end” to “front-end.” I agreed with &lt;a href=&quot;https://twitter.com/WordCampUS/status/1071065672313118720&quot;&gt;his explanation&lt;/a&gt; of when to use which, even though it was different from the convention that I’d been using for a while.&lt;/p&gt;

&lt;p&gt;I found his talk very fun to listen to, and appreciated how he acknowledged the vast amount of responsibility that we all have to shoulder in our jobs. There was a feeling of togetherness in the room.&lt;/p&gt;

&lt;p&gt;One intriguing idea that Chris spoke about was the idea of “front of the front end” vs “back of the front end.” He got this from &lt;a href=&quot;https://shoptalkshow.com/episodes/334/&quot;&gt;speaking with Brad Frost on the ShopTalk Show&lt;/a&gt;, and I think that it points to a natural divide that is happening. With React, working on the front end can actually end up looking a little like working on the back end. I’ve traditionally been more of a “front of the front” kind of developer.&lt;/p&gt;

&lt;h2 class=&quot;margin-bottom-zero&quot;&gt;Holy Blockamole: Tips On Learning Block Development&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Andrew Taylor&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Andrew’s lightning talk gave a high-level overview of the ways that developers can work with Gutenberg, from creating templates to block development.&lt;/p&gt;

&lt;p&gt;When working in a custom post type, it’s easy to set a pre-defined set of blocks and prevent a user from adding or removing them. This can be done by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;'template_lock' =&amp;gt; 'all'&lt;/code&gt;. You can set the specific blocks fairly simply using &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s1&quot;&gt;'template'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core/heading'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'placeholder'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Title...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-plugin'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'level'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core/image'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Any block atribute can be set as the default.&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'align'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wide'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core/paragraph'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'placeholder'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bio...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-plugin'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I took this code directly from &lt;a href=&quot;https://drive.google.com/file/d/1nX3xwOeH9Q5v9y-KDKEgffHRdzJRvoLG/view&quot;&gt;Andrew’s slides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The question that this posed, for me, was how would we set this up if our blocks were coming from a separate plugin. So, if it was possible that the blocks weren’t available, would this fall back gracefully?&lt;/p&gt;

&lt;p&gt;In general, as more of the content in our sites becomes dependent on an array of plugins, how can we be sure that it all meshes well? Likely less of an issue than I think it is, but it will be interesting to see how it plays out in real life.&lt;/p&gt;

&lt;h2 class=&quot;margin-bottom-zero&quot;&gt;Investigating Regressions Quickly using Git Bisect&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;John Blackbourn&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;John explained very succinctly how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt;, a tool for finding the place in your commit history where an issue was introduced. By cutting the number of commits in half each time, you can get down to the issue very quickly, even if there are a hundred or so commits.&lt;/p&gt;

&lt;p&gt;Getting this started looks like this:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect start&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect good &quot;2.6.10&quot;&lt;/code&gt; - commit where it worked&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect bad HEAD&lt;/code&gt; - where it was broken (likely the latest commit)&lt;/p&gt;

&lt;p&gt;It then guides you through until you find the bad commit. &lt;a href=&quot;https://speakerdeck.com/johnbillion/investigating-regressions-quickly-using-git-bisect&quot;&gt;John’s slides&lt;/a&gt; go into more detail about this. Like he said, I hope I never need to use this, but it’s nice to know that it’s there to help.&lt;/p&gt;

&lt;h2 class=&quot;margin-bottom-zero&quot;&gt;Gutenberg, GraphQL and Government: Building Blocks&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Jason Bahl&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Jason &lt;a href=&quot;https://docs.google.com/presentation/d/1PwXjxpqbZcWBKD2xTPmuJlScJiiuOHZurVyB9vR-BH4/edit#slide=id.g4846d628b1_0_566&quot;&gt;answered a question&lt;/a&gt; that had popped up during Andrew’s talk earlier. Andrew had spoken about how to limit blocks in a custom post type, but I wondered how this would be done for pages or posts. With a filter!&lt;/p&gt;

&lt;p&gt;This checks to see if the current page template is &lt;code class=&quot;highlighter-rouge&quot;&gt;home.php&lt;/code&gt;, and then only allows the &lt;code class=&quot;highlighter-rouge&quot;&gt;homepage-hero&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;curated-posts&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;curated-staff&lt;/code&gt; blocks.&lt;/p&gt;

&lt;p&gt;Last but not least, it locks down the blocks using &lt;code class=&quot;highlighter-rouge&quot;&gt;template_lock&lt;/code&gt;, like Andrew had demonstrated. So, the user can only use the three blocks specified.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;add_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'allowed_block_types'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$allowed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$wp_post_types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'templates/home.php'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_page_template_slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$wp_post_types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wcus/homepage-hero'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wcus/curated-posts'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wcus/curated-staff'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$wp_post_types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;template_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'all'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 class=&quot;margin-bottom-zero&quot;&gt;Who’s afraid of ARIA?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Rian Rietveld&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I feel like I could make an entire post just about this talk. I love a good code demo, and this talk had lots of them. Rian made everything seem very simple and straightforward, which is refreshing when you’re talking about accessibility. In practice, I know that things get a little more complicated, but I learned a lot, nonetheless.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt;&lt;br /&gt;
This attribute is useful for menus or accordions, so that you can communicate that the following element is either hidden or visible. You would then toggle &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt; and the hidden attribute with JavaScript when the user opens or closes the menu or accordion.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-live&lt;/code&gt;&lt;br /&gt;
This was the most interesting bit, as I think that this is difficult to get right. &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-live&lt;/code&gt; is used to tell the user about what’s changing on the screen. So, if they hit a button to save changes, we should tell them when the changes have been successfully saved.&lt;/p&gt;

&lt;p&gt;Initially, the element with the message in it would have &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-live=&quot;polite&quot;&lt;/code&gt; applied to it. Using JavaScript, we would update that to &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-live=&quot;assertive&quot;&lt;/code&gt;, triggering the screen reader to read it out.&lt;/p&gt;

&lt;p&gt;Similarly, if we have an ajax search feature, we could use this method to announce when new search results arrive with a message such as “There are 24 search results.”&lt;/p&gt;

&lt;p&gt;WordPress has functionality built into it that handles this for you. &lt;code class=&quot;highlighter-rouge&quot;&gt;wp.a11y.speak()&lt;/code&gt; will add two &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s to the bottom of the page, one with &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-live=&quot;polite&quot;&lt;/code&gt; and one with &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-live=&quot;assertive&quot;&lt;/code&gt; and update them as appropriate.&lt;/p&gt;

&lt;p&gt;I highly recommend watching Rian’s talk when it becomes available.&lt;/p&gt;

&lt;h2 class=&quot;margin-bottom-zero&quot;&gt;Product Design Through Stories&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Tammie Lister&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just a few select quotes to share from &lt;a href=&quot;https://speakerdeck.com/tammielis/product-design-through-stories&quot;&gt;Tammie’s talk&lt;/a&gt;, which may or may not be paraphrased. Life moves fast.&lt;/p&gt;

&lt;p&gt;“We are, as a species, addicted to story. Even when the body goes to sleep, the mind stays up all night, telling itself stories.” —Jonathan Gottschall&lt;br /&gt;
“Products with stories are powerful. When the story is good, the bond with the product is strong.”&lt;br /&gt;
“It’s important that everyone creating the product is involved in telling the story.”&lt;/p&gt;

&lt;p&gt;Tammie made the point that a product has several different stories surrounding it. There are those people who use the product, the people who make the product, and the effect the product has by existing. Not only do you want to be aware of the story that the product is telling others, you also want to maintain the story internally.&lt;/p&gt;

&lt;p&gt;“Being too fast can be as bad as being too slow.”&lt;/p&gt;

&lt;p&gt;This was an idea that caught my attention. Sometimes, a process can happen so quickly that it overwhelms a user. Maybe they miss what happened because you gave them too much information at once, or you used too many channels to communicate.&lt;/p&gt;

&lt;p&gt;I’d recently learned about the idea of setting a minimum loading time on an ajax request, so that it doesn’t come back too quickly, and I think this connects to Tammie’s point. If something is too quick, you lose a little trust. Like, maybe it didn’t try hard enough. For human speed, maybe inflating the loading time just a touch will actually make the experience feel more robust.&lt;/p&gt;

&lt;p&gt;If you happen to be using a poor connection, this is likely the opposite of a problem, but still worth thinking about for those users with speedy connections.&lt;/p&gt;

&lt;p&gt;Last, but not least:&lt;/p&gt;

&lt;p&gt;“The details are not the details. They make the design.” —Charles Eames&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Dec 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/posts/notes-from-wordcamp-us/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/notes-from-wordcamp-us/</guid>
        
        
        <category>WordPress</category>
        
      </item>
    
      <item>
        <title>Disabling blocks and block styles in Gutenberg</title>
        <description>&lt;p&gt;As with most things involving Gutenberg, this could change, and may not be best practice later on, but it’s what I’ve found to work for the time being. Both blocks and block styles can be disabled through JavaScript, using &lt;code class=&quot;highlighter-rouge&quot;&gt;wp.domReady()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First things first, a JavaScript file needs to be enqueued in the Gutenberg editor, which can be accomplished by hooking into &lt;code class=&quot;highlighter-rouge&quot;&gt;enqueue_block_editor_assets&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;namespace_block_editor_scripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wp_enqueue_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'namespace-core-blocks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core-blocks.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wp-blocks'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;add_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'enqueue_block_editor_assets'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'namespace_block_editor_scripts'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;core-blocks.js&lt;/code&gt;, it’s fairly simple to disable blocks and block styles. The tricky part is knowing how they are named, which can take some digging. My example only disables the Verse and Cover blocks, and the “Dots” option in the Separator block. Take note of the two &lt;code class=&quot;highlighter-rouge&quot;&gt;unregisterBlockType&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;unregisterBlockStyle&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domReady&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unregisterBlockType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'core/verse'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unregisterBlockType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'core/cover'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unregisterBlockStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'core/separator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dots'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on the discussion happening in &lt;a href=&quot;https://github.com/WordPress/gutenberg/issues/11338&quot;&gt;issue #11338&lt;/a&gt; on Github, &lt;code class=&quot;highlighter-rouge&quot;&gt;wp.domReady()&lt;/code&gt; seems to be the best place to unregister block types and styles at the moment, though it may not be necessary in the future. It would also be nice to control this in PHP, which may eventually be an option as well.&lt;/p&gt;

&lt;p&gt;Like I said before, things with Gutenberg are actively changing. I’ll be keeping this post updated with the latest information as I learn it. If you know of a better, more official way, do &lt;a href=&quot;https://samhermes.typeform.com/to/d4C4FT&quot;&gt;let me know&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Nov 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/posts/disabling-blocks-block-styles-gutenberg/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/disabling-blocks-block-styles-gutenberg/</guid>
        
        
        <category>WordPress</category>
        
      </item>
    
      <item>
        <title>Replacing Moment.js with date-fns</title>
        <description>&lt;p&gt;In my &lt;a href=&quot;https://samhermes.com/next-spacex-launch/&quot;&gt;Next SpaceX Launch&lt;/a&gt; app, data is pulled from a &lt;a href=&quot;https://github.com/r-spacex/SpaceX-API&quot;&gt;SpaceX API&lt;/a&gt;. It returns date and time information for each launch, which needs to be formatted before being displayed. When I started on this project, I quickly found Moment.js and determined that it could get the job done. It was easy to format a date with the following:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Moment&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MMMM DD, YYYY&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;launch_date_local&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Moment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This accepts the date and time string and returns a formatted date in &lt;code class=&quot;highlighter-rouge&quot;&gt;MMMM DD, YYYY&lt;/code&gt; format. Using this for time is similar, just passing in &lt;code class=&quot;highlighter-rouge&quot;&gt;h:mm a&lt;/code&gt; as the format.&lt;/p&gt;

&lt;p&gt;The issue with using Moment.js for this is that it’s just simply overkill, as demonstrated by the &lt;a href=&quot;https://github.com/you-dont-need/You-Dont-Need-Momentjs&quot;&gt;You-Dont-Need-Momentjs&lt;/a&gt; repo. In my simple application, I’m merely wanting to format a handful of dates. Passing Moment.js off to the user means that they are loading extra code in the browser unnecessarily. Fortunately, there’s a simpler library, &lt;code class=&quot;highlighter-rouge&quot;&gt;date-fns&lt;/code&gt; that gets the job done in much the same way.&lt;/p&gt;

&lt;p&gt;I uninstalled &lt;code class=&quot;highlighter-rouge&quot;&gt;react-moment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;moment&lt;/code&gt; from my project, and then installed &lt;code class=&quot;highlighter-rouge&quot;&gt;date-fns&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;$ npm uninstall react-moment
$ npm uninstall moment
$ npm install date-fns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then updated the import statement inside of each component.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'date-fns/format'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, in the app, in the places where I was using &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Moment&amp;gt;&lt;/code&gt;, I swapped it out for &lt;code class=&quot;highlighter-rouge&quot;&gt;format()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;launch_date_local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MMMM DD, YYYY'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simple as that! In the end, the end user gets a completed page a little quicker, with the exact same functionality.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Nov 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/posts/replacing-moment-js-date-fns/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/replacing-moment-js-date-fns/</guid>
        
        
        <category>React</category>
        
      </item>
    
      <item>
        <title>Upgrading from Gulp 3 to 4</title>
        <description>&lt;p&gt;We love when things just keep getting better! Gulp 4 has many new features, and with just a few changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;, it’s easy to make the upgrade. Gulp 4 was officially released on December 31, 2017.&lt;/p&gt;

&lt;p&gt;The biggest change is in how tasks are ordered. Previously, if there was a list of tasks that you wanted to complete, they would happen sequentially. Now, with a mixture of &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.series()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.parallel()&lt;/code&gt;, you can be a little more specific. &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.series()&lt;/code&gt; will complete tasks sequentially, like before, and &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.parallel()&lt;/code&gt; will complete them at the same time.&lt;/p&gt;

&lt;p&gt;Let’s look at a 1 to 1 conversion. These are the changes I needed to make to my watch task, just to get things working like they were in Gulp 3.&lt;/p&gt;

&lt;p&gt;For my watch task, I had:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'watch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./sass/**/*.scss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The change that needs to be made here is with the &lt;code class=&quot;highlighter-rouge&quot;&gt;['sass']&lt;/code&gt; array. This defines which tasks should run when the watch tasks detects a change to any &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sass&lt;/code&gt; folder or any of its children. Since there is only one task to run, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.series()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./sass/**/*.scss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a simple change, and things get only a little more complicated when there is more than one task to run. In my case, it was the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; task. In it, I run the &lt;code class=&quot;highlighter-rouge&quot;&gt;sass&lt;/code&gt; task, and then start the &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; task.&lt;/p&gt;

&lt;p&gt;Previously, it looked like this, a simple array:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'watch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.parallel()&lt;/code&gt; to accomplish the same result. This just means that these two tasks are free to run at the same time, as they are not dependent on one another.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sass'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'watch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; is up to date and ready for Gulp 4, it’s time to actually do the upgrade. This is straightforward with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;. The following commands upgrade the global Gulp installation, by first removing the old version and then installing new.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://github.com/pattern-lab/edition-node-gulp/wiki/Updating-to-Gulp-4&quot;&gt;this note in the Pattern Lab repo&lt;/a&gt;, “Gulp 4 uses an updated CLI which needs to be updated globally. This CLI is backwards compatible with any Gulp 3.X projects you may have locally.”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;$ npm rm -g gulp
$ npm install -g gulp-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that Gulp is upgraded globally, each individual project needs to be updated to take advantage of it. Just like the global upgrade, the following commands uninstall the local version and then install the new.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;$ npm uninstall gulp --save-dev
$ npm install gulp@^4.0.0 --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re off to the races!&lt;/p&gt;

</description>
        <pubDate>Sun, 11 Nov 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/posts/upgrading-from-gulp-3-to-4/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/upgrading-from-gulp-3-to-4/</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>How to add multiple default markers with popups in Mapbox GL JS</title>
        <description>&lt;p&gt;To create my &lt;a href=&quot;https://samhermes.com/travel-map&quot;&gt;travel map&lt;/a&gt;, I used Mapbox GL JS. After the map embed loads from Mapbox, it fires off an ajax request to a WordPress site where the location data is stored. The map gets the response in JSON, which is then used to build a geoJSON object that the map will understand. From there, adding the data to the map is fairly easy, if you know what you’re doing.&lt;/p&gt;

&lt;p&gt;Adding a single marker to a Mapbox embed is straightforward. The Mapbox documentation site provides a &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/api/#marker&quot;&gt;working example&lt;/a&gt; that can be emulated, but doesn’t give explicit instructions for what to do if you have multiple points. In my case, I also wanted to add a popup for each of the markers with a title and visit count.&lt;/p&gt;

&lt;p&gt;Now that I’m on the other side of this issue, it seems so straightforward. In order to get here, though, I used a &lt;a href=&quot;https://www.mapbox.com/help/demos/gl-store-locator/step-five.html&quot;&gt;store locator demo from Mapbox&lt;/a&gt;. It’s slightly more complicated than what I was looking for, but it contained the structure that I was looking for. If you open the inspector on that page, there’s a script tag at the bottom of the page that contains the relevant JS.&lt;/p&gt;

&lt;p&gt;To add more than one marker, all that’s needed is a &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; loop. If coming from geojson, you can loop over the &lt;code class=&quot;highlighter-rouge&quot;&gt;features&lt;/code&gt; array. In the store locator demo, that looks like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Within the forEach, it’s simple to create a new marker for each point in the &lt;code class=&quot;highlighter-rouge&quot;&gt;features&lt;/code&gt; array.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLngLat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The store locator example, like all of the others provided by Mapbox, uses a custom icon for each marker. I prefer the default Mapbox marker style, so the part of the demo where it creates an empty div for each marker is unnecessary, and actually removes the default icon when set in the &lt;code class=&quot;highlighter-rouge&quot;&gt;new mapboxgl.marker&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;To add a popup to each marker, there are a number of ways to go about it. This was confusing to me at first, as some demos show a way to use just one popup, and update it as each marker is clicked on or activated. This is not necessary, as you can create a popup for each marker, and the map handles the display.&lt;/p&gt;

&lt;p&gt;Above the &lt;code class=&quot;highlighter-rouge&quot;&gt;new mapboxgl.Marker()&lt;/code&gt; call above, building a popup is done very similarly:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a popup created, a slight modification to the marker setup will ensure that the popup is attached to the appropriate marker.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLngLat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An working version of this code can be &lt;a href=&quot;https://github.com/samhermes/samhermes.github.io/blob/master/js/travel-map.js#L42&quot;&gt;seen on Github&lt;/a&gt;, where I customize the popup styles a bit. This is what is currently running my travel map.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Oct 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/multiple-markers-popups-mapbox/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/multiple-markers-popups-mapbox/</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
  </channel>
</rss>
