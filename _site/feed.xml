<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sam Hermes</title>
    <description>Web developer at Washington University in St. Louis</description>
    <link>http://samhermes.com/</link>
    <atom:link href="http://samhermes.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 07 Aug 2016 21:58:06 -0500</pubDate>
    <lastBuildDate>Sun, 07 Aug 2016 21:58:06 -0500</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>What changes on hover should be actionable</title>
        <description>&lt;p&gt;This falls clearly in the realm of opinion, but I thought I’d share my thoughts anyway. If an item has a hover state, that hover state should highlight the part of the item that an action can be taken on. To illustrate this, I’ve created an example card. When hovering over the card, an outline appears. However, only the link at the bottom is actionable.&lt;/p&gt;

&lt;div class=&quot;card-container&quot;&gt;
  &lt;div class=&quot;card&quot;&gt;
    &lt;h1&gt;Porano Pasta&lt;/h1&gt;
    &lt;p&gt;Fast Casual Italian&lt;/p&gt;
    &lt;a href=&quot;http://poranopasta.com&quot;&gt;Visit Site&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Hover states are becoming less and less important, but I still feel that this requires some consideration. I think that anything that changes when you hover over it should be one link. If there are multiple links within the element, then there should be no hover effect applied. Again, the card example, but with the link covering the entire element.&lt;/p&gt;

&lt;div class=&quot;card-container&quot;&gt;
  &lt;a href=&quot;http://poranopasta.com&quot;&gt;
    &lt;div class=&quot;card&quot;&gt;
      &lt;h1&gt;Porano Pasta&lt;/h1&gt;
      &lt;p&gt;Fast Casual Italian&lt;/p&gt;
      &lt;p class=&quot;action&quot;&gt;Visit Site&lt;/p&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Usually, as a page is navigated, the hover states are what indicates that something is actionable, so keeping this behavior will provide a more cohesive experience.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://samhermes.com/posts/what-changes-on-hover-should-be-actionable/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/what-changes-on-hover-should-be-actionable/</guid>
        
        
      </item>
    
      <item>
        <title>Sticky elements with Stickyfill</title>
        <description>&lt;p&gt;Sticky elements seem to be everywhere, following you wherever you scroll. There are many ways to implement sticky positioning, but as support comes to browsers natively, the best way right now is to use a polyfill. This is where Stickyfill comes in. If &lt;code class=&quot;highlighter-rouge&quot;&gt;position: sticky&lt;/code&gt; is not supported, it mimics the behavior. As soon as support comes to all major browsers, the polyfill can be removed. At the moment, it is supported in Firefox and Safari, and is behind a flag in Chrome and Opera. Considering that it is most commonly used on larger screens, the support is strong.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/wilddeer/stickyfill&quot;&gt;download Stickyfill on Github&lt;/a&gt;. There is a demo and a few use cases provided. I’m sure there are some cases where this isn’t the best option, but I think the polyfill approach is best in most implementations.&lt;/p&gt;

&lt;p&gt;Taken directly from the readme, you can hook Stickyfill up with the following JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var stickyElements = document.getElementsByClassName(&#39;sticky&#39;);
for (var i = stickyElements.length - 1; i &amp;gt;= 0; i--) {
  Stickyfill.add(stickyElements[i]);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have been using Stickyfill with a WordPress site, so I have changed the class to simply &lt;code class=&quot;highlighter-rouge&quot;&gt;stick&lt;/code&gt; so that it will not interfere with sticky posts.&lt;/p&gt;

&lt;p&gt;While your implementation may be much more complex, applying the following styles to a sidebar would be all you would need to get started.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.sticky {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my project, I set the value of top to &lt;code class=&quot;highlighter-rouge&quot;&gt;15px&lt;/code&gt; to give a little room above the element. Also, I added an additional selector that would account for the WordPress admin bar, so the value of top is &lt;code class=&quot;highlighter-rouge&quot;&gt;47px&lt;/code&gt; when the &lt;code class=&quot;highlighter-rouge&quot;&gt;.admin-bar&lt;/code&gt; class is present. This makes sure that even users who are signed in see a properly formatted site.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jul 2016 00:00:00 -0500</pubDate>
        <link>http://samhermes.com/posts/sticky-elements-with-stickyfill/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/sticky-elements-with-stickyfill/</guid>
        
        
      </item>
    
      <item>
        <title>Maintaining state with sessionStorage</title>
        <description>&lt;p&gt;When a multi-level menu is collapsed on a small screen, it can difficult to communicate a sense of place as someone is navigating between pages. If the page is several levels deep in the hierarchy, it is really frustrating to dig back down to it if you’d like to view a sibling page. One way to manage this is to let the browser remember your location with sessionStorage.&lt;/p&gt;

&lt;p&gt;To start, you need to give a unique ID to each menu item that has children. If you’re working with WordPress, you could use the built in page ID, since you know that it will be unique.&lt;/p&gt;

&lt;p&gt;We only need to keep one ID in sessionStorage at a time, so we listen for a click event on all of the elements serving as a toggle and update sessionStorage each time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;.main-menu li&#39;).click(function() {
  var menu_state = $(this).prop(&#39;class&#39;).match(/page-([0-9]+)/)[1];
  sessionStorage.setItem(&#39;menu_state&#39;, menu_state);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets the name of the sessionStorage item to be ‘menu_state’, and then stores the ID as the value. As a submenu is toggled, this value is updated. Move to another page, and the last value is still remembered by the browser.&lt;/p&gt;

&lt;p&gt;You can view all of the sessionStorage items that have been set in your browser in the web inspector. In Chrome, go to the Resources tab. In Safari and Firefox, go to the Storage tab. A nice feature of sessionStorage is that the browser clears it as soon as you close the page.&lt;/p&gt;

&lt;p&gt;Retrieving a value from sessionStorage is very similar to setting it. We perform this action when the document is ready instead of waiting for a click event.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var menu_state = sessionStorage.getItem(&#39;menu_state&#39;);
if( menu_state ) {
  $(&#39;.page-&#39; + menu_state).addClass(&#39;open&#39;);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This applies a class of &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; to the menu that was open on the last page. Now, given that &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; has a bit of CSS behind it, when someone opens the mobile menu, they’ll still be in the same place where they were. Magic.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Apr 2016 00:00:00 -0500</pubDate>
        <link>http://samhermes.com/posts/maintaining-state-with-sessionstorage/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/maintaining-state-with-sessionstorage/</guid>
        
        
      </item>
    
      <item>
        <title>Caching a menu in a transient in WordPress</title>
        <description>&lt;p&gt;Menus in WordPress are expensive to generate, in terms of site performance. On every page load, the site is rebuilding almost the exact same thing, and it gets more expensive as the number of menu items increases. The only difference between pages is the current page classes that get applied. What if we stored the menu in a transient, and applied the current page classes on the front end using JavaScript?&lt;/p&gt;

&lt;p&gt;The first thing we do is check to see if the transient doesn’t exist with a conditional (which it doesn’t, yet), using get_transient and passing in the name of the transient, which we’ll specify later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ( ! get_transient( &#39;header-menu&#39; ) ) {&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, if the transient doesn’t exist (which it doesn’t, yet), we generate the menu, and store the result in a variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$menu = wp_nav_menu( array(
  &#39;theme_location&#39; =&amp;gt; &#39;header-menu&#39;,
  &#39;echo&#39; =&amp;gt; 0
) );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to disable echo here, as we don’t want to print it to the page just yet.&lt;/p&gt;

&lt;p&gt;Once we have the menu stored in a variable, we can set a transient. This part of the process is relatively simple. You give the transient a name, pass in the menu variable, and tell it how long to keep it before clearing it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;set_transient( &#39;header-menu&#39;, $menu, 60*60*24 );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, I’ve named the transient “header-menu”, and told it to save it for 1 day (60 seconds times 60 times 24). I’m not sure what the ideal transient lifetime is, but if the menu will rarely change, you could set it for much longer than a day.&lt;/p&gt;

&lt;p&gt;Next, continuing with the conditional, if the transient does exist, we just need to retrieve it and set it to the menu variable. And, after that, we echo out the menu variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;} else {
  $menu = get_transient( &#39;header-menu&#39; );
}
echo $menu;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last piece of the transient is clearing it whenever an update is made to the menu. This function can be added to functions.php. This function looks for a menu in the ‘header-menu’ menu location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;function site_nav_clear_transient( $menu_id ) {
  $theme_locations = get_nav_menu_locations();
  $term = get_term( $theme_locations[&#39;header-menu&#39;], &#39;nav_menu&#39; );
  $id = $term-&amp;gt;term_id;
  if ( $menu_id = $id ) {
    delete_transient( &#39;header-menu&#39; );
  }
}
add_action( &#39;wp_update_nav_menu&#39;, &#39;site_nav_clear_transient&#39; );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it for the transient, but now we need to reapply the class for the current page. We accomplish that with a little jQuery.&lt;/p&gt;

&lt;p&gt;This approach is fairly simple. On page load, we get the URL of the current page using &lt;code&gt;window.location.href&lt;/code&gt;, store the result in a variable, and then use that variable to find a matching &lt;code&gt;href&lt;/code&gt; attribute. It’s as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var url = window.location.href;
$(&#39;.header-menu a[href=&quot;&#39; + url + &#39;&quot;]&#39;).addClass(&#39;current-page&#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The jQuery selector looks for an anchor tag inside of an element with the class of ‘header-menu’, matches the url variable we passed in, and then adds a class of ‘current-page’.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 16:38:00 -0500</pubDate>
        <link>http://samhermes.com/posts/caching-menu-in-transient-in-wordpress/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/caching-menu-in-transient-in-wordpress/</guid>
        
        
      </item>
    
      <item>
        <title>Toggling elements with JavaScript</title>
        <description>&lt;p&gt;One of the most performant ways to toggle an element with JavaScript is to apply and remove a class. Paul Irish pointed out last year that using jQuery’s .hide(), .show(), and .toggle() methods are very costly. I’ve used/am currently using each of these, as they are really easy to understand and implement. However, you’ll see that a plain JavaScript approach isn’t too difficult.&lt;/p&gt;

&lt;p&gt;For my site, I needed a toggle for the menu on small screens. I used the following to add and remove a class named ‘open’, which has the proper styles to show the menu. In this case, it is performed when an element with the class of ‘toggle’ is clicked.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
  var menu = document.querySelector(&#39;.toggle&#39;);
  menu.onclick = function(){
    menu.classList.toggle(&#39;open&#39;);
  }
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 14:20:00 -0600</pubDate>
        <link>http://samhermes.com/posts/toggling-elements-with-javascript/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/toggling-elements-with-javascript/</guid>
        
        
      </item>
    
      <item>
        <title>Setting up Jekyll</title>
        <description>&lt;p&gt;I recently switched this site to Jekyll, and I thought I’d share the setup process. Jekyll was a bit slow the last time I used it, so I was excited to find that the 3.0.0 update included speed improvements that make updates available in the browser almost immediately. Here are some of the configuration changes I made outside of the defaults:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changed the permalink structure to &lt;code class=&quot;highlighter-rouge&quot;&gt;/posts/:title/&lt;/code&gt;. I made this update in config.yml, refreshed the site, and nothing changed. A little digging, and I found out that changes to config.yml will not be processed while &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; is running. You’ll need to ctrl-c and &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; again.&lt;/li&gt;
  &lt;li&gt;I was using m/d/Y to display dates, and so in looking at how to set that up in Jekyll, I found an &lt;a href=&quot;http://alanwsmith.com/jekyll-liquid-date-formatting-examples&quot;&gt;article from Allan W. Smith&lt;/a&gt; that detailed all of the possibilities. It can be accomplished with &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post.date&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;date:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;%-m/%-d/%Y&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;I display excerpts from posts on the homepage, and in order to specify those manually, you can add an &lt;code class=&quot;highlighter-rouge&quot;&gt;excerpt:&lt;/code&gt; declaration to the YAML front matter on each post and specify the excerpt there. It can then be output with &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post.excerpt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. Jekyll will automatically give you an excerpt, but for posts that start with a code snippet, that was not ideal.&lt;/li&gt;
  &lt;li&gt;For posts that include code snippets, I use &lt;a href=&quot;http://prismjs.com/&quot;&gt;prism.js&lt;/a&gt; for formatting. To include the file only on posts that use it, I add &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_js: prism&lt;/code&gt;  to the front matter. In footer.html, I’ve added the following, which takes care of outputting the script tag:
    &lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;{% if page.custom_js %}
  {% for js_file in page.custom_js %}&lt;/code&gt;
    &lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script src=&#39;/js/{{ js_file }}.js&#39; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;
  &lt;code class=&quot;language-markup&quot;&gt;{% endfor %}
{% endif %}&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;This also allows for the possibility of additional js files, so I can just add the name of a file I’d like to include to the &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_js&lt;/code&gt; declaration. Learned this trick on &lt;a href=&quot;http://mattgemmell.com/page-specific-assets-with-jekyll/&quot;&gt;Matt Gemmell’s site&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I wanted my 404 page to live at /404.html. By default, Jekyll takes that and moves it to /404/index.html. To change that, I added &lt;code class=&quot;highlighter-rouge&quot;&gt;permalink: /404.html&lt;/code&gt; to the YAML front matter on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew. That was more that I thought. Hope this helps speed things up for you.&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Feb 2016 01:15:00 -0600</pubDate>
        <link>http://samhermes.com/posts/setting-up-jekyll/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/setting-up-jekyll/</guid>
        
        
      </item>
    
      <item>
        <title>Output featured image caption in WordPress</title>
        <description>&lt;p&gt;It’s relatively easy and well documented to output a featured image, but getting the caption is a little trickier. Here’s the code I use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$post_thumbnail_caption = get_post( get_post_thumbnail_id() )-&amp;gt;post_excerpt;

if ( ! empty( $post_thumbnail_caption ) ) {
    echo &#39;&amp;lt;p class=&quot;featured-image-caption&quot;&amp;gt;&#39; . esc_html( $post_thumbnail_caption ) . &#39;&amp;lt;/p&amp;gt;&#39;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If you are expecting to output HTML inside captions, use &lt;code&gt;wp_kses_post()&lt;/code&gt; in place of &lt;code&gt;esc_html()&lt;/code&gt;. While not as performant, it allows the same tags that are allowed inside post content, such as links, italics, bolding, etc.&lt;/p&gt;

&lt;p class=&quot;last-updated&quot;&gt;Last Updated: 2/3/2016&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 12:00:00 -0600</pubDate>
        <link>http://samhermes.com/posts/output-featured-image-caption-wordpress/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/output-featured-image-caption-wordpress/</guid>
        
        
      </item>
    
      <item>
        <title>Add 1 hour to date &amp; time in PHP</title>
        <description>&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;strtotime($time . &#39;+ 1 hour&#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is probably the most magical thing I’ve ever done PHP. Pass in the date and time (in this case, in a variable), tell it what you want to do with it, and out comes the updated date and time. I needed to add an hour to the time I was working with. Seems simple until you think about transition to the next day. This function takes care of advancing the date to the next day if necessary.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jan 2016 12:00:00 -0600</pubDate>
        <link>http://samhermes.com/posts/add-one-hour-to-date-and-time-in-php/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/add-one-hour-to-date-and-time-in-php/</guid>
        
        
      </item>
    
      <item>
        <title>Using vertical height media queries with fixed headers</title>
        <description>&lt;p&gt;On a site with tall pages, setting up a fixed header can make a lot of sense. Why not use that extra screen real estate? The philosophies of responsive design can and should apply to this as well. Screen height should be taken into account, and fixed headers should be disabled if there is not enough height for them to be useful (although, I would argue that they are never useful).&lt;/p&gt;

&lt;p&gt;Let’s say that the fixed header on a site is 80px tall. Nothing too unruly, but it might get in the way of someone on a smaller laptop as they are browsing your site. In this example, you could set the header to fixed if the viewport is at least 800px tall. Any shorter and let that header scroll away out of sight.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@media screen and (min-height: 800px) {
    header {
        position: fixed;
        top: 0;
        left: 0;
    }
    body {
        margin-top: 80px;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll want to replace the space you’re creating when the header is fixed by applying the height of the header as margin-top of the body element.&lt;/p&gt;

&lt;p&gt;To take this a bit further, you could combine this with a max-width media query so that the header would not be fixed below a specified width, something like 600px. In that way, you are only applying a fixed header when there is plenty of room.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 12:00:00 -0600</pubDate>
        <link>http://samhermes.com/posts/using-vertical-height-media-queries-with-fixed-headers/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/using-vertical-height-media-queries-with-fixed-headers/</guid>
        
        
      </item>
    
      <item>
        <title>Designing for every moment</title>
        <description>&lt;p&gt;Responsive design is truly about each and every point in between the smallest supported viewport and the largest, which leaves a lot of possibilities. If truly designing for a fully responsive experience, you should give attention to the awkward moments of change. One of those moments is when an element comes into contact with the edge of the screen.&lt;/p&gt;

&lt;p&gt;If there is a centered image on the page with no border or additional styles around it, what happens when the width of the browser window is about 10px wider than the image? It leaves a small gutter along each side. Is this an issue? Maybe not. I still think it deserves consideration.&lt;/p&gt;

&lt;p&gt;It depends on the case, but on a few occasions I have adjusted the behavior of those images so that there are no awkward in-between moments. When the image got to have less than 10px on each side, I stretched the image to fill the entire width of the screen. This is usually okay, as long as the image has a little extra resolution to give. Of course, we wouldn’t want to stretch an image beyond it’s natural size.&lt;/p&gt;

&lt;p&gt;If this is applied to an image, this means that there are no situations where the image has a small gutter along each side, which means that each and every moment along the responsive spectrum has been thought of and cared for.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 12:00:00 -0600</pubDate>
        <link>http://samhermes.com/posts/designing-for-every-moment/</link>
        <guid isPermaLink="true">http://samhermes.com/posts/designing-for-every-moment/</guid>
        
        
      </item>
    
  </channel>
</rss>
