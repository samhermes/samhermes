<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sam Hermes</title>
    <description>Web developer at Washington University in St. Louis</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 21 Jan 2018 15:55:20 -0600</pubDate>
    <lastBuildDate>Sun, 21 Jan 2018 15:55:20 -0600</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>CSS skills should be valued as much as JavaScript skills</title>
        <description>&lt;p&gt;Honestly, this should have just been a tweet, because it’s as simple as that. However, I deleted my account so we’re just going to have to give it deeper consideration.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-feel-this-way&quot;&gt;Why do I feel this way?&lt;/h2&gt;

&lt;p&gt;A few months ago there were discussions about the job title “front end developer” and exactly what responsibilities fall under that domain. From the developers viewpoint, what should they be studying up on? From a hiring manager’s viewpoint, what skills should they be asking for, expecting, interviewing on, etc.? Looking at a sampling of job postings, it seems to be that front end developers need to know JavaScript, and maybe CSS gets listed next to HTML. You should know React, Angular, Vue (that all three of those would ever end up in the same listing is concerning), and then everything else is pretty much secondary.&lt;/p&gt;

&lt;p&gt;Who is responsible for the styles then? Who is going to ensure that your interfaces don’t fall apart the moment you add new functionality? Who is even keeping track of patterns, components, shared standards? Apparently a front end developer spends something like 2% of their time on these things?&lt;/p&gt;

&lt;h2 id=&quot;why-is-this-important&quot;&gt;Why is this important?&lt;/h2&gt;

&lt;p&gt;Performance, accessibility, maintainability, user experience… I could go on.&lt;/p&gt;

&lt;p&gt;If you know CSS really well, you know how to ship performative CSS. You know how to ship less CSS. You know how to ship accessible CSS. And these are two incredibly important aspects of any web project. As the web continues to reach people it never has before, performance and accessibility just get more important.&lt;/p&gt;

&lt;p&gt;Additionally, as more and more CSS is added to a project, the harder it is to keep track of it all. Creating style guides, pattern libraries, and component systems are all important tasks for the longevity of a project. The developers who create a project may not maintain it in 2 years, and someone with strong CSS skills is writing code with an eye to the future.&lt;/p&gt;

&lt;h2 id=&quot;what-do-we-do&quot;&gt;What do we do?&lt;/h2&gt;

&lt;p&gt;A little while ago, I switched my title on my website to “UI Developer,” as it seems to better describe my skills, abilities, and talent. I don’t think that “front end developer” accurately describes my role anymore, even though my day to day work hasn’t changed that much. So, part of the solution is for developers who love this part of the stack to own it.&lt;/p&gt;

&lt;p&gt;Beyond titles, we need to adjust how we talk about CSS skills. Unlike JavaScript, it can be hard to define what “good” CSS is. It’s a little more subjective. Writing or talking about CSS can involve more gray area, which is harder to talk about than a straightforward snippet of code. However, we need to be having these conversations. Discussions should happen around how UI elements work within a larger system, and how to make exceptions. We need to talk about browser support and what can cause accessibility issues. Also, beyond a chosen methodology, we have to think about how we get everyone on the same page with how we create UI within our organizations.&lt;/p&gt;

&lt;p&gt;As much as I’m feeling this issue of giving CSS priority, my own site is having trouble. It can be difficult to write and share CSS outside of a larger system, and the posts are slightly more difficult to write. It’s been a concern of mine for a while now that my writing doesn’t align well with what I am most interested in. This is definitely something I need to course correct on. Walk the talk!&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/posts/but-what-about-css-skills/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/but-what-about-css-skills/</guid>
        
        
      </item>
    
      <item>
        <title>Getting started with CSS grid</title>
        <description>&lt;p&gt;CSS grid has been out in the wild for a little while now, and though I still have a little hesitation about putting it into production, it’s worth studying up on it. For all of the complexity that CSS grid brings, it’s incredibly simple to get started. Many of the basic layout tasks that I’ve attempted so far have only required a few properties to be specified on the parent element. Let’s look at a run-of-the-mill example.&lt;/p&gt;

&lt;h2 id=&quot;two-column-layout&quot;&gt;Two Column Layout&lt;/h2&gt;

&lt;p&gt;One of the most common layouts, this used to require a pairing of floats and widths. Although &lt;code class=&quot;highlighter-rouge&quot;&gt;calc()&lt;/code&gt; introduced new possibilities for how widths could be calculated, it still wasn’t powerful (or easy) enough.&lt;/p&gt;

&lt;p&gt;We begin by enabling grid on the parent element with a new value for the display property.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.two-column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From there, we need to decide the widths for each column. For a sidebar, we could set up a fixed or flexible width for it. Here, we give it a fixed width of &lt;code class=&quot;highlighter-rouge&quot;&gt;15em&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.two-column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15em&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you probably noticed, we’ve got a new measurement in use here. CSS grid adds the &lt;code class=&quot;highlighter-rouge&quot;&gt;fr&lt;/code&gt; unit, or fraction unit. It’s incredibly powerful, and here, using &lt;code class=&quot;highlighter-rouge&quot;&gt;1fr&lt;/code&gt;, it fills up the remaining space.&lt;/p&gt;

&lt;p&gt;We can use the fraction unit to develop our own grid system of sorts, and the possibilities are unlimited. To create a percentage-based layout similar to what we’ve already done, we use two values in fractions.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.two-column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we’re on a fairly large screen, this layout probably looks great. However, we probably only want to apply it when the screen is wider than &lt;code class=&quot;highlighter-rouge&quot;&gt;600px&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;37.5em&lt;/code&gt;, or so.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;37.5em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;.two-column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15em&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This feels really familiar, and goes along with what we’ve been doing with flexbox. Using grid with media queries, we only apply the layout changes when we’d like them to take effect.&lt;/p&gt;

&lt;p&gt;The last piece of this layout is the most exciting. Whereas we needed to perform quite a bit of management of the margin between elements with float layouts, this is no longer an issue. Grid gap takes care of this in a clean, simple way. Floats required adding margin to both sides, or removing it from the last child. Grid gap just gets to the point.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.two-column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15em&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;py&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we’re telling grid to set the first column to &lt;code class=&quot;highlighter-rouge&quot;&gt;15em&lt;/code&gt;, then add a blank &lt;code class=&quot;highlighter-rouge&quot;&gt;5em&lt;/code&gt; gap, and then fill up the remaining space with the second element. A flexible or fixed value could be used here, just like with our column measurements.&lt;/p&gt;

&lt;p&gt;It’s incredibly exciting to have such a powerful layout engine baked into browsers, and I can’t wait to use these properties in production. With the appropriate fallbacks, those who wish to live on the edge can use CSS grid in production today. I’ll be writing about how that can be done next.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Nov 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/posts/getting-started-with-css-grid/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/getting-started-with-css-grid/</guid>
        
        
      </item>
    
      <item>
        <title>Buttons need a declared type</title>
        <description>&lt;p&gt;When using a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element, the default type is &lt;code class=&quot;highlighter-rouge&quot;&gt;submit&lt;/code&gt;. So, if you’re just going for a toggle button or other interactive functionality, &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;button&quot;&lt;/code&gt; should be added.&lt;/p&gt;

&lt;p&gt;I was reading through &lt;a href=&quot;https://css-tricks.com/random-interesting-facts-htmlsvg-usage/#article-header-id-12&quot;&gt;an article in CSS Tricks&lt;/a&gt; from last November about HTML/SVG usage, and it notes that in their study of sites in the wild, about 30% of buttons did not have any attribute at all. Hate to admit, I think I’ve contributed to that figure.&lt;/p&gt;

&lt;p&gt;Of additional interest, buttons do not need &lt;code class=&quot;highlighter-rouge&quot;&gt;role=&quot;button&quot;&lt;/code&gt; as it is implied. This is according to the &lt;a href=&quot;https://w3c.github.io/html/sec-forms.html#the-button-element&quot;&gt;HTML specification on buttons&lt;/a&gt;, where it notes that ARIA roles that match the implicit role of the element are not recommended. Further reading about this can be found at &lt;a href=&quot;https://w3c.github.io/html/dom.html#aria-authoring-requirements&quot;&gt;w3c.github.io/html/dom.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Oct 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/buttons-need-declared-type/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/buttons-need-declared-type/</guid>
        
        
      </item>
    
      <item>
        <title>Append theme version to stylesheet</title>
        <description>&lt;p&gt;With browsers getting more aggressive about holding on to local cache, it can be aggravating to hear that an end user doesn’t see updates, or they see something quite broken because a few styles are missing. This can be improved by appending a version number to the end of any stylesheet in your project.&lt;/p&gt;

&lt;p&gt;In WordPress, the version number can come straight from the theme. To get the theme’s current version, make a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;wp_get_theme()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$theme_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wp_get_theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Version'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This returns the theme’s current version and stores it in a variable. To use the &lt;code class=&quot;highlighter-rouge&quot;&gt;$theme_version&lt;/code&gt; variable when enqueuing styles, add it like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nx&quot;&gt;wp_enqueue_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'theme-style'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_stylesheet_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$theme_version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, for this to be effective, you’ll want to bump your theme’s version any time you have a new release. Now, whether you’re developing or publicly releasing a new feature, you can rest easier knowing that your end users are seeing what you’re seeing.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Sep 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/append-theme-version-to-stylesheet/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/append-theme-version-to-stylesheet/</guid>
        
        
      </item>
    
      <item>
        <title>Explaining accessible modals</title>
        <description>&lt;p&gt;Accessibility on the web is tricky, and modals are even trickier. Fortunately, there seem to be quite a few resources for getting there, one being &lt;a href=&quot;https://frend.co&quot;&gt;Frend&lt;/a&gt;. It includes a component for an accessible modal that provides a small JavaScript library that hooks up to a modal and takes care of the rest. Only problem is that it’s a little too component-ized to understand what’s going on under the hood. The documentation says that you can just call &lt;code class=&quot;highlighter-rouge&quot;&gt;var myModal = Frdialogmodal();&lt;/code&gt; and you’re good to go. But what’s really happening, and how might we adapt it for our own use?&lt;/p&gt;

&lt;p&gt;Before I dig into this, I think it’s worth pointing out that “modal” is sort of a loose definition of what this will work for. In my current project, it’s less of a modal and more of a change of focus. In the Frend component, the main work that the JavaScript is doing is keeping the focus within the modal content while it is open and then putting the focus back where it was when the modal is closed. Someone who is tabbing through the site should be able to enter the context of the modal and then get back out of it when they’re ready. This works for modals or any event where you might be shifting context based on user input.&lt;/p&gt;

&lt;h2 id=&quot;event-binding&quot;&gt;Event binding&lt;/h2&gt;

&lt;p&gt;First things first, the display of a modal has to be triggered by an action taken by the user. Likely, that’s a click on a button. When a click event occurs, we want to attach an event listener that will listen for &lt;code class=&quot;highlighter-rouge&quot;&gt;keydown&lt;/code&gt; events like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;document.addEventListener('keydown', modalTab);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;collecting-all-focusable-elements&quot;&gt;Collecting all focusable elements&lt;/h2&gt;

&lt;p&gt;Next up, if we’re going to be using the tab key, we need to find all of the elements that we want to be tabbed through. Essentially, we want to begin restricting focus states to a select group of elements that are inside the modal, and then loop through them as if the modal were a miniature webpage.&lt;/p&gt;

&lt;p&gt;We’re going to pass an array of all possible types of focusable elements into a function that will perform a &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll()&lt;/code&gt; within the context of the modal. Then we’ll end up with all of the elements to be tabbed through.&lt;/p&gt;

&lt;p&gt;Here’s an array containing all possible focusable elements:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusableSelectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a[href]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'area[href]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'input:not([disabled])'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'select:not([disabled])'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'textarea:not([disabled])'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'button:not([disabled])'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'iframe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'embed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[contenteditable]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[tabindex]:not([tabindex^=&quot;-&quot;])'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are some pretty tricky selectors! For the most part, this will take care of just about anything you’d put in a modal, but you’ll want to make sure that this list matches up with reality.&lt;/p&gt;

&lt;p&gt;Once we know what types of elements could be focusable, we need to look inside of the modal content and gather up any element that matches. We can do that with the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.modal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusableElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusableSelectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this function, if there are two anchor tags and a close button in the modal, an array with the two anchor links and button will be returned. This function will be used in the next step anytime the tab key is pressed.&lt;/p&gt;

&lt;h2 id=&quot;handling-tab-keydown&quot;&gt;Handling tab keydown&lt;/h2&gt;

&lt;p&gt;Now that the event listener is waiting for &lt;code class=&quot;highlighter-rouge&quot;&gt;keydown&lt;/code&gt; events and we’ve got a list of all focusable elements, we can check to see if the user is using the tab key. This will be done within the &lt;code class=&quot;highlighter-rouge&quot;&gt;modalTab()&lt;/code&gt; function, so let’s get that started.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modalTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s important to pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; in to the function so that we can capture which key is being used. Our first check will be just that, through the following check:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The magic key code for the tab key is &lt;code class=&quot;highlighter-rouge&quot;&gt;9&lt;/code&gt;. When I first learned that keys were mapped to numbers, it seemed like something that could fall apart pretty easily, but it holds up! Tech!&lt;/p&gt;

&lt;h2 id=&quot;creating-a-focus-loop&quot;&gt;Creating a focus loop&lt;/h2&gt;

&lt;p&gt;We now move into controlling what happens when the first or last element is tabbed past. We want to drop the user’s focus state back on the first element if they get to the end of the modal and hit tab, and this should work in the inverse as well.&lt;/p&gt;

&lt;p&gt;The following code is still inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;modalTab()&lt;/code&gt; function, and inside the conditional tag we created above that’s checking to make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Get the index of the currently focused element within the modal&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusedIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusableElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// If the shift key is not in use, check to see if we're on the last element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shiftKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusedIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusableElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Focus first item within modal&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;focusableElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// If the shift key is in use, we're going backwards, so check to see if we're on the first element&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shiftKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focusedIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;focusedIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Focus last item within modal&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;focusableElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focusableElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We really don’t need to know what’s happening on the elements between the first and last element of the modal, their focus state can remain untouched by our script. We’re just waiting for the first or last.&lt;/p&gt;

&lt;h2 id=&quot;removing-event-listener-on-close&quot;&gt;Removing event listener on close&lt;/h2&gt;

&lt;p&gt;We really only want to listen for keydown events while the modal is open, so we’ll want to remove this event listener when the modal is closed. Since this could unexpectedly cause issues with other elements on the page, it’s safest to restrict our functions to just the modal. We’d remove the event listener like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;document.removeEventListener('keydown', modalTab);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;additional-considerations&quot;&gt;Additional considerations&lt;/h2&gt;

&lt;p&gt;Beyond handling the focus state, we’ll also want to manage state on a few other items. By default, the container of the modal should receive &lt;code class=&quot;highlighter-rouge&quot;&gt;role=&quot;dialog&quot;&lt;/code&gt; as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-hidden=&quot;true&quot;&lt;/code&gt;. When the modal is opened, the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-hidden&lt;/code&gt; attribute should be updated to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, and then set back to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;  on close. This could be done with the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;modal.setAttribute('aria-hidden', true);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will vary based on what content is contained within the modal, but the first element should receive focus when the modal is opened. Whether this is just the first anchor tag or the modal container itself, the focus should be added to get the user started off properly.&lt;/p&gt;

&lt;p&gt;To learn more about how this works, the JS file for the Frend modal component is a great place to start. Much of what I went over in this post is contained within. &lt;a href=&quot;https://github.com/frend/frend.co/blob/gh-pages/_components/dialogmodal/dialogmodal.js&quot;&gt;View it on Github&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Aug 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/explaining-accessible-modals/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/explaining-accessible-modals/</guid>
        
        
      </item>
    
      <item>
        <title>Omitting optional HTML tags</title>
        <description>&lt;p&gt;Someone mentioned somewhere at some point (life moves too fast) that the &lt;a href=&quot;https://google.github.io/styleguide/htmlcssguide.html#Optional_Tags&quot;&gt;Google HTML/CSS Style Guide&lt;/a&gt; suggests that any unnecessary HTML tags can be omitted, such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. This was rather interesting to me, and so quintessential of the web. Even the things you think are so foundational may not be.&lt;/p&gt;

&lt;p&gt;I updated my Jekyll layout to remove optional tags, which means the page you’re currently viewing does not have a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag or a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. The page source goes from the document type declaration right to a meta tag. The RSS link is followed immediately by the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Of course, Google isn’t suggesting something new here, they’re simply following the HTML standard. The standard allows for the omission of quite a few other tags, such as the closing tag for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, among others. There are some conditionals around when this will work, though in most cases it seems feasible. Always good to &lt;a href=&quot;https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-omission&quot;&gt;check the spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since I’m using Jekyll to generate my site, I don’t have total control over the markup generated within the content of the site, but omitting a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/li&amp;gt;&lt;/code&gt; is neither here nor there. Still, interesting to consider that you can ship HTML without some of the most foundational tags.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Jul 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/omitting-optional-html-tags/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/omitting-optional-html-tags/</guid>
        
        
      </item>
    
      <item>
        <title>Unregistering widgets in WordPress</title>
        <description>&lt;p&gt;If you’ve ever installed Jetpack, you’re probably familiar with widget overload. Sometimes it’s better to cut down on the number of widgets available to your users, both for the benefit of their cognitive load and just for the fact that they may never use some of them. Meta widget, anyone?&lt;/p&gt;

&lt;p&gt;Unregistering a widget is a fairly small bit of code, but getting all of the information you need can sometimes be the tricky part.&lt;/p&gt;

&lt;p&gt;Here is a function that hooks into the &lt;code class=&quot;highlighter-rouge&quot;&gt;widgets_init&lt;/code&gt; action in WordPress, and in the function it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;unregister_widget()&lt;/code&gt; on the widget to remove, the meta widget in this case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;function unregister_widgets() {
  unregister_widget( 'WP_Meta' );
}
add_action( 'widgets_init', 'unregister_widgets' );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where do we know to get the class of the widget though? For all of the WordPress core widgets, you can &lt;a href=&quot;https://codex.wordpress.org/Function_Reference/unregister_widget&quot;&gt;reference the codex&lt;/a&gt;, where all of the widget names are listed. Each starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;WP_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What about widgets that come from other sources, such as a plugin or theme? That can take a little more work. The first and easiest way is to search the source code, and see if you can find where &lt;code class=&quot;highlighter-rouge&quot;&gt;register_widget()&lt;/code&gt; is being called. In Sublime Text or Atom, you could perform a Find in Files for anywhere that &lt;code class=&quot;highlighter-rouge&quot;&gt;register_widget&lt;/code&gt; appears in the project and grab the class name from there.&lt;/p&gt;

&lt;p&gt;If you don’t have the plugin or theme locally, you could also search the repository on GitHub. Opening the &lt;a href=&quot;https://github.com/Automattic/Jetpack&quot;&gt;Jetpack repository&lt;/a&gt;, the search field in the header will perform searches only within the current repository, so a search for &lt;code class=&quot;highlighter-rouge&quot;&gt;register_widget&lt;/code&gt; there will return the same results as if we had searched in a text editor.&lt;/p&gt;

&lt;p&gt;One last piece is adding a conditional to only unregister widgets if the plugin is actually active. It appears that &lt;code class=&quot;highlighter-rouge&quot;&gt;unregister_widget&lt;/code&gt; fails gracefully if it can’t find the widget class, but it would be better to just ignore it entirely if the plugin or theme isn’t active. This might take a little investigation as well, but you can check to see if the main class of the plugin exists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ( class_exists( 'Jetpack' ) ) {
  unregister_widget( 'Jetpack_Gallery_Widget' );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re unregistering a group of Jetpack widgets, adding this conditional will be much faster than checking for each widget individually.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Jun 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/unregistering-widgets-in-wordpress/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/unregistering-widgets-in-wordpress/</guid>
        
        
      </item>
    
      <item>
        <title>Adding Ajax search to a WordPress theme</title>
        <description>&lt;p&gt;There are a few plugins that will add Ajax search for you, but what if you wanted to integrate it into your theme yourself for more control over functionality and appearance? Let’s see what we can do.&lt;/p&gt;

&lt;p&gt;I’ve broken out the functionality into separate files, which keeps this feature modular. We’ll be creating &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.php&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before starting, there are a few things we need to do elsewhere first. The following will output the URL of the Ajax file that is part of WordPress core, and needs to be included in &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt;. We’ll use this in &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.js&lt;/code&gt; to send requests for search results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;wp_localize_script( 'ajax-search', 'ajaxurl', admin_url( 'admin-ajax.php' ) );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll want to customize the &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search&lt;/code&gt; bit to work with your naming structure. You’ll be less likely to run into conflicts if you use &lt;code class=&quot;highlighter-rouge&quot;&gt;[theme-name]-ajax-search&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Next, I’ve added a loading icon inside the search field to let users know that their request is being processed. I have a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;search-form.php&lt;/code&gt; defined in the theme that adds an animated SVG with a style property of &lt;code class=&quot;highlighter-rouge&quot;&gt;display: none;&lt;/code&gt;. This ensures that the icon will only be show when we’re ready.&lt;/p&gt;

&lt;p&gt;Now, for creating the files. I’m going to start with &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.php&lt;/code&gt;. This is where the template will be stored for the search results. Here we can control what is returned, add a thumbnail, excerpt, date, author, or simply return the title. There’s just one function in this file, and it attaches to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wp_ajax_&lt;/code&gt; hook in WordPress.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;function ajax_search() {
  // Get search term from search field
  $search = sanitize_text_field( $_POST[ 'query' ] );
  
  // Set up query using search string, limit to 8 results
  $query = new WP_Query(
    array(
      'posts_per_page' =&amp;gt; 8,
      's' =&amp;gt; $search
    )
  );
  
  $output = '';
  
  // Run search query
  if ( $query-&amp;gt;have_posts() ) {
    while ( $query-&amp;gt;have_posts() ) : $query-&amp;gt;the_post();
      
      /* Output a link to each result
         This is where the post thumbnail, excerpt, or anything else could be added */
      echo '&amp;lt;a href=&quot;' . get_permalink() . '&quot;&amp;gt;' . get_the_title() . '&amp;lt;/a&amp;gt;';
    
    endwhile;        
    
    // If there is more than one page of results, add link to the full results page
    if ( $query-&amp;gt;max_num_pages &amp;gt; 1 ) {
      // We use urlencode() here to handle any spaces or odd characters in the search string
      echo '&amp;lt;a class=&quot;see-all-results&quot; href=&quot;' . get_site_url() . '?s=' . urlencode( $search ) . '&quot;&amp;gt;View all results&amp;lt;/a&amp;gt;';
    }
    
  } else {
    
    // There are no results, output a message
    echo '&amp;lt;p class=&quot;no-results&quot;&amp;gt;No results&amp;lt;/p&amp;gt;';
  
  }
  
  // Reset query
  wp_reset_query();
  
  die();
}

/* We need to hook into both wp_ajax and wp_ajax_nopriv_ in order for
   the search to work for both logged in and logged out users. */
add_action( 'wp_ajax_ajax_search', 'ajax_search' );
add_action( 'wp_ajax_nopriv_ajax_search', 'ajax_search' );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.php&lt;/code&gt; could be included inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt;, but keeping it separate makes &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; cleaner and easier to understand.&lt;/p&gt;

&lt;p&gt;Up next, let’s spend some time with the JavaScript to make it work. This example relies on jQuery, but could be reworked to use vanilla JavaScript. Essentially, we listen to the search field for changes. We’ll debounce the number of requests that can be made, but ensure that the user knows that we’re working nonetheless.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;jQuery(document).ready( function($) {

  // Set up variables for each of the pertinent elements
  var $searchWrap = $('.search-form'),
      $searchField = $('.search-form .search-field'),
      $loadingIcon = $('.search-form .loading'),
      termExists = &quot;&quot;;
  
  // Debounce function from https://davidwalsh.name/javascript-debounce-function
  function debounce(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate &amp;amp;&amp;amp; !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };
  
  // Add results container and disable autocomplete on search field
  $searchWrap.append('&amp;lt;div class=&quot;results&quot;&amp;gt;&amp;lt;/div&amp;gt;');
  var $searchResults = $('.search-form .results');
  $searchField.attr('autocomplete', 'off');
  
  // Perform search on keyup in search field, hide/show loading icon
  $searchField.keyup( function() {
    $loadingIcon.css('display', 'block');
    
    // If the search field is not empty, perform the search function
    if( $searchField.val() !== &quot;&quot; ) {
      termExists = true;
      doSearch();
    } else {
      termExists = false;
      $searchResults.empty();
      $loadingIcon.css('display', 'none');
    }
  });
  
  // Make search Ajax request every 200 milliseconds, output results
  var doSearch = debounce(function() {
    var query = $searchField.val();
    $.ajax({
      type: 'POST',
      url: ajaxurl, // ajaxurl comes from the localize_script we added to functions.php
      data: {
        action: 'ajax_search',
        query: query,
      },
      success: function(result) {
        if ( termExists ) {
          // `result` here is what we've specified in ajax-search.php
          $searchResults.html('&lt;div class=&quot;results-list&quot;&gt;' + result + '&lt;/div&gt;');
        }
      },
      complete: function() {
        // Whether or not results are returned, hide the loading icon once the request is complete
        $loadingIcon.css('display', 'none');
      }
    });
  }, 200);
  
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That just about does it. The last piece is styling for the results. You’re likely to have plenty of ideas of your own, so I’ll close this up here. If there’s anything I’ve missed or been a bit unclear about, direct a tweet to &lt;a href=&quot;https://twitter.com/samhermes&quot;&gt;@samhermes&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 May 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/adding-ajax-search-to-wordpress/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/adding-ajax-search-to-wordpress/</guid>
        
        
      </item>
    
      <item>
        <title>Communicating about the web</title>
        <description>&lt;p&gt;The longer that I work in web development, the more time I spend thinking about the communication that surrounds the work I’m doing. How do I talk about what I’ve done? How do I best explain how to use a feature or tool? What happens when I’m no longer working on this project? The language that we use, whether we’re talking to another developer, a designer, or a user, is really important.&lt;/p&gt;

&lt;p&gt;For communicating with other developers, it just gets more and more important to be succinct. The fewer words I can use to explain something, the better. This is true in commit messages, code comments, and documentation. I know it’s important because I really appreciate it when others do it. It might take me a little more time to edit, but depending on how many people are involved, it can save a lot of others’ time.&lt;/p&gt;

&lt;p&gt;Slowly over time, I’ve been trying to cut out my use of the word ‘just’ and other similar terminology. Others have said this, but it’s unhelpful in that assumes that a process is easier than it may be for the reader. It subtly gives the writer the role of the expert, when it would be better to attempt to meet someone where they are. It’s something I’m working on.&lt;/p&gt;

&lt;p&gt;Beyond the day to day, I’m also challenged and interested in how to communicate to a larger, slightly undefined audience. In some cases, it’s hard to know who has or who will read what you’ve written. For on-boarding developers or users, how do I write broadly and generically while still being laser focused on the topic at hand? How do I write a commit or a pull request with enough information without taking up too much of my time? Or, how do I explain how to use a feature when my words could possibly be copied and shared with others?&lt;/p&gt;

&lt;p&gt;The web is more fun when everyone is included, and that includes everything about the web. The more we build, the more we have to keep others in mind. After all, &lt;a href=&quot;https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/&quot;&gt;you don’t know where your next users will come from&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 May 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/communicating-about-the-web/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/communicating-about-the-web/</guid>
        
        
      </item>
    
      <item>
        <title>Using next_posts_link() and prev_posts_link() on static front page</title>
        <description>&lt;p&gt;If you have a custom query of posts on a static front page in WordPress, adding pagination can be a confusing experience. The answer is fairly simple, if you’ve done it before. Prior to last week, I had not done it before, and I was very lost. Search results were driving me all kinds of places. Fortunately, you’ve landed here.&lt;/p&gt;

&lt;p&gt;The issue is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;paged&lt;/code&gt; query variable isn’t called &lt;code class=&quot;highlighter-rouge&quot;&gt;paged&lt;/code&gt; on the homepage, but rather &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;. Both &lt;code class=&quot;highlighter-rouge&quot;&gt;next_posts_link()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;prev_posts_link()&lt;/code&gt; utilize the query variable, and a custom query is looking for the &lt;code class=&quot;highlighter-rouge&quot;&gt;paged&lt;/code&gt; variable. To remedy this, you need to alter your query. In my specific case, the template partial could be used on a static front page or on any other page. Because of that, the following checks to see which is appropriate to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;global $paged;
    
if ( get_query_var( 'paged' ) ) {
	$paged = get_query_var( 'paged' );
} elseif ( get_query_var( 'page' ) ) {
	$paged = get_query_var( 'page' );
} else {
	$paged = 1;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the &lt;code class=&quot;highlighter-rouge&quot;&gt;$paged&lt;/code&gt; variable has been properly set, both &lt;code class=&quot;highlighter-rouge&quot;&gt;next_posts_link()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;prev_posts_link()&lt;/code&gt; will work as expected.&lt;/p&gt;

&lt;p&gt;I’ll note that &lt;code class=&quot;highlighter-rouge&quot;&gt;paginate_links()&lt;/code&gt; works without making the modification I’ve outlined, if that’s the pagination structure you’re looking for. In my case, it was a bit more than I needed.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/posts/next-posts-link-prev-posts-link-static-front-page/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/next-posts-link-prev-posts-link-static-front-page/</guid>
        
        
      </item>
    
  </channel>
</rss>
