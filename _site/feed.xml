<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sam Hermes</title>
    <description>Web developer at Washington University in St. Louis</description>
    <link>https://samhermes.com/</link>
    <atom:link href="https://samhermes.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 20 May 2017 23:49:24 -0500</pubDate>
    <lastBuildDate>Sat, 20 May 2017 23:49:24 -0500</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Adding Ajax search to a WordPress theme</title>
        <description>&lt;p&gt;There are a few plugins that will add Ajax search for you, but what if you wanted to integrate it into your theme yourself for more control over functionality and appearance? Let’s see what we can do.&lt;/p&gt;

&lt;p&gt;I’ve broken out the functionality into separate files, which keeps this feature modular. We’ll be creating &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.php&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before starting, there are a few things we need to do elsewhere first. The following will output the URL of the Ajax file that is part of WordPress core, and needs to be included in &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt;. We’ll use this in &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.js&lt;/code&gt; to send our requests for search results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;wp_localize_script( &#39;ajax-search&#39;, &#39;ajaxurl&#39;, admin_url( &#39;admin-ajax.php&#39; ) );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll want to customize the &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search&lt;/code&gt; bit to work with your naming structure. You’ll be less likely to run into conflicts if you use &lt;code class=&quot;highlighter-rouge&quot;&gt;[theme-name]-ajax-search&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Next, I’ve added a loading icon inside the search field to let users know that their request is being processed. I have a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;search-form.php&lt;/code&gt; defined in the theme that adds an animated SVG with a style property of &lt;code class=&quot;highlighter-rouge&quot;&gt;display: none;&lt;/code&gt;. This ensures that the icon will only be show when we’re ready.&lt;/p&gt;

&lt;p&gt;Now, for creating the files. I’m going to start with &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.php&lt;/code&gt;. This is where the template will be stored for the search results. Here we can control what is returned, add a thumbnail, excerpt, date, author, or simply return the title. There’s just one function in this file, and it attaches to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wp_ajax_&lt;/code&gt; hook in WordPress.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;function ajax_search() {
  // Get search term from search field
  $search = sanitize_text_field( $_POST[ &#39;query&#39; ] );
  
  // Set up query using search string, limit to 8 results
  $query = new WP_Query(
    array(
      &#39;posts_per_page&#39; =&amp;gt; 8,
      &#39;s&#39; =&amp;gt; $search
    )
  );
  
  $output = &#39;&#39;;
  
  // Run search query
  if ( $query-&amp;gt;have_posts() ) {
    while ( $query-&amp;gt;have_posts() ) : $query-&amp;gt;the_post();
      
      /* Output a link to each result
         This is where the post thumbnail, excerpt, or anything else could be added */
      echo &#39;&amp;lt;a href=&quot;&#39; . get_permalink() . &#39;&quot;&amp;gt;&#39; . get_the_title() . &#39;&amp;lt;/a&amp;gt;&#39;;
    
    endwhile;        
    
    // If there is more than one page of results, add link to the full results page
    if ( $query-&amp;gt;max_num_pages &amp;gt; 1 ) {
      // We use urlencode() here to handle any spaces or odd characters in the search string
      echo &#39;&amp;lt;a class=&quot;see-all-results&quot; href=&quot;&#39; . get_site_url() . &#39;?s=&#39; . urlencode( $search ) . &#39;&quot;&amp;gt;View all results&amp;lt;/a&amp;gt;&#39;;
    }
    
  } else {
    
    // There are no results, output a message
    echo &#39;&amp;lt;p class=&quot;no-results&quot;&amp;gt;No results&amp;lt;/p&amp;gt;&#39;;
  
  }
  
  // Reset query
  wp_reset_query();
  
  die();
}
add_action( &#39;wp_ajax_ajax_search&#39;, &#39;ajax_search&#39; );
add_action( &#39;wp_ajax_nopriv_ajax_search&#39;, &#39;ajax_search&#39; );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax-search.php&lt;/code&gt; could be included inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt;, but keeping it separate makes &lt;code class=&quot;highlighter-rouge&quot;&gt;functions.php&lt;/code&gt; cleaner and easier to understand.&lt;/p&gt;

&lt;p&gt;Up next, let’s spend some time with the JavaScript to make it work. This example relies on jQuery, but could be reworked to use vanilla JavaScript. Essentially, we listen to the search field for changes. We’ll debounce the number of requests that can be made, but ensure that the user knows that we’re working nonetheless.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;jQuery(document).ready( function($) {

  // Set up variables for each of the pertinent elements
  var $searchWrap = $(&#39;.search-form&#39;),
      $searchField = $(&#39;.search-form .search-field&#39;),
      $loadingIcon = $(&#39;.search-form .loading&#39;),
      termExists = &quot;&quot;;
  
  // Debounce function from https://davidwalsh.name/javascript-debounce-function
  function debounce(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate &amp;amp;&amp;amp; !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };
  
  // Add results container and disable autocomplete on search field
  $searchWrap.append(&#39;&amp;lt;div class=&quot;results&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;);
  var $searchResults = $(&#39;.search-form .results&#39;);
  $searchField.attr(&#39;autocomplete&#39;, &#39;off&#39;);
  
  // Perform search on keyup in search field, hide/show loading icon
  $searchField.keyup( function() {
    $loadingIcon.css(&#39;display&#39;, &#39;block&#39;);
    
    // If the search field is not empty, perform the search function
    if( $searchField.val() !== &quot;&quot; ) {
      termExists = true;
      doSearch();
    } else {
      termExists = false;
      $searchResults.empty();
      $loadingIcon.css(&#39;display&#39;, &#39;none&#39;);
    }
  });
  
  // Make search Ajax request every 200 milliseconds, output results
  var doSearch = debounce(function() {
    var query = $searchField.val();
    $.ajax({
      type: &#39;POST&#39;,
      url: ajaxurl, // ajaxurl comes from the localize_script we added to functions.php
      data: {
        action: &#39;ajax_search&#39;,
        query: query,
      },
      success: function(result) {
        if ( termExists ) {
          // `result` here is what we&#39;ve specified in ajax-search.php
          $searchResults.html(&#39;&lt;div class=&quot;results-list&quot;&gt;&#39; + result + &#39;&lt;/div&gt;&#39;);
        }
      },
      complete: function() {
        // Whether or not results are returned, hide the loading icon once the request is complete
        $loadingIcon.css(&#39;display&#39;, &#39;none&#39;);
      }
    });
  }, 200);
  
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That just about does it. The last piece is styling for the results. You’re likely to have plenty of ideas of your own, so I’ll close this up here. If there’s anything I’ve missed or been a bit unclear about, direct a tweet to &lt;a href=&quot;https://twitter.com/samhermes&quot;&gt;@samhermes&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 May 2017 00:00:00 -0500</pubDate>
        <link>https://samhermes.com/posts/adding-ajax-search-to-wordpress/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/adding-ajax-search-to-wordpress/</guid>
        
        
        <category>wordpress</category>
        
      </item>
    
      <item>
        <title>Communicating about the web</title>
        <description>&lt;p&gt;The longer that I work in web development, the more time I spend thinking about the communication that surrounds the work I’m doing. How do I talk about what I’ve done? How do I best explain how to use a feature or tool? What happens when I’m no longer working on this project? The language that we use, whether we’re talking to another developer, a designer, or a user, is really important.&lt;/p&gt;

&lt;p&gt;For communicating with other developers, it just gets more and more important to be succinct. The fewer words I can use to explain something, the better. This is true in commit messages, code comments, and documentation. I know it’s important because I really appreciate it when others do it. It might take me a little more time to edit, but depending on how many people are involved, it can save a lot of others’ time.&lt;/p&gt;

&lt;p&gt;Slowly over time, I’ve been trying to cut out my use of the word ‘just’ and other similar terminology. Others have said this, but it’s unhelpful in that assumes that a process is easier than it may be for the reader. It subtly gives the writer the role of the expert, when it would be better to attempt to meet someone where they are. It’s something I’m working on.&lt;/p&gt;

&lt;p&gt;Beyond the day to day, I’m also challenged and interested in how to communicate to a larger, slightly undefined audience. In some cases, it’s hard to know who has or who will read what you’ve written. For on-boarding developers or users, how do I write broadly and generically while still being laser focused on the topic at hand? How do I write a commit or a pull request with enough information without taking up too much of my time? Or, how do I explain how to use a feature when my words could possibly be copied and shared with others?&lt;/p&gt;

&lt;p&gt;The web is more fun when everyone is included, and that includes everything about the web. The more we build, the more we have to keep others in mind. After all, &lt;a href=&quot;https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/&quot;&gt;you don’t know where your next users will come from&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 May 2017 00:00:00 -0500</pubDate>
        <link>https://samhermes.com/posts/communicating-about-the-web/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/communicating-about-the-web/</guid>
        
        
      </item>
    
      <item>
        <title>Using next_posts_link() and prev_posts_link() on static front page</title>
        <description>&lt;p&gt;If you have a custom query of posts on a static front page in WordPress, adding pagination can be a confusing experience. The answer is fairly simple, if you’ve done it before. Prior to last week, I had not done it before, and I was very lost. Search results were driving me all kinds of places. Fortunately, you’ve landed here.&lt;/p&gt;

&lt;p&gt;The issue is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;paged&lt;/code&gt; query variable isn’t called &lt;code class=&quot;highlighter-rouge&quot;&gt;paged&lt;/code&gt; on the homepage, but rather &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;. Both &lt;code class=&quot;highlighter-rouge&quot;&gt;next_posts_link()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;prev_posts_link()&lt;/code&gt; utilize the query variable, and a custom query is looking for the &lt;code class=&quot;highlighter-rouge&quot;&gt;paged&lt;/code&gt; variable. To remedy this, you need to alter your query. In my specific case, the template partial could be used on a static front page or on any other page. Because of that, the following checks to see which is appropriate to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;global $paged;
    
if ( get_query_var( &#39;paged&#39; ) ) {
	$paged = get_query_var( &#39;paged&#39; );
} elseif ( get_query_var( &#39;page&#39; ) ) {
	$paged = get_query_var( &#39;page&#39; );
} else {
	$paged = 1;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the &lt;code class=&quot;highlighter-rouge&quot;&gt;$paged&lt;/code&gt; variable has been properly set, both &lt;code class=&quot;highlighter-rouge&quot;&gt;next_posts_link()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;prev_posts_link()&lt;/code&gt; will work as expected.&lt;/p&gt;

&lt;p&gt;I’ll note that &lt;code class=&quot;highlighter-rouge&quot;&gt;paginate_links()&lt;/code&gt; works without making the modification I’ve outlined, if that’s the pagination structure you’re looking for. In my case, it was a bit more than I needed.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Apr 2017 00:00:00 -0500</pubDate>
        <link>https://samhermes.com/posts/next-posts-link-prev-posts-link-static-front-page/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/next-posts-link-prev-posts-link-static-front-page/</guid>
        
        
        <category>wordpress</category>
        
      </item>
    
      <item>
        <title>We don’t need AMP</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://shoptalkshow.com/episodes/248-amp/&quot;&gt;Episode #248 of Shop Talk Show&lt;/a&gt; is all about AMP (accelerated mobile pages) and how the project relates to the web at large. After listening, I have some thoughts. It’s made fairly clear in the episode that AMP is a crutch used by publishers who have lost control of their website’s performance. AMP has a very tight set of constraints built into it that prioritize performance. Comparing it to a traditional website, it makes sense why it is so effective. The defeating part of it is that it doesn’t have to exist. We can make pages that are better than AMP on the web.&lt;/p&gt;

&lt;p&gt;Development teams have been fighting constraints as long as the web has existed, and sometimes performance just doesn’t win out. Now they’ve been presented with, essentially, an easy way out. Instead of reprioritizing performance internally, AMP can be used to make the case for performance, and it wins out because it puts you in a good place with Google. This isn’t a good for the long-term.&lt;/p&gt;

&lt;p&gt;The guests in the episode don’t seem to be able to defend the AMP project very well, and it’s a bit hard to get on board listening to the discussion. It reeks a bit of “business reasons,” which is never a good reason in itself to do something. The fact of the matter is, AMP doesn’t need to exist. What we should be doing is using AMP as a model to improve what we already have. We should be removing as much code as possible from our sites, simplifying the layout, and caching as much as we possibly can. The future of the web depends on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 3/25/17:&lt;/strong&gt; An excellent roundup of the debate over AMP was posted on CSS-Tricks just the other day, it’s at &lt;a href=&quot;https://css-tricks.com/need-catch-amp-debate/&quot;&gt;css-tricks.com/need-catch-amp-debate&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 -0500</pubDate>
        <link>https://samhermes.com/posts/we-dont-need-amp/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/we-dont-need-amp/</guid>
        
        
      </item>
    
      <item>
        <title>The two worlds of web development</title>
        <description>&lt;p&gt;There’s a big divide in the web development community that doesn’t get discussed enough. It’s roughly the difference between those who develop sites for informational purposes and those who develop sites that are applications. In some ways, it’s the divide between front end and back end development. It’s a bit difficult to draw a line between the two worlds, but informational sites are usually those for organizations, businesses, government, etc., and applications are properties like Airbnb, Facebook, and Google Docs. Interactivity, such as filtering, liking, saving, editing, or sorting, is usually what takes it from informational to application. The way we talk about and teach web development often mixes these two or makes no distinction.&lt;/p&gt;

&lt;p&gt;There are fundamental differences in the way we approach development in the two worlds. I’ve often gotten caught in this myself. Developing CSS for a web application is infinitely more complex than developing CSS for a static site mostly consisting of pages. Typically, if a project has a small team of developers working on it, CSS naming techniques such as BEM or OOCSS are not necessary. In fact, they are likely adding undue complexity and bloat to the site. In addition, a future developer would need to be briefed on how CSS works in that specific project.&lt;/p&gt;

&lt;p&gt;The same problem exists with JavaScript frameworks. An informational site rarely calls for a framework, and only sometimes calls for jQuery or another library. To develop an informational site using React, we’ve introduced a great deal of complexity that will require a level of maintenance that likely outweighs the perceived benefits. React makes sense for those sites that absolutely call for it, where we need to break apart each and every piece of a page into small, maintainable components. In addition, for someone new to web development, it may seem like React is required knowledge. We talk about it often, making it seem like a core piece of the web. In reality, it’s not. It’s simply the thing that there is a lot to learn about at the moment.&lt;/p&gt;

&lt;p&gt;Many of the foremost developers working in our industry are no longer solving problems for information-based sites. The pressing issues are how to handle a site when there are an innumerable amount of views and states, from all of the different ways to view a single post, photo, or conversation. And what about these views at each breakpoint? What if the user is not logged in? On top of that, how do we handle small updates with a team of 30 developers and keep everyone in sync? Many of the articles that get written and shared are answers to these big problems. While it’s fantastic to be aware of this work, it would be better if we had a bit of context before adapting it for ourselves. At the very least, we should take some time to consider whether or not the practices being put forth are appropriate for our world.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 -0500</pubDate>
        <link>https://samhermes.com/posts/two-worlds-web-development/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/two-worlds-web-development/</guid>
        
        
      </item>
    
      <item>
        <title>The long game of web development</title>
        <description>&lt;p&gt;I recently finished reading &lt;em&gt;The World Beyond Your Head&lt;/em&gt; by Matthew B. Crawford, and in the book he speaks of observing the individuals working as organ builders. He tells of the slowness of the process, much done by hand, then spends a bit of time musing on the long game of organ building. In it, one must respect the work of the person who came before, and also think of the person who will be maintaining the organ, and learning from their work in the future.&lt;/p&gt;

&lt;p&gt;Throughout, I couldn’t stop myself from paralleling organ building with web development, as I am wont to do. Web development depends so heavily on the past and the future, both respecting the standards and best practices that came before, and looking to the future and working in a way that will allow for flexibility down the line. Compared to building an organ, all of this is happening in a heavily compressed amount of time.&lt;/p&gt;

&lt;p&gt;In making the parallel, and taking it a little further, I was incredibly inspired by the following, taken straight from the book:&lt;/p&gt;

&lt;p&gt;“The preparation—getting the cutups right, getting them straight, manipulating the windway sizes and the toe holes—you could train a monkey to do that sort of thing. Just give them the list and they do it. If that’s done really really well, that’s ninety-seven percent of the work. After that ninety-seven percent is finished, the pipe will make a sound, it’ll play. Getting it to play beautifully, that’s the last three percent. And that’s where I’d like to say the artistic integrity of the voicer is put to use, and it’s at that point where the good voicer who has done really well preparing the pipes can take all the math and all the science, if they so desire, and you can start to throw some of that out the window. Now we’re not in the science book anymore, we’re not studying the math, now we’re making music.”&lt;/p&gt;

&lt;p&gt;It’s impossible to take web development seriously without great attention to the design, and design is music. The organ builders are involved in a tedious operation that ultimately results in music. Web developers spend months preparing a site the results in design. It’s design that hits the screen, not the development. No matter what you did in development, does it create music?&lt;/p&gt;

&lt;p&gt;Maybe the numbers all add up, they make sense, they’ve been engineered to perfection. Is the website a technical feat, it’s perfectly functional, but it just doesn’t seem to have a point of view? It’s easy to get caught up in the engineering of a website so much that the product of all that work doesn’t present itself as an emotional experience. And isn’t that what we’re doing on the web? If we were to throw emotion and perspective and impact out the window, we wouldn’t have much use for CSS. Why would we get halfway there and then give up when we’re so close?&lt;/p&gt;

&lt;p&gt;I urge you to spend that last 3 percent, and rebel. Go against the numbers, use your gut. Make something that feels like music. Make something that will inform the future.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 -0600</pubDate>
        <link>https://samhermes.com/posts/the-long-game-of-web-development/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/the-long-game-of-web-development/</guid>
        
        
      </item>
    
      <item>
        <title>High density screens and web performance</title>
        <description>&lt;p&gt;High density screens and the web are at odds. On one side, we want sites to look as crisp as possible, no matter where they are being viewed, but on the other hand, performance is incredibly important. Actually, most important.&lt;/p&gt;

&lt;p&gt;Say that we begin preparing images for 2x devices. We serve up images that are four times bigger in file size, and they look great on a Retina MacBook Pro. That’s great. But, look at it on a 5K iMac, and we’re essentially back to square one. Also, we forgot to ask, but did that MacBook Pro user want to download an image that was four times bigger? Maybe they were on a slow connection and did not really care to. Should we be making those decisions for them at this point? I think we should be waiting for browsers to get smarter about this.&lt;/p&gt;

&lt;p&gt;Currently, my goal is to prepare everything, except for photos, for any pixel density. I think that by leaving photos at or slightly above their display size, it optimizes for web performance. Photos are the hardest to tell if they are not at the correct pixel density. If there is text in an image, it should be served up in higher density. Otherwise, 1x is good enough for now.&lt;/p&gt;

&lt;p&gt;I think sites are in good shape if they convert all remaining graphical elements to vector, including interface controls. If you can do it in a vector graphic, it’s ready for the future. Right now, the support for SVG is fantastic, and they are fairly performant. I think they are what I am most excited about on the web at the moment.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Dec 2016 00:00:00 -0600</pubDate>
        <link>https://samhermes.com/posts/high-density-screens-web-performance/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/high-density-screens-web-performance/</guid>
        
        
      </item>
    
      <item>
        <title>How to configure a sticky header to prevent page jump</title>
        <description>&lt;p&gt;As I’ve been out browsing the web lately, I’ve come across quite a few sticky headers that are implemented in a way that causes the page to jump up as scrolling begins. They are statically positioned at the top of the page, and then convert to fixed position when the page is scrolled down to a certain point. That works well, except removing an element from its position in the page leaves a gap, and that gap will close immediately after the element is removed, causing the page to jump up.&lt;/p&gt;

&lt;p&gt;Fortunately, the fix is simple and straightforward. We must simply fill the gap left by a sticky header. We can fill it in a number of ways, a few of which I will detail now.&lt;/p&gt;

&lt;h3 id=&quot;apply-padding-to-the-top-or-bottom-of-the-nearest-element&quot;&gt;Apply padding to the top or bottom of the nearest element&lt;/h3&gt;
&lt;p&gt;This works well if you have an stable environment in which to do it. If the header is the same across the entire site, you can be certain that this will always give you the desired outcome. Right next to the JavaScript that you are using to change the positioning of the header, just grab a calculation of the current height of the sticky element and apply that value as top or bottom padding to the nearest element. &lt;em&gt;dusts off hands, walks away&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var navHeight = document.getElementById(&#39;site-header&#39;).offsetHeight,
	page = document.getElementById(&#39;page&#39;);

page.style.paddingTop = navHeight + &#39;px&#39;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in mind that &lt;code class=&quot;highlighter-rouge&quot;&gt;.offsetHeight&lt;/code&gt; will include padding and border, but not margin.&lt;/p&gt;

&lt;h3 id=&quot;add-an-empty-div-after-the-sticky-header&quot;&gt;Add an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; after the sticky header&lt;/h3&gt;
&lt;p&gt;This method is used by Stickyfill, which I’ve written about before. This method is a little more flexible if you’re looking to make multiple items sticky or if you aren’t sure what elements will be reliably above or below the header. Rather than reinventing a wheel, add Stickyfill to your project and follow its implementation. It does an excellent job and won’t lead to issues with page jump.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 -0600</pubDate>
        <link>https://samhermes.com/posts/how-to-configure-sticky-header-to-prevent-page-jump/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/how-to-configure-sticky-header-to-prevent-page-jump/</guid>
        
        
      </item>
    
      <item>
        <title>Preparing SVG for the web</title>
        <description>&lt;p&gt;I used to be really scared of using SVG, and now I’m just a little bit scared. I think the scary part is that you can easily see the mess inside. It’s all right there, open to edit and optimize. I’ve been working with SVG for a while now, and I’ve come to rest on what I’ve found to be the best way to prepare them for the web. As they are complex, these may not be the best in each and every case, but this is what works for me.&lt;/p&gt;

&lt;h3 id=&quot;saving-from-illustrator&quot;&gt;Saving from Illustrator&lt;/h3&gt;

&lt;p&gt;I followed the save dialog example given in the &lt;a href=&quot;https://css-tricks.com/using-svg/&quot;&gt;CSS Tricks article on using SVG&lt;/a&gt; for a while before I got comfortable with it. The article doesn’t get into details of the options, so let me step through those. You’ll have to toggle the ‘More Options’ button to get to all of these.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SVG Profile&lt;/strong&gt;&lt;br /&gt;
Set this to SVG 1.1, which is the current supported version in modern browsers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CSS Properties&lt;/strong&gt;&lt;br /&gt;
There’s not a big difference between using a style element, or applying presentation attributes, but I like to use presentation attributes. It makes the resulting document cleaner, and doesn’t muddy it up with classes. We already have enough classes. If you’re going to inline the SVG and use CSS to add additional styles, then classes are the way to go. For static images, presentation attributes make the most sense to me.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decimal Places&lt;/strong&gt;&lt;br /&gt;
You’ll want to adjust the amount of decimals on an image by image basis, as some images will break down if you use too few, but it’s always better for performance if you use fewer. I like to get down to about 1 or 2 if possible.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Checkboxes&lt;/strong&gt;&lt;br /&gt;
I hate to generalize, but if there’s a checkbox with a check in it, uncheck it. We don’t want to preserve editing capabilities, include slicing data or XMP, or make it responsive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Much of this I was able to verify using an &lt;a href=&quot;http://stackoverflow.com/questions/13236365/optimal-settings-for-exporting-svgs-for-the-web-from-illustrator&quot;&gt;incredibly helpful answer given on Stack Overflow&lt;/a&gt;. It details even further the reasons behind settings, and talks about fonts and images, both of which don’t really seem to belong inside of an SVG.&lt;/p&gt;

&lt;p&gt;Once the SVG has been saved from Illustrator, further optimization is necessary. Illustrator includes a generator comment inside the SVG, and does not do any minimization.&lt;/p&gt;

&lt;h3 id=&quot;optimizing-for-the-web&quot;&gt;Optimizing for the web&lt;/h3&gt;

&lt;p&gt;Illustrator gives you a big glob of stuff that you do not need, or want to send down the pipe. SVG is already a little heavier than a PNG anyway, depending, so it’s important to make it as slim as possible.&lt;/p&gt;

&lt;p&gt;I use SVGO on the command line to optimize all SVGs. It works great, and I’ll give it credit for warming me up to the command line in general. You just type &lt;code class=&quot;highlighter-rouge&quot;&gt;svgo&lt;/code&gt;, a space, drag and drop the file onto the terminal window, and hit enter. Done. It will tell you what percentage it has shaved off, which always feels awesome. There is also a web interface, created by Jake Archibald, that will perform the same tasks. It’s accessible at &lt;a href=&quot;https://jakearchibald.github.io/svgomg&quot;&gt;https://jakearchibald.github.io/svgomg&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;a-few-things-youll-want-to-look-out-for&quot;&gt;A few things you’ll want to look out for:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure that the height and width are set inside the SVG, not just in CSS. This improves compatibility across browsers. Can I use reports an issue in IE 9–11 where SVGs don’t scale properly without height, width, viewBox, and CSS rules specified, and I’ve had an SVG without height and width collapse to about 3px tall on an older Android device.&lt;/li&gt;
  &lt;li&gt;It’s best if the viewBox attribute starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;0 0&lt;/code&gt;, followed by the width and height of the graphic. This puts the origin of the graphic at the natural origin and matches the viewport to the height and width. A fantastic, thorough explanation of this has been written by Sara Soueidan at &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;https://sarasoueidan.com/blog/svg-coordinate-systems&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 14 Sep 2016 00:00:00 -0500</pubDate>
        <link>https://samhermes.com/posts/preparing-svg-for-the-web/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/preparing-svg-for-the-web/</guid>
        
        
      </item>
    
      <item>
        <title>Adding syntax highlighting to code</title>
        <description>&lt;p&gt;When I started working on the last iteration of my site, I knew I was going to need to figure out how to display code snippets. I considered using Github Gists or Codepen, but they both seemed to be a bit overkill. Also, I wanted control over the appearance and formatting.&lt;/p&gt;

&lt;p&gt;If I wasn’t going to be embedding the code, that meant I would need to add it directly to the post, wrap it in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tags, and style it. I could handle the first two steps, but needed help styling it. There are a number of JavaScript libraries that will apply syntax highlighting to your code, but I landed on &lt;a href=&quot;http://prismjs.com&quot;&gt;Prism.js&lt;/a&gt;. It was the lightest option, and was the easiest to tweak the styles of. I am using the Okaidia theme and added PHP to the list of default languages.&lt;/p&gt;

&lt;p&gt;Since I’m using Jekyll to build my site, I wasn’t sure how to conditionally include Prism only on the posts I’m using code snippets in. Using an &lt;a href=&quot;http://mattgemmell.com/page-specific-assets-with-jekyll/&quot;&gt;article by Matt Gemmell&lt;/a&gt;, I added YAML front matter that specified the name of the JavaScript file to include.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;custom_js: prism&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in the footer, I added a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop that added a script tag for each javascript file included.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;{% if page.custom_js %}
  {% for js_file in page.custom_js %}
&amp;lt;script src=&#39;/js/{{ js_file }}.js&#39; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
  {% endfor %}
{% endif %}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prism comes with the appropriate styles bundled with it, which I just copied and included in my main stylesheet, tweaking them slightly.&lt;/p&gt;

&lt;p&gt;With Prism running on the page, all that’s needed to properly activate it is the appropriate class for the language of the code snippet. For the above snippet, I added &lt;code class=&quot;highlighter-rouge&quot;&gt;class=&quot;language-markup&quot;&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt;  element to add the appropriate highlighting. Now when making a new post, I just need to include the YAML front matter and add a class, and that’s it!&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 00:00:00 -0500</pubDate>
        <link>https://samhermes.com/posts/adding-syntax-highlighting-to-code/</link>
        <guid isPermaLink="true">https://samhermes.com/posts/adding-syntax-highlighting-to-code/</guid>
        
        
      </item>
    
  </channel>
</rss>
